<?xml version="1.0" encoding="utf-8" ?>
<Demos>
  <GettingStarted SeoTitle="Getting Started">
    <Section Title="Introduction">
      <Description>
        <![CDATA[
          <p>This tutorial describes how to integrate DevExpress Bootstrap Controls into a web application and gives a few tips on building adaptive page layouts and customizing the controls' appearance and functionality.</p>
        ]]>
      </Description>
    </Section>
    <Section Title="First Steps">
      <Description>
        <![CDATA[
          <p>Use the steps below to integrate DevExpress Bootstrap controls into your application:</p>
          <ol>
            <li><p>Download and install the DevExpress .NET Components suite.<br />
              <a href="https://www.devexpress.com/products/try/">https://www.devexpress.com/products/try/</a>
            </p></li>
            <li>
              <p>Configure your application to use the bootstrap.css and DevExpress Bootstrap Control libraries. The process is different depending on whether you are modifying an existing project or creating a new one.</p>
              
              <p><b>Modifying an existing project:</b></p>
              <ul>
                <li>
                  <p>Install Bootstrap manually or using one of the available package managers and add the bootstrap.css link to a page (a master page or layout.cshtml).</p> 
<pre><code class="hljs html">
...
<link href="Content/bootstrap.min.css" rel="stylesheet" />
...
</code></pre>    
                </li>
                <li>
                  <p>Add the required META declarations to the page's HEAD section.</p>
<pre><code class="hljs html">
...
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
...
</code></pre>   
                </li>
				<li>
					<p>Specify the Bootstrap framework version used to render DevExpress Bootstrap controls in the <i>Web.Config</i> file.</p>
<pre><code class="hljs html">
<configuration>
...
	<devExpress>
	  <bootstrap mode="Bootstrap4" />
	</devExpress>
...
</configuration>
</code></pre>   
				</li>
                <li>
                  <p>Drop one of the Bootstrap controls from the Visual Studio toolbox onto a page. This will automatically add all configuration sections and assembly references required by DevExpress Bootstrap controls to the application's web.config file.<br />
                    <img src="images/getting-started/drop-control.gif" alt="Drop DevExpress Bootstrap Control" />  
                  </p>
                  <p>You can also add the required references using the DevExpress Project Wizard, which you can run from the Visual Studio main menu (DevExpress -&gt; ASP.NET Controls -&gt; Run Wizard to Update Project).<br />
                    <img src="images/getting-started/update-project.png" alt="Update Project" />  
                  </p>
                </li>                           
              </ul>
              <p><b>Creating a new project:</b></p>
              <ul>
                <li>
                  <p>Start a new project in Visual Studio (File -&gt; New -&gt; Project/WebSite).</p>
                </li>
                <li>
                  <p>In the invoked wizard, select the DevExpress Template Gallery.</p>
                </li>
                <li>
                  <p>Select Bootstrap Web Site (Application) and click Run Wizard.</p>
                </li>
                <li>
                  <p>In the DevExpress ASP.NET Project wizard, specify the required project settings and click Create Project.</p>
                </li>
              </ul>
              <img src="images/getting-started/new-project.gif" alt="New Project" />  
              <p>The wizard automatically generates a project based on a built-in template. The created project includes all settings Bootstrap controls require.</p>
            </li>            
          </ol>      
        ]]>
      </Description>
    </Section>
    <Section Title="Start Using Bootstrap Charts">
      <Description>
        <![CDATA[
          <p>All chart controls included in the suite require the DevExtreme JavaScript libraries and CSS files. You can enable auto-embedding these resources in the <code>\devExpress\resources</code> web.config section as shown below.</p>
<pre><code class="hljs xml">
...
<devExpress>
  <resources>
    <add type="DevExtreme"/>
    <add type="ThirdParty"/>
  </resources>
</devExpress>
...
</code></pre>
          <p>Alternatively, you can add the required references manually:</p> 
          <pre><code class="hljs js">
<script src="https://code.jquery.com/jquery-migrate-3.0.1.min.js" integrity="sha256-F0O1TmEa4I8N24nY0bya59eP6svWcshqX1uzwaWC4F4="crossorigin="anonymous"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
    
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/cldrjs/0.5.0/cldr.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/cldrjs/0.5.0/cldr/event.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/cldrjs/0.5.0/cldr/supplemental.js"></script>
    
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/globalize/1.3.0/globalize.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/globalize/1.3.0/globalize/message.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/globalize/1.3.0/globalize/number.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/globalize/1.3.0/globalize/currency.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/globalize/1.3.0/globalize/date.js"></script>

<link rel="stylesheet" type="text/css" href="https://cdn3.devexpress.com/jslib/18.1.3/css/dx.common.css" />
<link rel="stylesheet" type="text/css" href="https://cdn3.devexpress.com/jslib/18.1.3/css/dx.light.css" />
<script type="text/javascript" src="https://cdn3.devexpress.com/jslib/18.1.3/js/dx.all.js"></script>
</code></pre>
        ]]>
      </Description>
    </Section>
    <Section Title="Customize a Control's Appearance">
      <Description>
        <![CDATA[
          <p>Each control in the suite has a CssClasses property providing access to settings that customize styles applied to the control and its visual elements. 
          The markup sample below demonstrates how to assign a CSS class to a Bootstrap Button.</p>
          <p><b>Page Markup:</b></p>
<pre><code class="hljs xml">
...
<dx:BootstrapButton runat="server" GroupName="s" AutoPostBack="false" Text="s">
  <CssClasses Control="my-button" />
</dx:BootstrapButton>
...
</code></pre>
          <p><b>Style Declaration:</b></p>    
<pre><code class="hljs css">
.my-button {
    border-radius: 0;
}
</code></pre>
          <img src="images/getting-started/custom-appearance.png" alt="Button Custom Appearance" />          
        ]]>
      </Description>
    </Section>
    <Section Title="Create Adaptive Layouts">
      <Description>
        <![CDATA[
          <p>The DevExpress Bootstrap Controls seamlessly integrate with layout features provided by the Bootstrap framework. To construct adaptive web applications, make sure to use page layouts based on the Bootstrap grid system <a href="https://getbootstrap.com/docs/4.0/layout/grid/">https://getbootstrap.com/docs/4.0/layout/grid/</a>.</p>    
<pre><code class="hljs html">
<div class="container">
  <div class="row">
    <div class="col">
      LEFT NAVIGATION
    </div>
    <div class="col-sm-8">
      MAIN CONTENT
    </div>
  </div>
</div>  
</code></pre>   
        ]]>
      </Description>
    </Section>
    <Section Title="Use Bootstrap Themes">
      <Description>
        <![CDATA[
          <p>DevExpress Bootstrap controls are natively rendered using Bootstrap framework components. No configuration is required to apply an external Bootstrap theme.</p>    
          <p>In a page markup, replace the default bootstrap.css file link with one to the themed bootstrap.css file (which is supplied with a bootstrap theme). The custom theme is then applied to all the controls on the page.</p>    
        ]]>
      </Description>
    </Section>
    <Section Title="Change Icons">
      <Description>
        <![CDATA[
          <p>DevExpress Bootstrap controls use icon fonts to display icons within their visual elements. 
          The default Embedded icon set can be replaced with FontAwesome or Glyphicons Halflings set (the latter included by default into the Bootstrap 3 package). 
          You can also replace each individual icon with a custom one in CSS.</p>  
          <p><strong>Embedded:</strong><br />
            <img src="images/getting-started/icons-embedded.png" alt="Embedded Icons" />
          </p>
          <p><strong>Glyphicons:</strong><br />
            <img src="images/getting-started/icons-glyphicons.png" alt="Glyphicons Icons" />
          </p>
          <p><strong>FontAwesome:</strong><br />
            <img src="images/getting-started/icons-fontawesome.png" alt="Font Awesome Icons" />
          </p>
          <p>To switch icon sets, use the iconSet property available in the /devExpress/bootstrap web.config section. For example, set the iconSet property to FontAwesome to switch the default built-in icon set to Font Awesome icons.</p>
<pre><code class="hljs xml">
...
<devExpress>
  <bootstrap iconSet="FontAwesome" />
</devExpress>
...
</code></pre>
          <p>Note that you would need to download Font Awesome icons separately, then add the font and CSS files to your project and link the FontAwesome CSS to your master page:</p>
<pre><code class="hljs xml">
...
<link href="font-awesome/css/font-awesome.css" rel="stylesheet" />
...
</code></pre>       
        ]]>
      </Description>
    </Section>
  </GettingStarted>

  <DemoGroup Key="GridView" Title="Grid View" SeoTitle="Bootstrap GridView Demo" IconCssClass="icon icon-grid" OrderIndex="0">
    <PreDescription>
      <![CDATA[
        <p>The DevExpress Bootstrap Grid View is a full-featured tabular data presentation control that renders itself using Bootstrap CSS classes. It fully supports data editing and delivers numerous end-user data shaping features, including facilities for end-user data filtering, grouping and sorting. Both total and group summaries are also available out-of-the box.</p>
      ]]>
    </PreDescription>
    <Description>
      <![CDATA[
        <p>The Grid View control allows you to create complex master-detail layouts with unlimited nesting levels. Additionally, the layouts of separate Grid View's visual elements are customizable using templates.</p>
        <p>The Grid View has been designed to work with large data sources and supports data binding in server mode. In this mode, the grid only loads the records to be displayed on screen and delegates all data processing to the database server. The Grid View control automatically splits content across multiple pages and a built-in pager enables end-users to navigate through data.</p>
        <p>Extensive server-side and client-side APIs cover multiple popular customization scenarios and gives you full control over the grid's behavior and presentation.</p>
      ]]>
    </Description>
    <Demo Key="LargeDataBase" Title="Binding to Large DB" SeoTitle="Bootstrap GridView Binding to Large DataBase Demo">
      <DemoSection Key="BindingToLargeDatabase" Title="Binding to Large Database (Server Mode)">
        <Description>
          <![CDATA[
            <p>The Grid View control supports binding to data in the server mode using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Data.Linq.EntityServerModeDataSource">EntityServerModeDataSource</helplink> component. In this mode, the Grid View loads only the minimum amount of data required for display on screen and delegates all data processing (such as grouping and sorting) to the database server. This technique significantly reduces the application's response time when working with large data sets.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Editing" Title="Editing" SeoTitle="Bootstrap GridView Data Editing Demo">
      <DemoSection Key="EditingWithEditForm" Title="Editing With Edit Form">
        <Description>
          <![CDATA[
                <p>The Grid View control provides end-user data editing functionality out of the box. The commands for end-user data modification are displayed within a command column. Add this column to the grid's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridView.Columns">Columns</helplink> to allow editing.</p>
                <p>By default, a built-in Edit Form is used to modify cell values. The Edit Form displays edit cells that correspond to data columns, and the <strong>Cancel/Update</strong> commands that allow end-users to discard changes or save them to a database.</p>
                <p>By default all data editing operations are prohibited. In this demo, row insertion, deletion, and editing is explicitly enabled using settings available through the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridView.SettingsDataSecurity">SettingDataSecurity</helplink> property.</p>
         ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="BatchEditingAndUpdating" Title="Batch Editing and Updating">
        <Description>
          <![CDATA[
                <p>The Grid View control allows you to edit and update multiple grid rows on the client side and send them to the server in a single request.</p>
                <p>To enable batch editing, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewEditingSettings.Mode">SettingsEditing.Mode</helplink> property to '<b>Batch</b>'. In this mode, you can use in-line editors to edit grid data (the modified cells are highlighted). Deleted rows are also highlighted and display the <b>Recover</b> command item. To hide the deleted rows, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewBatchEditSettings.HighlightDeletedRows">SettingsEditing.BatchEditSettings.HighlightDeletedRows</helplink> property to <b>false</b>. All changes are maintained on the client side until the <b>Save changes</b> link is clicked, or the <b>Cancel changes</b> button is clicked to cancel all the changes.</p>

                <p>If a grid contains modified data, it displays a confirmation message before a postback or callback. When the grid supports callbacks, you can manage changed rows that belong to different pages. You can use the <b>Preview changes</b> button to preview and modify inserted, deleted and edited rows before you click <b>Update</b>.</p>

                <p>You can use the following properties to customize the batch edit mode settings:</p>

                <ul>
                     <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewBatchEditSettings.KeepChangesOnCallbacks">KeepChangesOnCallbacks</helplink> property specifies whether the grid keeps changes made in batch edit mode on callbacks.</li>
					<li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewBatchEditSettings.EditMode">EditMode</helplink> property allows you to specify which control element (data cell or data row) is used to edit data.</li>
                    <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridBatchEditSettings.StartEditAction">StartEditAction</helplink> property specifies the action that is used to edit grid data.</li>  
                </ul>
                <p>The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.batchEditApi">batchEditApi</helplink> property provides access to the batch edit client API. The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.BatchEditStartEditing">BatchEditStartEditing</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.BatchEditEndEditing">BatchEditEndEditing</helplink> events occur when a grid switches to/leaves the batch edit mode.</p>
                <p>All data editing operations are prohibited. In this demo, the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridView.SettingsDataSecurity">SettingDataSecurity</helplink> property's settings are used to unable row insertion, deletion, and editing.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="EditingInPopupEditForm" Title="Editing in Popup Edit Form">
        <Description>
          <![CDATA[
                <p>In this mode, the Edit Form is displayed within a popup window. To use this mode, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewEditingSettings.Mode">SettingsEditing.Mode</helplink> property to <strong>PopupEditForm</strong>.</p>
                <p>By default, all data editing operations are prohibited. In this demo, row insertion, deletion, and editing is explicitly enabled using settings available through the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridView.SettingsDataSecurity">SettingDataSecurity</helplink> property.</p>
         ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="InlineEditing" Title="Inline Editing">
        <Description>
          <![CDATA[
                <p>In the inline editing mode, the Grid View control displays an In-Line Edit Row instead of the edited data row. The edit row displays edit cells that correspond to visible data columns. To use this mode, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewEditingSettings.Mode">SettingsEditing.Mode</helplink> property to <strong>Inline</strong>.</p>
                <p>By default, all data editing operations are prohibited. In this demo, row insertion, deletion, and editing is explicitly enabled using settings available through the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridView.SettingsDataSecurity">SettingDataSecurity</helplink> property.</p>
         ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="CascadingComboBoxes" Title="Cascading ComboBoxes">
        <Description>
          <![CDATA[
            <p>In this demo, the combo box in the City column (the City combo box) is populated dynamically with city names using callbacks, based on the value selected in the combo box in the Country column (the Country combo box). Only the content stored in the City combo box is updated during round-trips to the server - not the content of the page or the Grid View control.</p>
            <p>The client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientComboBox.SelectedIndexChanged">SelectedIndexChanged</helplink> event of the Country combo box is handled to update the City combo box. On the server side, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.Callback">Callback</helplink> event is handled to populate the City combo box with required values.</p>
                <p>By default, all data editing operations are prohibited. In this demo, row insertion, deletion, and editing is explicitly enabled using settings available through the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridView.SettingsDataSecurity">SettingDataSecurity</helplink> property.</p>
         ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DataValidation" Title="Data Validation">
        <Description>
          <![CDATA[
            <p>The Grid View Control allows you to manually validate the edited row and display errors for invalid fields. This demo demonstrates how you can provide data validation by handling the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.RowValidating">RowValidating</helplink> event.</p>
            <p>To indicate rows with invalid data, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.HtmlRowPrepared">HtmlRowPrepared</helplink> event is handled. This event is raised for each data row when the corresponding row within the table has been created. In this sample, rows with invalid data are colored in red (a <strong>text-danger</strong> CSS class is applied).</p>
            <p>In the <strong>Edit Form</strong>, an error icon indicates an invalid field. Hover over the icon with the mouse to display a hint along with a description of the error.</p>
            <p>By default, all data editing operations are prohibited. In this demo, row insertion, deletion, and editing is explicitly enabled using settings available through the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridView.SettingsDataSecurity">SettingDataSecurity</helplink> property.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="EditingWithFAB" Title="Editing with Floating Action Button">
        <Description>
          <![CDATA[
            <p>The DevExpress Bootstrap <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFloatingActionButton">Floating Action Button</helplink> is a button that appears in front of a container (HTML element or control) when users interact with the container's elements.</p>
			<p>The following types of floating action buttons are available:</p>
			<ul>
				<li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFABAction">Action</helplink> - Executes the action once users click the floating action button.</li>
				<li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFABActionGroup">Action Group</helplink> - The floating action button serves as a container for multiple actions (action items). When pressed, the floating action button expands nested actions.</li>
			</ul>
			<p>This demo adds an floating action button to a grid control. The type of the button depends on the context. For instance, when an end-user clicks a grid row, the button becames the action group with two popup actions - <strong>Edit</strong> and <strong>Delete</strong>. The JS code-behind file handles the button clicks and switches contexts.</p>
				]]>
        </Description>
      </DemoSection>
      <DemoSection Key="EditFormLayout" Title="Edit Form Layout">
        <Description>
          <![CDATA[
            <p>You can use the built-in form layout to arrange editors on the edit form in the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridView">Grid View</helplink> control. The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewFormLayoutProperties">BootstrapGridViewFormLayoutProperties</helplink> class allows you to customize the embedded form layout's settings at a grid level. The grid stores form layout items in the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewFormLayoutProperties.Items">Items</helplink> collection. Each item is associated with the corresponding grid data column specified in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ColumnLayoutItem.ColumnName">ColumnName</helplink> property. </p>
            <p>Use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridView.EditFormLayoutCreated">EditFormLayoutCreated</helplink> event to customize the edit form items' visibility, caption, and layout settings. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewEditFormLayoutEventArgs.FindLayoutItemOrGroup(System.String)">FindLayoutItemOrGroup</helplink> method allows you to access the layout item or group and customize it on the server. To do this on the client, use the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.GetEditFormLayoutItemOrGroup(name)">GetEditFormLayoutItemOrGroup</helplink> method.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="SortingAndGrouping" Title="Sorting and Grouping" SeoTitle="Bootstrap GridView Sorting and Grouping Demo">
      <DemoSection Key="Sorting" Title="Sorting">
        <Description>
          <![CDATA[
            <p>An end-user can sort the grid by clicking the header of a column by which the grid should be sorted. An arrow glyph indicates the sort order within the sorted column. The grid can be sorted against multiple columns by clicking the required column headers while holding down the <kbd>shift</kbd> key.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBehaviorSettings.AllowSort">SettingsBehavior.AllowSort</helplink> property defines whether the grid can be sorted. The default value is <strong>true</strong>.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataColumn.SortIndex">DataColumn.SortIndex</helplink> - Specifies a column's position among sorted columns. The SortIndex equals 1 when the column is not sorted.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataColumn.SortOrder">DataColumn.SortOrder</helplink> - Specifies a column's sort order.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridview.sortby.overloads">GridView.SortBy</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.SortBy(column)">ClientGridView.SortBy</helplink> - Sort data by the specified column using the specified sort order.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.ClearSort">GridView.ClearSort</helplink> - Clears sorting applied to the grid.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="Grouping" Title="Grouping">
        <Description>
          <![CDATA[
            <p>The grouping feature allows an end-user to group data within the grid by dragging column headers to the group panel. Data grouping is allowed if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewSettings.ShowGroupPanel">Settings.ShowGroupPanel</helplink> property is set to <strong>true</strong>.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewSettings.ShowGroupPanel">Settings.ShowGroupPanel</helplink> option controls the group panel's visibility.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataColumn.GroupIndex">DataColumn.GroupIndex</helplink> - Specifies the index of a column among grouped columns. If this property is set to -1, the grid data is not grouped by this column.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewBehaviorSettings.AutoExpandAllGroups">SettingsBehavior.AutoExpandAllGroups</helplink> - Specifies whether all group rows within the grid are expanded by default.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="MergedGroups" Title="Merged Groups">
        <Description>
          <![CDATA[
            <p>This demo illustrates how to merge grouped columns in the Grid View. In this mode, a user can group the grid data by multiple columns at once.</p>
            <p>Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewBehaviorSettings.MergeGroupsMode">SettingsBehavior.MergeGroupsMode</helplink> property to <strong>Always</strong> to enable merged grouping.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="IntervalGrouping" Title="Interval Grouping">
        <Description>
          <![CDATA[
            <p>This demo illustrates the Grid View control's interval grouping feature. This feature allows you to group the values within text columns against individual characters, or group date-time columns by month, year, or date. 
            You can enable interval grouping for a column using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataColumnSettings.GroupInterval">GridViewDataColumnSettings.GroupInterval</helplink> property. Refer to the <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraGrid.ColumnGroupInterval">ColumnGroupInterval</helplink> document to learn about the supported interval types.</p>
            <p>In this demo, the Grid View's <strong>Order Date</strong> column is grouped by month (the <strong>GroupInterval</strong> property is set to <strong>DateMonth</strong>).</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="UsingGroupingAPI" Title="Using Grouping API">
        <Description>
          <![CDATA[
            <p>The Bootstrap Grid View control provides a comprehensive API for sorting and grouping data on both the server and client side. This demo illustrates a programmatic approach to grouping Grid View data on the server.</p>
            <%--BeginCollapse--%>
            <p>To group data by a specific grid column's values, pass this column to the Bootstrap Grid View's <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridview.groupby.overloads">GroupBy</helplink> method. You can call this method for several columns to perform multi-level grouping.</p>
            <ul>  
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.GroupBy(column)">ClientGridView.GroupBy</helplink> / <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridview.groupby.overloads">GridView.GroupBy</helplink> - Group data by the specified column.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.ExpandAll">ClientGridView.ExpandAll</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.CollapseAll">ClientGridView.CollapseAll</helplink> - Expand/collapse all group rows.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.ExpandRow(visibleIndex)">ClientGridView.ExpandRow</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.CollapseRow(visibleIndex)">ClientGridView.CollapseRow</helplink> - Expand/collapse the specified group row.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.RowExpanding">ClientGridView.RowExpanding</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.RowCollapsing">RowCollapsing</helplink> - Raised before a group row expands/collapses. These events allow you to cancel the corresponding actions.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.ClearSort">GridView.ClearSort</helplink> - Clears all sorting and grouping settings applied to the Grid View.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.BeginUpdate">GridView.BeginUpdate</helplink> - Prevents the control from being rendered until the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.EndUpdate">EndUpdate</helplink> method is called, which allows you to perform a sequence of operations without the Grid View re-rendering itself after each API call.</li>
            </ul> 
            <%--EndCollapse--%>
         ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Filtering" Title="Filtering" SeoTitle="Bootstrap GridView Data Filtering Demo">
      <DemoSection Key="SearchPanel" Title="Search Panel">
        <Description>
          <![CDATA[
            <p>The Grid View control allows you to filter data and highlight search results via an integrated easy-to-use Search Panel. To enable the Search Panel, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.Visible">SettingsSearchPanel.Visible</helplink> property to <strong>true</strong>.</p>
            <p>To use an external editor instead of the built-in search panel, assign the editor's identifier to the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.CustomEditorID">SettingsSearchPanel.CustomEditorID</helplink> property.</p>
            <ul>
            	<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.SearchPanelFilter">GridView.SearchPanelFilter</helplink> - Specifies the search text programmatically.</li>
            	<li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.ApplySearchPanelFilter(value)">ClientGridView.ApplySearchPanelFilter</helplink> - Sets the search text on the client-side.</li>
            	<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewSearchPanelSettings.ColumnNames">SettingsSearchPanel.ColumnNames</helplink> - Specifies particular columns to which the search panel filter should be applied. All columns are used for searching by default. The columns can be identified by a field name, column name or caption.</li>
            	<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridDataColumnSettings.AllowFilterBySearchPanel">DataColumn.Settings.AllowFilterBySearchPanel</helplink> - Prevents a particular column from being filtered using the search panel.</li>
            	<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.SearchPanelEditorCreate">GridView.SearchPanelEditorCreate</helplink> - Fires when a search panel editor is being created. Handling this event allows you to adjust the editor's properties or provide a custom editor by specifying the e.EditorProperties event parameter.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="HeaderFilter" Title="Header Filter">
        <Description>
          <![CDATA[
            <p>The Grid View control provides a powerful data filtering mechanism that displays a dropdown list of all unique values within a column. Clicking the column header's filter button invokes this dropdown list. Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.ShowHeaderFilterButton">Settings.ShowHeaderFilterButton</helplink> to <b>true</b> to show header filter buttons.</p>
            <p>Additionally, an end-user can filter items displayed by the header filter dropdown by entering text in the filter editor above the list. This editor is shown by default. To hide it, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.ShowHeaderFilterListBoxSearchUI">Settings.ShowHeaderFilterListBoxSearchUI</helplink> property to <strong>false</strong>.</p>
            <p>You can set header filter settings for each data column using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewDataColumn.SettingsHeaderFilter">Column.SettingsHeaderFilter</helplink> property.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridDataColumnHeaderFilterSettings.Mode">DataColumn.SettingsHeaderFilter.Mode</helplink> - Specifies the type of header filter for a column: List, <a href="#HeaderFilterWithCheckedListMode">CheckedList</a>, DateRangeCalendar, DateRangePicker, and NumericRangePicker.</li>
            	<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataColumn.FilterExpression">DataColumn.FilterExpression</helplink> - Gets the column's filter expression.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridHeaderFilterListBoxSearchUISettings.Visibility">DataColumn.SettingsHeaderFilter.ListBoxSearchUISettings.Visibility</helplink> - Specifies the visibility of the search UI within the column's header filter dropdown.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="HeaderFilterWithCheckedListMode" Title="Header Filter - Checked List mode">
        <Description>
          <![CDATA[
            <p>The header filter can operate in <strong>CheckedList</strong> mode, in which it displays a check box list allowing an end-user to specify multiple filtering criteria. You can enable the <strong>CheckedList</strong> mode for a column's header filter by setting the column's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridDataColumnHeaderFilterSettings.Mode">SettingsHeaderFilter.Mode</helplink> property to <strong>GridHeaderFilterMode.CheckedList</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AdvancedFiltering" Title="Header Filter - Custom Values">
        <Description>
          <![CDATA[
            <p>The Grid View control allows you to create custom filter values, define filter criteria and display these values within the column's filter dropdown. Handle the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridView.BeforeHeaderFilterFillItems">BeforeHeaderFilterFillItems</helplink> event to provide custom filter items instead of default ones or the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridView.HeaderFilterFillItems">HeaderFilterFillItems</helplink> event - based on a list of predefined filter values, which contains a data column's unique values. These values are shown in the header filter popup by default. You can modify this list and fill it with custom items. Each filter value should have a title and filter expression.</p>
            <p>In this demo, custom filter values are displayed within the 'Total' and 'Quantity' columns' filter dropdowns.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridHeaderFilterEventArgs.Values">e.Values</helplink> - A list of column header filter items.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridheaderfiltereventargs.addvalue.overloads">e.AddValue</helplink> - Adds a new item to the list of header filter items. The <helplink href="https://docs.devexpress.com/CoreLibraries/4928/devexpress-data-library/criteria-language-syntax">Criteria Language Syntax</helplink> help topic describes the filter expression syntax.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridHeaderFilterEventArgs.AddShowAll">e.AddShowAll</helplink> - Adds the 'All' item to the header filter.
            </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DataFilterRow" Title="Data Filter Row">
        <Description>
          <![CDATA[
            <p>The filter row allows end-users to filter data by entering text within its cells. For total control over the values returned by the filter row, an optional filter row menu displays a list of filter conditions for a given search operation.</p>
            <p>Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewSettings.ShowFilterRow">Settings.ShowFilterRow</helplink> property to <strong>true</strong> to display the filter row within the Grid View.</p>
            <p>You can hide a filter editor for a certain column using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataColumnSettings.AllowAutoFilter">DataColumn.Settings.AllowAutoFilter</helplink> property.</p>
            <ul>
            	<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataColumnSettings.AllowAutoFilter">DataColumn.Settings.AllowAutoFilter</helplink> - Allows you to show/hide a column's filter row editor.</li>
            	<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataColumnSettings.AutoFilterCondition">DataColumn.AutoFilterCondition</helplink> - Specifies the type of comparison operator a filter row editor uses: BeginsWith, Contains, Equals, etc.</li>
            	<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataColumn.AutoFilterBy(System.String)">DataColumn.AutoFilterBy</helplink> - Allows you to apply a filter string to a column programmatically.</li>
            	<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataColumnSettings.ShowFilterRowMenu">DataColumn.ShowFilterRowMenu</helplink> - Specifies whether the filter button is displayed within a column's filter row cell. This button invokes a context menu allowing end-users to select the comparison operator.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Selection" Title="Selection and Focus" SeoTitle="Bootstrap GridView Selection and Focus Demo">
      <DemoSection Key="FocusedRow" Title="Focused Row">
        <Description>
          <![CDATA[
              <p>When the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewBehaviorSettings.AllowFocusedRow">SettingsBehavior.AllowFocusedRow</helplink> is set to <strong>true</strong>, one of the rows in the Grid View control is focused. You can use this feature in multiple ways, for example, to display additional information for the focused row.</p>
              <p>An end-user can move focus to another row by clicking it. Handle the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.FocusedRowChanged">FocusedRowChanged</helplink> event to respond to changing row focus.</p>
              <p>You can programmatically change row focus using the following API:</p>              
              <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.GetFocusedRowIndex">GetFocusedRowIndex</helplink> - Gets the index of the currently focused row on the client.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.SetFocusedRowIndex(visibleIndex)">SetFocusedRowIndex</helplink> - Sets the focused row by its index on the client.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.FocusedRowIndex">FocusedRowIndex</helplink> - Gets or sets the focused row index on the server-side.</li>
              </ul>              
              <p>Set the focused row index to -1 on the client or server-side to reset a focused row.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Selection" Title="Selection">
        <Description>
          <![CDATA[
            <p>The Grid View control allows end-users to select rows using check boxes or a row click if this functionality is enabled.</p> 
            <p>To show selection checkboxes, add a command column to the grid and set its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewCommandColumn.ShowSelectCheckbox">ShowSelectCheckBox</helplink> property to <strong>true</strong>.</p>
            <p>The command column's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewCommandColumn.SelectAllCheckboxMode">SelectAllCheckboxMode</helplink> property allows you to specify the Select All check box behavior. This check box can either select all rows in the grid or only on the current page. The Select All check box is not displayed if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewCommandColumn.SelectAllCheckboxMode">SelectAllCheckboxMode</helplink> property is set to <strong>None</strong>.</p>
            <p>Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewBehaviorSettings.AllowSelectByRowClick">SettingsBehavior.AllowSelectByRowClick</helplink> property to <strong>true</strong> to enable row selection via mouse click. Once set, clicking any row clears the previous selection and selects this row.</p>
            <%--BeginCollapse--%>
            <p>To select multiple rows, click the desired rows while holding down the <kbd>Ctrl</kbd> key. Clicking a row in this manner toggles its selected state and preserves the selection. To select contiguous rows, click the first row you wish to select, hold down the <kbd>Shift</kbd> key, and click the last row. You can continue to customize the selection by clicking individual rows while holding down the <kbd>Ctrl</kbd> key.</p>
            <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="SingleRowOnlyMode" Title="Single Row Selection">
        <Description>
          <![CDATA[
            <p>In the Single Row Only selection mode, the Grid View only allows one row to be selected at a time. To activate this mode, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewBehaviorSettings.AllowSelectSingleRowOnly">SettingsBehavior.AllowSelectSingleRowOnly</helplink> property to <strong>true</strong>.</p>
            <p>Select checkboxes in this mode will be rendered as radio buttons. The <kbd>Shift</kbd> and <kbd>Ctrl</kbd> keys do not have an effect.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="SelectionAPI" Title="Selection API">
        <Description>
          <![CDATA[
            <p>The Grid View control provides a client-side API allowing you to programmatically manipulate row selection and obtain information about the currently selected rows.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.Selection">GridView.Selection</helplink> object represents an API to manipulate selection on the server-side.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.SelectionChanged">GridView.SelectionChanged</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.SelectionChanged">ClientGridView.SelectionChanged</helplink> - Fire when selection has been changed.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.SelectRows">ClientGridView.SelectRows</helplink> - Allows you to select or deselect the specified rows, or select all rows within the grid.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.SelectRowsByKey(keys)">ClientGridView.SelectRowsByKey</helplink> - Allows you to select or deselect rows by their keys.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.UnselectAllRowsOnPage">ClientGridView.SelectAllRowsOnPage</helplink> - Allows you to select or deselect all rows displayed on the current page.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.UnselectRows">ClientGridView.UnselectRows</helplink> - Deselects all rows or the specified rows within the grid.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Summary" Title="Summary" SeoTitle="Bootstrap GridView Total and Group Summary Demo">
      <DemoSection Key="TotalSummary" Title="Total Summary">
        <Description>
          <![CDATA[
            <p>The Grid View control supports both total and group summaries.</p>
            <p>A total summary represents the value of an aggregate function calculated over all rows within the grid and is displayed within the grid footer, provided that the <strong>Settings.ShowFooter</strong> option is enabled. The Grid View stores its total summary items in the <strong>TotalSummary</strong> collection.</p>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="GroupSummary" Title="Group Summary">
        <Description>
          <![CDATA[
            <p>The Grid View control supports both total and group summaries.</p>
            <p>A group summary represents the summary value calculated within a single group and is displayed in the group row or group footer. Group summaries are stored in the <strong>GroupSummary</strong> collection.</p>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="CustomSummary" Title="Custom Summary">
        <Description>
          <![CDATA[
            <p>The Grid View control allows you to calculate total and group summaries based on a custom logic. Use the following steps to create a custom summary:</p>
            <ol>
              <li>Add a new summary item whose <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSummaryItemBase.SummaryType">SummaryType</helplink> is set to <strong>Custom</strong>.</li>
              <li>Subscribe to the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.CustomSummaryCalculate">CustomSummaryCalculate</helplink> event. This even fires once for every custom summary item.</li>
              <li>In the event handler, implement a custom summary calculation logic based on your needs. Assign the summary calculation result to the <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.Data.CustomSummaryEventArgs.TotalValue">TotalValue</helplink> event argument.</li>
            </ol>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="BatchEditClientSummary" Title="Client Summary Calculation">
        <Description>
			<![CDATA[
        <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridBatchEditSettings.EnableRealTimeSummaryRecalculation">EnableRealTimeSummaryRecalculation</helplink> property specifies whether the Grid View control recalculates total and group summaries on the client-side in batch edit mode. To disable client-side recalculation, set this property to false.</p>
			  <p>The Grid View does not highlight its summaries when their values are recalculated. To highlight recalculated summary values, use the following API:</p>
				<ul>
          <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewBatchEditSettings.HighlightSummaryItems">HighlightSummaryItems</helplink> property - Set this property to true to apply predefined styles to recalculated summary values.</li>
					<li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridBase.BatchEditSummaryDisplayText">BatchEditSummaryDisplayText</helplink> client event - Handle this event to use custom styles and text.</li>
				</ul>
				<p>In this demo module, the control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewBatchEditSettings.HighlightSummaryItems">HighlightSummaryItems</helplink> property value is set to true and the Grid View colors summary items when their values are changed.</p>
			]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="MasterDetail" Title="Master-Detail View" SeoTitle="Bootstrap GridView Master-Detail Demo">
      <DemoSection Key="MasterDetailView" Title="Master-Detail View">
        <Description>
          <![CDATA[
            <p>The Grid View control allows you to build master-detail layouts of any complexity and nesting depth by providing a detail row template, which defines the way detail data is presented.</p>
            <p>This demo demonstrates how you can use nested grid controls to visualize a simple master-detail relationship between two data tables. To achieve this goal, use the following steps.</p>
            <ol>
                <li>
                    Create two Grid View controls. 
                </li>
                <li>
                    Bind the first grid (the master grid) to a master data source and enable its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewDetailSettings.ShowDetailRow">SettingsDetail.ShowDetailRow</helplink> option. 
                </li>
                <li>
                    Bind the second grid (the detail grid) to a detail data source that uses a <strong>SessionParameter</strong> as a filtering criterion. 
                </li>
                <li>
                    Create a <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewTemplates.DetailRow">DetailRow</helplink> template for the master grid and place the detail grid onto it. 
                </li>
                <li>
                    Finally, handle the detail grid's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.BeforePerformDataSelect">BeforePerformDataSelect</helplink> event and specify the session value used as a filtering criterion. 
                </li>
            </ol>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="ColumnTypes" Title="Column Types" SeoTitle="Bootstrap GridView Column Types Demo">
      <DemoSection Key="DataColumn" Title="Data Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewDataColumn">BootstrapGridViewDataColumn</helplink> is a type of a grid column that automatically determines the actual column type (and, consequently, the control used for both displaying and editing cell data) based on the type of a data field to which a column is bound:</p>
            <ul>
                <li>A Date Edit column is created for the DateTime data type</li>
                <li>A Check Box column is created for the Bool data type</li>
                <li>A Text column is created for any other data type</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="BinaryImageColumn" Title="Binary Image Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewBinaryImageColumn">BootstrapGridViewBinaryImageColumn</helplink> column used to display images for columns that contain binary data. You can access the Binary Image settings using a column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewBinaryImageColumn.PropertiesBinaryImage">PropertiesBinaryImage</helplink> property.</p>
            <p>Editing settings of the Binary Image control are available via the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapBinaryImageEditProperties.EditingSettings">PropertiesBinaryImage.EditingSettings</helplink> property.</p>
            <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BinaryImageEditProperties.ImageWidth">PropertiesBinaryImage.ImageWidth</helplink> - specifies the width of the image displayed within a column</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BinaryImageEditProperties.ImageHeight">PropertiesBinaryImage.ImageHeight</helplink> - specifies the height of the image displayed within a column</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="ButtonEditColumn" Title="Button Edit Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewButtonEditColumn">BootstrapGridViewButtonEditColumn</helplink> column displays the Button Edit control as its cell editor. You can access the cell editor's settings using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewButtonEditColumn.PropertiesButtonEdit">PropertiesButtonEdit</helplink> property.</p>
            <ul>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapButtonEditProperties.Buttons">PropertiesButtonEdit.Buttons</helplink> - a collection property that allows you to specify buttons that should be displayed within the cell editor.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="CheckColumn" Title="Check Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewCheckColumn">BootstrapGridViewCheckColumn</helplink> is a column using a check box to display and edit data from Boolean data fields. You can access the cell editor's settings using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewCheckColumn.PropertiesCheckEdit">PropertiesCheckEdit</helplink> property.</p>
            <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CheckBoxProperties.UseDisplayImages">CheckBoxProperties.UseDisplayImages</helplink> - specifies whether the editor's check state is represented by icons or specific texts in browse mode</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CheckBoxProperties.DisplayTextChecked">CheckBoxProperties.DisplayTextChecked</helplink> / <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CheckBoxProperties.DisplayTextUnchecked">DisplayTextUnchecked</helplink> - specifies the text that represents the checked/unchecked state of a column editor in browse mode</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CheckBoxProperties.DisplayTextChecked">CheckBoxProperties.DisplayTextChecked</helplink> / <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewEditorCssClasses.IconCheckColumnChecked">GridView.CssClassesEditor.IconCheckColumnChecked</helplink> / <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewEditorCssClasses.IconCheckColumnUnchecked">IconCheckColumnUnchecked</helplink> - specifies the icons that represent the checked/unchecked state of a column editor in browse mode</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="ComboBoxColumn" Title="Combo Box Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewComboBoxColumn">BootstrapGridViewComboBoxColumn</helplink> is a column whose values are edited using the Combo Box editor. You can access the cell editor's settings using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewComboBoxColumn.PropertiesComboBox">PropertiesComboBox</helplink> property.</p>
            <ul>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapComboBoxProperties.Items">PropertiesComboBox.Items</helplink> - specifies collection of Combo Box items</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AutoCompleteBoxPropertiesBase.DataSourceID">PropertiesComboBox.DataSourceID</helplink> - allows to bind Combo Box item collection to a data source</li>
            </ul>
            <p>Also, see the <a href="Editing.aspx#CascadingComboBoxes">Editing-CascadingComboBoxes</a> demo, which demonstrates how to link two Combo Box columns and populate items of the first column based on the selected value from the second column.</p>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="DateEditColumn" Title="Date Edit Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewDateColumn">BootstrapGridViewDateColumn</helplink> is a column using the Date Edit control to display and edit data from a DateTime data field. You can access the cell editor's settings using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewDateColumn.PropertiesDateEdit">PropertiesDateEdit</helplink> property.</p>
            <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DateEditProperties.EditFormat">PropertiesDateEdit.EditFormat</helplink> - specifies possible formats of the date column: Time, DateTime, Date, Custom</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="DropDownEditColumn" Title="Drop-Down Edit Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewDropDownEditColumn">BootstrapGridViewDropDownEditColumn</helplink> column provides a cell editor containing a customizable drop-down window. You can access the cell editor's settings using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewDropDownEditColumn.PropertiesDropDownEdit">PropertiesDropDownEdit</helplink> property.</p>
            <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DropDownEditProperties.DropDownWindowTemplate">PropertiesDropDownEdit.DropDownWindowTemplate</helplink> - specifies a template used to display the editor's drop-down window content</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="HyperLinkColumn" Title="Hyperlink Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewHyperLinkColumn">BootstrapGridViewHyperLinkColumn</helplink> column represents a data column with hyperlink functionality. You can access settings of a displayed hyperlink using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewHyperLinkColumn.PropertiesHyperLinkEdit">PropertiesHyperLinkEdit</helplink> property.</p>
            <p>By default, if no display text is provided for a hyperlink through the corresponding settings (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.HyperLinkProperties.Text">HyperLinkProperties.Text</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.HyperLinkProperties.TextField">HyperLinkProperties.TextField</helplink>), the hyperlink displays the URL obtained from the column's data field. You can disable this behavior by setting the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewHyperLinkColumn.ShowUrlAsDisplayText">BootstrapGridViewHyperLinkColumn.ShowUrlAsDisplayText</helplink> property to <strong>false</strong>.</p>
            <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.HyperLinkProperties.NavigateUrlFormatString">HyperLinkProperties.NavigateUrlFormatString</helplink> - specifies the pattern used to format the hyperlink location url in display mode</li>
            </ul>
            ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="ImageColumn" Title="Image Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewImageColumn">BootstrapGridViewImageColumn</helplink> is a column used to display images from specified URLs. You can access the cell editor's settings using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewImageColumn.PropertiesImage">PropertiesImage</helplink> property.</p>
            <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageEditPropertiesBase.ImageUrlFormatString">PropertiesImage.ImageUrlFormatString</helplink> - specifies the pattern used to format the URL that points to the image displayed in the cell</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="MemoColumn" Title="Memo Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewMemoColumn">BootstrapGridViewMemoColumn</helplink> is a data column used to display and edit multiline text data. You can access the cell editor's settings using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewMemoColumn.PropertiesMemoEdit">PropertiesMemoEdit</helplink> property.</p>
            <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MemoProperties.Columns">PropertiesMemoEdit.Columns</helplink> - gets or sets the textarea's width in characters</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MemoProperties.Rows">PropertiesMemoEdit.Rows</helplink> - gets or sets the textarea's height in characters</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="ProgressBarColumn" Title="Progress Bar Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewProgressBarColumn">BootstrapGridViewProgressBarColumn</helplink> column presents numeric data as a progress bar. You can access settings of a displayed progress bar using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewProgressBarColumn.PropertiesProgressBar">PropertiesProgressBar</helplink> property.</p>
            <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ProgressBarProperties.Minimum">PropertiesProgressBar.Minimum</helplink> - specifies the minimum range value of a progress bar column (when the progress bar is empty)</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ProgressBarProperties.Maximum">PropertiesProgressBar.Maximum</helplink> - specifies the maximum range value of a progress bar column (when the progress bar is completely filled)</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="SpinEditColumn" Title="Spin Edit Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewSpinEditColumn">BootstrapGridViewSpinEditColumn</helplink> is a column used to display and edit numeric data. The column data is edited using the Spin Edit control. You can access the Spin Edit settings using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewSpinEditColumn.PropertiesSpinEdit">PropertiesSpinEdit</helplink> property. </p>
            <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SpinEditProperties.Increment">PropertiesSpinEdit.Increment</helplink> - specifies the value by which the spin editor's value is changed when clicking a small increment/decrement spin button</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SpinEditProperties.NumberFormat">PropertiesSpinEdit.NumberFormat</helplink> - specifies possible display formats for a spin editor's value: Number, Currency, Percent, Custom</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SpinEditProperties.MinValue">PropertiesSpinEdit.MinValue</helplink> / <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SpinEditProperties.MaxValue">MaxValue</helplink> - specify the minimum and maximum values of the column editor</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="TagBoxColumn" Title="Tag Box Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewTagBoxColumn">BootstrapGridViewTagBoxColumn</helplink> is a column used to display and edit values with the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTagBox">Tag Box</helplink> editor. You can access the cell editor's settings using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewTagBoxColumn.PropertiesTagBox">PropertiesTagBox</helplink> property.</p>
            <ul>
               <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTagBoxProperties.Tags">PropertiesTagBox.Tags</helplink> - provides access a collection of editor tags</li>
               <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AutoCompleteBoxPropertiesBase.DataSourceID">PropertiesTagBox.DataSourceID</helplink> - allows to bind the tags collection to a data source</li>
               <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTagBoxProperties.AllowCustomTags">PropertiesTagBox.AllowCustomTags</helplink> - specifies whether end-users can input tokens that are not contained in the Tags collection</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="TextColumn" Title="Text Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewTextColumn">BootstrapGridViewTextColumn</helplink> is a data column used to display and edit text. You can access the cell editor's settings using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewTextColumn.PropertiesTextEdit">PropertiesTextEdit</helplink> property.</p>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="TimeEditColumn" Title="Time Edit Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewTimeEditColumn">BootstrapGridViewTimeEditColumn</helplink> is a column using the Time Edit control to display and edit data from a DateTime data field. You can access the cell editor's settings using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewTimeEditColumn.PropertiesTimeEdit">PropertiesTimeEdit</helplink> property.</p>
            <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TimeEditProperties.EditFormat">PropertiesTimeEdit.EditFormat</helplink> - specifies possible formats of the date column: Time, DateTime, Date, Custom</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="CommandColumn" Title="Command Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewCommandColumn">BootstrapGridViewCommandColumn</helplink> is a special column type intended for displaying commands that allow end-users to switch the Grid View to the edit mode, update data, delete rows, etc. A command column allows multiple items to be displayed within a cell. In this demo, the Edit button, the Delete button and the row selection check box are enabled by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewCommandColumn.ShowEditButton">ShowEditButton</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewCommandColumn.ShowDeleteButton">ShowDeleteButton</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewCommandColumn.ShowSelectCheckbox">ShowSelectCheckbox</helplink> properties to <strong>true</strong>.</p>
            <p>In addition to standard command items, a Command Column can display custom command buttons. The collection of custom command buttons to display is available through the column's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewCommandColumn.CustomButtons">CustomButtons</helplink> property. Each button within the collection is represented by a <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewCommandColumnCustomButton">BootstrapGridViewCommandColumnCustomButton</helplink> object. You can process a click on a custom button in the client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.CustomButtonClick">CustomButtonClick</helplink> event.</p>
            <%--BeginCollapse--%>
            <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridViewCustomButtonEventArgs.buttonID">args.buttonID</helplink> - Identifies the clicked custom button.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientProcessingModeEventArgs.processOnServer">args.processOnServer</helplink> - Specifies whether the event should be finally processed on the server side.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientProcessingModeEventArgs.processOnServer">args.visibleIndex</helplink> - Identifies the row whose custom button has been clicked.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridCustomCommandButton.ID">CustomButton.ID</helplink> - Specifies a string indentifier of the custom button.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.CustomButtonCallback">GridView.CustomButtonCallback</helplink> - Occurs on the server side when a custom command button has been clicked provided that args.processOnServer is set to <strong>true</strong> (the default value).</li>
            </ul>
            <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="ColumnCustomization" Title="Column Customization" SeoTitle="Bootstrap GridView Column Customization Demo">
      <DemoSection Key="ColumnMoving" Title="Column Moving">
        <Description>
          <![CDATA[
            <p>The Bootstrap Grid View allows you to move grid columns using drag-and-drop. To move a column, drag the column's header to the desired position. 
               The location in which the dragged column will be inserted after you release the left mouse button is visually indicated by two arrows. 
               The initial column order is specified using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.WebColumnBase.VisibleIndex">column.VisibleIndex</helplink> property.</p>
            <p>By default, when you move a grid column, the grid initiates a callback to re-render the grid layout accordingly. 
               Setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewBehaviorSettings.ProcessColumnMoveOnClient">SettingsBehavior.ProcessColumnMoveOnClient</helplink> to true allows the grid to re-render itself completely on the client, without sending a callback to the server.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ColumnResizing" Title="Column Resizing">
        <Description>
          <![CDATA[
            <p>The Bootstrap Grid View provides complete control over column availability and individual column size. End-users can easily modify column width by resizing the appropriate column header. 
               To resize the column, hover the right border of the column you wish to resize (so that it displays a double-sided arrow), and drag the column border.</p>
            <p>You can access all settings related to column resizing using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.SettingsResizing">SettingsResizing</helplink> property. 
               The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewResizingSettings.ColumnResizeMode">SettingsResizing.ColumnResizeMode</helplink> property specifies how the Grid View behaves when an end-user resizes a column.</p>
            
            <%--BeginCollapse--%>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewResizingSettings.Visualization">SettingsResizing.Visualization</helplink> property defines how the column resizing process is visually indicated. Two modes are available.</p>
            <ul>
              <li>In the <strong>Live</strong> mode, grid columns are redrawn dynamically during resizing.</li>
              <li>In the <strong>Postponed</strong> mode, grid columns are redrawn only after the operation has been completed.</li>
            </ul>
            <p>The minimal column width can be set using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewSettings.ColumnMinWidth">Settings.ColumnMinWidth</helplink> or <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewColumn.MinWidth">column.MinWidth</helplink> property.</p>
            <p>The Grid View can automatically truncate cell values if they don't fit into cell width. To indicate that the text is clipped, the grid displays an ellipsis ('...'). 
               By default, this functionality is disabled, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBehaviorSettings.AllowEllipsisInText">SettingsBehavior.AllowEllipsisInText</helplink> property to true to enable it. Resize grid columns to see this feature in action. 
               Point the mouse cursor over an ellipsis to display a tooltip with the full text.</p>  
            <%--EndCollapse--%>      
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="HeaderBands" Title="Header Bands">
        <Description>
          <![CDATA[
            <p>The Bootstrap Grid View ships with a multi-row header feature to help you organize grid columns into logical groups (bands).</p>
            <p>A band is visually represented by a header displayed above the headers of the columns it combines. Each band is of a specific column type - <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewBandColumn">BootstrapGridViewBandColumn</helplink>. Unlike data columns, a band column is not designed to display data values directly, but to contain data (child) columns within its Columns collection. This allows you to create a hierarchy of nested bands and place a data column and a band column at the same hierarchy level.</p>
            <p>Bands provide both display and usability benefits. They can be dragged by end-users to reorder columns. This is extremely useful if you need to provide a quick way to rearrange columns while preserving their logical grouping. Note that columns (and bands) are only allowed to move within their parent bands - you cannot move a child column from one parent band to another. This prevents end-users from breaking column grouping logic.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DataCellBands" Title="Data Cell Bands">
        <Description>
          <![CDATA[
            <p>The Bootstrap Grid View provides you with a capability to organize grid columns into logical groups (bands). It allows columns to be arranged in multiple rows, and column headers and cells to occupy more than one row. A collection of a column's child columns can be accessed using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewDataColumn.Columns">BootstrapGridViewDataColumn.Columns</helplink> property.</p>
            <p>Bands provide both display and usability benefits. Header bands can be dragged by end-users to reorder columns. This is extremely useful if you need to provide a quick way to rearrange columns while preserving their logical grouping. Note that by default, columns (and bands) are only allowed to move within their parent bands, and when a parent band is moved, it is moved along with all its children. This prevents end-users from changing the hierarchy of columns within the grids. To allow end-users to modify the column hierarchy using drag-and-drop, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewBehaviorSettings.ColumnMoveMode">SettingsBehavior.ColumnMoveMode</helplink> to <strong>ThroughHierarchy</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="RowCustomization" Title="Row Customization" SeoTitle="Bootstrap GridView Row Customization Demo">
      <DemoSection Key="PreviewRow" Title="Preview Row">
        <Description>
          <![CDATA[
            <p>Preview rows are non-editable regions that allow large memo fields or custom data to be displayed across all columns in the Grid View. To enable the preview row, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewSettings.ShowPreview">Settings.ShowPreview</helplink> property to <strong>true</strong>. Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.PreviewFieldName">PreviewFieldName</helplink> property to bind the preview row to data.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.GetPreviewText(System.Int32)">GetPreviewText</helplink> - Gets the text displayed within the specified preview row.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewTemplates.PreviewRow">Templates.PreviewRow</helplink> - Provides access to a template used for rendering preview rows.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Striped" Title="Striped">
        <Description>
          <![CDATA[
            <p>To enhance readability, you can highlight alternating (odd) grid rows with a different style. To do so, set the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewBootstrapSpecificSettings.Striped">SettingsBootstrap.Striped</helplink> property to <strong>true</strong>. The style used to highlight rows depends on the used bootstrap theme.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="RowHotTrack" Title="Row HotTrack">
        <Description>
          <![CDATA[
            <p>The hot track feature allows you to highlight a grid row under the cursor with a different style. Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewBehaviorSettings.EnableRowHotTrack">SettingsBehavior.EnableRowHotTrack</helplink> property to <strong>true</strong> to enable this feature. The style used to highlight a row depends on the used bootstrap theme.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="CellMerging" Title="Cell Merging">
        <Description>
          <![CDATA[
            <p>The Bootstrap Grid View can automatically merge adjacent cells with the same values. By default the cell merging is disabled. 
               Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewBehaviorSettings.AllowCellMerge">SettingsBehavior.AllowCellMerge</helplink> property to <strong>true</strong> to allow the grid merging cells; 
               or control the cell merging availability for a particular column by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataColumnSettings.AllowCellMerge">GridViewDataColumnSettings.AllowCellMerge</helplink> property.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="ConditionalFormatting" Title="Conditional Formatting" SeoTitle="Bootstrap GridView Conditional Formatting Demo">
      <DemoSection Key="RowFormatting" Title="Row Formatting">
        <Description>
          <![CDATA[
            <p>The Grid View control supports conditional formatting, i.e., automatically applies cell formatting based on the specified rules. This feature helps end-users quickly notice critical information, identify trends and exceptions, and compare data.</p>
            <p>Formatting rules can be created at design time or programmatically. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.FormatConditions">FormatConditions</helplink> property provides access to a collection of rules, which are <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridFormatConditionBase">GridFormatConditionBase</helplink> class descendants.</p>
            <p>In this demo, the <helplink href="https://docs.devexpress.com/WPF/DevExpress.Xpf.Grid.FormatConditionBase.ApplyToRow">ApplytoRow</helplink> property is set to <strong>true</strong> to specify that formatting should be applied to the whole row.</p>
            <p>The style settings applied to grid cells can be exported together with data to various formats using our data aware export engine. 
            Moreover, when we export data to Excel formats (XLS and XLSX), the format conditions are transformed to corresponding Excel conditional formatting rules. 
            Therefore, you can manage the rules in Excel after export. You can take a look at a grid export capabilities in the <a href="Export.aspx#ExportWithFormatConditions">Export with Format Conditions</a> demo.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="CellFormatting" Title="Cell Formatting">
        <Description>
          <![CDATA[
            <p>This example demonstrates conditional formatting applied to separate cells (in cases when a format condition object's <helplink href="https://docs.devexpress.com/WPF/DevExpress.Xpf.Grid.FormatConditionBase.ApplyToRow">ApplytoRow</helplink> property is not set).</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="ScrollingAndPaging" Title="Scrolling and Paging" SeoTitle="Bootstrap GridView Scrolling and Paging Demo">
      <DemoSection Key="VerticalScrolling" Title="Vertical Scrolling">
        <Description>
          <![CDATA[
            <p>This demo illustrates the Grid View control's vertical scrolling capability.</p>
            <p>By default, the grid height is determined by the number of rows displayed within a page. To reduce the grid's height, display the vertical scrollbar using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.VerticalScrollBarMode">Settings.VerticalScrollBarMode</helplink> property, and specify the height of the scrollable area (in pixels) using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.VerticalScrollableHeight">Settings.VerticalScrollableHeight</helplink> property.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.VerticalScrollBarMode">Settings.VerticalScrollBarMode</helplink> property accepts the following values:</p>
            <ul>
              <li><strong>Auto</strong> - The scrollbar is automatically shown when the size of the control content exceeds the size of the control itself.</li>
              <li><strong>Hidden</strong> - The scrollbar is hidden.</li>
              <li><strong>Visible</strong> - The scrollbar is visible.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="HorizontalScrolling" Title="Horizontal Scrolling">
        <Description>
          <![CDATA[
            <p>This demo illustrates the Grid View control's horizontal scrolling capability.</p>
            <p>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.HorizontalScrollBarMode">Settings.HorizontalScrollBarMode</helplink> property to specify the horizontal scrollbar's display mode. This property accepts the following values:</p>
            <ul>
              <li><strong>Auto</strong> - The scrollbar is automatically shown when the size of the control content exceeds the size of the control itself.</li>
              <li><strong>Hidden</strong> - The scrollbar is hidden.</li>
              <li><strong>Visible</strong> - The scrollbar is visible.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="VirtualScrolling" Title="Virtual Paging">
        <Description>
          <![CDATA[
            <p>The Grid View control supports a virtual paging mode that allows end-users to navigate through grid pages using the vertical scroll bar. The vertical scroll bar can be used with or without the built-in pager to dynamically load requested page data using callbacks.</p>
            <p>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewSettings.VerticalScrollBarStyle">Settings.VerticalScrollBarStyle</helplink> property to activate virtual paging. This property allows the following values:</p>
            <ul>
              <li><strong>Standard</strong> - The vertical scrollbar operates in the standard way; it scrolls data rows displayed within the current page.</li>
              <li><strong>Virtual</strong> - Enables the virtual paging mode. End-users can navigate through data rows using the vertical scrollbar. When a scroll button is clicked, the Grid View switches to the next/previous page.</li>
              <li><strong>VirtualSmooth</strong> - Enables the virtual paging mode. End-users can navigate through data rows using the vertical scrollbar. When a scroll button is clicked, the Grid View smoothly scrolls data.</li>
            </ul>
            <p>In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewSettings.VerticalScrollBarStyle">Settings.VerticalScrollBarStyle</helplink> property is set to <strong>VirtualSmooth</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="FixedColumns" Title="Fixed Columns">
        <Description>
          <![CDATA[
            <p>The Grid View control allows you to anchor columns to the left edge. When fixed, columns are always displayed, and not scrolled horizontally with the grid. This feature is active when horizontal scrolling is enabled via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.HorizontalScrollBarMode">Settings.HorizontalScrollBarMode</helplink> property, and the total width of the columns exceeds the grid's width. To fix a column, set its <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewCommandColumn.Fixed">Fixed</helplink> property value to <strong>true</strong>. Non-fixed columns (whose <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewCommandColumn.Fixed">Fixed</helplink> property is set to <strong>false</strong>) cannot be positioned before fixed columns.</p>
            <p>Fixed columns support complex layout scenarios that utilize such features as grouping, detail rows, preview rows and row templates. This demo illustrates the use of fixed columns within a grouped grid.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="EndlessPaging" Title="Endless Paging">
        <Description>
          <![CDATA[
            <p>The Grid View control supports the endless paging mode. This mode allows grid rows to load on demand. To enable this functionality, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewPagerSettings.Mode">SettingsPager.Mode</helplink> property to <strong>EndlessPaging</strong>. In this mode, the grid loads more rows automatically when the end-user scrolls down to the bottom of the control.</p>
            <p>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.VerticalScrollableHeight">Settings.VerticalScrollableHeight</helplink> property to specify the scrollable area's height.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.VerticalScrollBarMode">Settings.VerticalScrollBarMode</helplink> property specifies the vertical scrollbar's display mode. This property accepts the following values:</p>
            <ul>
              <li><strong>Auto</strong> - The scrollbar is automatically shown when the size of the control content exceeds the size of the control itself.</li>
              <li><strong>Hidden</strong> - The scrollbar is hidden.</li>
              <li><strong>Visible</strong> - The scrollbar is visible.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Export" Title="Export" SeoTitle="Bootstrap GridView Export Demo">
      <DemoSection Key="ExportingTo" Title="Exporting to PDF, XLS, XLSX, DOCX, CSV and RTF">
        <Description>
          <![CDATA[
            <p>The Grid View control allows you to export data with ease. Data can be exported to a file or stream in the following formats:</p>
            <ul>
                <li><strong>PDF</strong> (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.ExportToPdf.overloads">ExportToPdf</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exportpdftoresponse.overloads">ExportPdfToResponse</helplink>)</li>
                <li><strong>XLS</strong> (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.ExportToXls(System.IO.Stream)">ExportToXls</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exportxlstoresponse.overloads">ExportXlsToResponse</helplink>)</li>
                <li><strong>XLSX</strong> (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.ExportToXlsx(System.IO.Stream)">ExportToXlsx</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exportxlsxtoresponse.overloads">ExportXlsxToResponse</helplink>)</li>
                <li><strong>DOCX</strong> (<helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exporttodocx.overloads">ExportToDocx</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exportdocxtoresponse.overloads">ExportDocxToResponse</helplink>)</li>
                <li><strong>RTF</strong> (<helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exporttortf.overloads">ExportToRtf</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exportrtftoresponse.overloads">ExportRtfToResponse</helplink>)</li>
                <li><strong>CSV</strong> (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.ExportToCsv(System.IO.Stream)">ExportToCsv</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exportcsvtoresponse.overloads">ExportCsvToResponse</helplink>)</li>
            </ul>
            <p>Note that in this demo, export to table formats (XLS, XLSX, and CSV) is performed in the WYSIWYG (What You See Is What You Get) mode. Therefore, the table formatting, e.g., grouping, is lost and grid summaries are converted to strings. However, you can maintain such information by exporting grid data in the <a href="#DataAwareExport">data-aware mode</a>.</p>
            <p>The buttons in this demo are not built-in to the GridView control and export operations are performed on the server-side button's "Click" handler. You can also use the built-in <a href="BarsAndDialogs.aspx#Toolbar">GridView Toolbar</a> which contains commands for the Export operations.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DataAwareExport" Title="Data Aware Export">
        <Description>
          <![CDATA[
            <p>The Grid View can export data to XLS and XLSX formats in the data-aware mode. In this mode, the DevExpress Export Engine maintains data grouping layout and automatically transforms summary items to corresponding Excel functions.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ExportSelectedRecords" Title="Export Selected Records">
        <Description>
          <![CDATA[
            <p>To export only the currently selected grid rows, set the Grid View's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewExportSettings.ExportSelectedRowsOnly">SettingsExport.ExportSelectedRowsOnly</helplink> property to <strong>true</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ExportWithFormatConditions" Title="Export with Format Conditions">
        <Description>
          <![CDATA[
            <p>When data is exported to a PDF or RTF file, the Grid View maintains the style settings applied to the cells (with the exception of images). Moreover, when we export data to Excel formats (XLS and XLSX), the format conditions are transformed to corresponding Excel conditional formatting rules. Therefore, you can manage the rules in Excel after export.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="BarsAndDialogs" Title="Bars and Dialogs" SeoTitle="Bootstrap GridView Toolbar Customization">
      <DemoSection Key="Toolbar" Title="Toolbar">
        <Description>
          <![CDATA[
                <p>The Grid View control can display toolbars aggregating commands related to the Grid View and its data.</p>
                <p>All grid toolbars are available through the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridView.Toolbars">Toolbars</helplink> collection property, in which each toolbar is a <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewToolbar">BootstrapGridViewToolbar</helplink> object. Each item on the toolbar is represented by a <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewToolbarItem">BootstrapGridViewToolbarItem</helplink> object available through the toolbar's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewToolbar.Items">BootstrapGridViewToolbar.Items</helplink> collection property.</p>
                <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewToolbarItemBase.Command">BootstrapGridViewToolbarItemBase.Command</helplink> property allows you to associate a toolbar item with one of the built-in commands or custom logic implemented in the Grid View's server-side or client-side <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridView.ToolbarItemClick">ToolbarItemClick</helplink> event handler.</p>
                <p>Refer to the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewToolbarCommand">BootstrapGridViewToolbarCommand</helplink> documentation topic to view the full list of available commands.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ToolbarCustomItems" Title="Custom Toolbar Items">
        <Description>
          <![CDATA[
                <p>You can provide custom logic for a toolbar item by setting the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewToolbarItemBase.Command">BootstrapGridViewToolbarItemBase.Command</helplink> property to Custom. Handle the client-side <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridView.ToolbarItemClick">ToolbatItemClick</helplink> event to process a toolbar item click.</p>
                <p>If you also want to perform server-side processing, set the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientProcessingModeEventArgs.processOnServer">processOnServer</helplink> client event argument to <strong>true</strong>, which forces a callback after the client-side processing is finished.</p>
                <p>You can specify that the server-side processing should be initiated by a postback rather than a callback by setting the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridToolbarItemClickEventArgs.usePostBack">usePostBack</helplink> client event argument to <strong>true</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AdaptiveToolbar" Title="Adaptive Toolbar">
        <Description>
          <![CDATA[
            <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewToolbar">BootstrapGridViewToolbar</helplink> object allows you to add adaptive toolbars to different Grid View parts (inside the grid's header/footer, outside the Panel element). </p>
            <p><b>Toolbar Position</b></p>
            <p>The following table lists the properties that control the toolbar's position:</p>
            <div style="max-width: 100%; overflow-x: auto; margin-bottom: 1rem;">
			        <table class="table table-bordered my-0">
			          <tr>
				          <th></th>
				          <th class="text-center"><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridToolbar.Position">Position</helplink> = Top</th> 
				          <th class="text-center"><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridToolbar.Position">Position</helplink> = Bottom</th>
			          </tr>
			          <tr>
				          <th class="text-nowrap"><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewToolbar.ShowInsidePanel">ShowInsidePanel</helplink> = true</th>
				          <td>The toolbar is displayed in the PanelHeader <br />(<code class="text-nowrap">&lt;div class="card-header"&gt;...&lt;/div&gt;</code>)</td> 
				          <td>The toolbar is displayed in the PanelFooter <br />(<code class="text-nowrap">&lt;div class="card-footer"&gt;...&lt;/div&gt;</code>)</td>
			          </tr>
			          <tr>
				          <th class="text-nowrap"><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewToolbar.ShowInsidePanel">ShowInsidePanel</helplink> = false</th>
				          <td>The toolbar is displayed above the Panel element <br />(<code class="text-nowrap">&lt;div class="card"&gt;...&lt;/div&gt;</code>)</td> 
				          <td>The toolbar is displayed below the Panel element <br />(<code class="text-nowrap">&lt;div class="card"&gt;...&lt;/div&gt;</code>)</td>
			          </tr>
			        </table>
            </div>
            <p>Note: If a Grid View has one or more toolbars in the the PanelHeader, the Grid View's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridTextSettings.Title">title</helplink> is displayed inside the first toolbar. Otherwise, the title is displayed above the Grid View.</p>
            <p><b>Toolbar Adaptivity</b></p>
            <p>The following properties control how the toolbar responds when the container's width changes:</p>
            <%--BeginCollapse--%>
            <ol>
				      <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuSettingsAdaptivity.EnableCollapseRootItemsToIcons">SettingsAdaptivity.EnableCollapseRootItemsToIcons</helplink> - If <b>true</b>, the text of all items that contain icons are hidden. Additionally, you can use the item's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewToolbarItem.AdaptivePriority">BootstrapGridViewToolbarItem.AdaptivePriority</helplink> property to hide a specific item first of others.</li>
				      <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuSettingsAdaptivity.EnableAutoHideRootItems">SettingsAdaptivity.EnableAutoHideRootItems</helplink> - If <b>true</b>, the toolbar combines root items one by one in the root submenu until the toolbar contains the minimum number of root items (specified in the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapToolbarSettingsAdaptivityBase.MinRootItemsCount">SettingsAdaptivity.MinRootItemsCount</helplink> property).</li>
            </ol>
            <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="CustomizationDialog" Title="Customization Dialog">
        <Description>
          <![CDATA[
            <p>The Grid View's customization dialog provides a UI aggregating all essential data shaping options in one place. The dialog is adaptive out of the box and is best suited for touch devices. The customization dialog includes the following tabs: Sorting, Grouping, Filtering and Column Chooser.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.SettingsCustomizationDialog">SettingsCustomizationDialog</helplink> property provides access to the customization dialog's settings. Note that the customization dialog is disabled by default. To enable it, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewCustomizationDialogSettings.Enabled">SettingsCustomizationDialog.Enabled</helplink> property to <strong>true</strong>. Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewCustomizationDialogSettings.ShowSortingPage">ShowSortingPage</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewCustomizationDialogSettings.ShowGroupingPage">ShowGroupingPage</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewCustomizationDialogSettings.ShowFilteringPage">ShowFilteringPage</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewCustomizationDialogSettings.ShowColumnChooserPage">ShowColumnChooserPage</helplink> properties to disable or enable specific tabs.</p>
            <p>You can display the customization dialog using one of the following approaches:</p>
            <ul>
              <li>Call the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.ShowCustomizationDialog">ShowCustomizationDialog</helplink> client method.</li>
              <li>Create a toolbar item with the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewToolbarItem.Command">Command</helplink> property set to <strong>ShowCustomizationDialog</strong>. An end-user can invoke the customization dialog by clicking this item.</li>
            </ul>           
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ContextMenu" Title="Context Menu">
        <Description>
          <![CDATA[
            <p>The Grid View context menu is a popup menu displayed when an end-user right-clicks a grid element. The control provides different context menu types for the following elements: row, column header, footer, group footer, and group panel.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.SettingsContextMenu">SettingsContextMenu</helplink> property provides access to the Grid View's context menu settings. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewContextMenuSettings.Enabled">SettingsContextMenu.Enabled</helplink> property specifies the availability of all context menu types.</p>
            <p>The following properties available through <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.SettingsContextMenu">SettingsContextMenu</helplink> control the menu availability of particular Grid View elements:</p>
            <%--BeginCollapse--%>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewContextMenuSettings.EnableRowMenu">EnableRowMenu</helplink> - Specifies whether the row context menu is enabled.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewContextMenuSettings.EnableColumnMenu">EnableColumnMenu</helplink> - Specifies whether the column header context menu is enabled.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewContextMenuSettings.EnableFooterMenu">EnableFooterMenu</helplink> - Specifies whether the footer context menu is enabled.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewContextMenuSettings.EnableGroupFooterMenu">EnableGroupFooterMenu</helplink> - Specifies whether the group footer context menu is enabled.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewContextMenuSettings.EnableGroupPanelMenu">EnableGroupPanelMenu</helplink> - Specifies whether the group panel context menu is enabled.</li>
            </ul>
            <p>Server-Side Events:</p>
			      <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridView.ContextMenuInitialize">ContextMenuInitialize</helplink> - Allows you to customize the context menu item collection.</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridView.AddSummaryItemViaContextMenu">AddSummaryItemViaContextMenu</helplink> - Fires when a summary item is added to the TotalSummary collection using the context menu.</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridView.ContextMenuItemClick">ContextMenuItemClick</helplink> - Fires when a context menu item has been clicked.</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridView.ContextMenuItemVisibility">ContextMenuItemVisibility</helplink> - Allows you to dynamically change the visibility of the context menu items.</li>
			      </ul>
            <p>Client-Side events:</p>
			      <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.ContextMenu">ContextMenu</helplink> - Fires after an end-user right clicks in the grid view. Handle this event to provide a custom context menu.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.ContextMenuItemClick">ContextMenuItemClick</helplink> - Fires on the client when a context menu item has been clicked.</li>
			      </ul>
            <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Adaptivity" Title="Adaptivity" SeoTitle="Bootstrap GridView Adaptivity Demo">
      <DemoSection Key="ResponsiveLayout" Title="Responsive Mode">
        <Description>
          <![CDATA[
                <p>The Grid View control provides support for the responsive layout mode, which forces the Grid View to hide columns that do not fit the current screen resolution. Every grid row displays an ellipsis button if at least one column is hidden. Clicking this button expands an adaptive detail row displaying the hidden data.</p>
                <p>Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewAdaptivitySettings.AdaptivityMode">SettingsAdaptivity.AdaptivityMode</helplink> to <strong>HideDataCells</strong> to enable the responsive mode.</p>
                <%--BeginCollapse--%>
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridView.SettingsAdaptivity">SettingsAdaptivity</helplink> - Provides access to settings defining how the grid reacts to changing the window resolution, allowing you to build responsive or adaptive grid layouts.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewAdaptivitySettings.AllowOnlyOneAdaptiveDetailExpanded">SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded</helplink> - Specifies whether only one adaptive detail row can be expanded at a time. When this property is set to true, expanding an adaptive detail row collapses the previously expanded one.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewColumn.AdaptivePriority">GridViewColumn.AdaptivePriority</helplink> - Defines the column hiding priority when the grid is sized down. The higher the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewColumn.AdaptivePriority">AdaptivePriority</helplink> property value is, the earlier the column is hidden.</li>
                </ul>
                <p>Scroll to the Grid View displayed below and toggle between screen orientations using the corresponding buttons on the right to see the responsive behavior in action.</p>
                <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AdaptiveLayout" Title="Adaptive Mode">
        <Description>
          <![CDATA[         
                <p>The adaptive layout mode allows the Grid View to automatically switch to a compact presentation when the screen resolution becomes less than or equal to the specified value. In this presentation, each data entry's fields are displayed within an adaptive detail row.</p>
                <p>Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewAdaptivitySettings.AdaptivityMode">SettingsAdaptivity.AdaptivityMode</helplink> to <strong>HideDataCellsWindowLimit</strong> to enable the adaptive mode:</p>
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridView.SettingsAdaptivity">SettingsAdaptivity</helplink> - Provides access to settings defining how the grid reacts to changing the window resolution, allowing you to build responsive or adaptive grid layouts.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewAdaptivitySettings.HideDataCellsAtWindowInnerWidth">SettingsAdaptivity.HideDataCellsAtWindowInnerWidth</helplink> - Specifies the maximum resolution at which the grid uses the compact presentation.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewAdaptivitySettings.AdaptiveDetailColumnCount">SettingsAdaptivity.AdaptiveDetailColumnCount</helplink> - Specifies the number of columns in an adaptive detail row.</li>
                </ul>
                <p>Scroll to the Grid View displayed below and toggle between screen orientations using the corresponding buttons on the right to see the adaptive behavior in action:</p>        
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AdaptiveLayoutWithFormLayout" Title="Adaptive Mode with Form Layout">
        <Description>
          <![CDATA[
            <p>The adaptive detail row shown in the <a href="#AdaptiveLayout">adaptive layout</a> mode inherits the Form Layout functionality to arrange its items. You can customize the adaptive detail row's layout using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewFormLayoutProperties.Items">SettingsAdaptivity.AdaptiveDetailLayoutProperties.Items</helplink> collection property. This collection allows items of the following types:</p>      
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapEditModeCommandLayoutItem">BootstrapEditModeCommandLayoutItem</helplink></li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewColumnLayoutItem">BootstrapGridViewColumnLayoutItem</helplink></li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapLayoutGroup">BootstrapLayoutGroup</helplink></li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTabbedLayoutGroup">BootstrapTabbedLayoutGroup</helplink></li>
            </ul>
            <p>If the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewFormLayoutProperties.Items">SettingsAdaptivity.AdaptiveDetailLayoutProperties.Items</helplink> collection is empty, the default layout is generated automatically. Note that if you manually populate this collection, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewAdaptivitySettings.AdaptiveDetailColumnCount">SettingsAdaptivity.AdaptiveDetailColumnCount</helplink> property's value is ignored.</p>
            <p>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ColumnLayoutItem.ColumnName">BootstrapGridViewColumnLayoutItem.ColumnName</helplink> property to associate a layout item with a data column.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AdaptiveLayoutWithAdaptiveFormLayout" Title="Adaptive Mode with Adaptive Form Layout">
        <Description>
          <![CDATA[
            <p>This demo illustrates how to take advantage of the Form Layout functionality to control which data items are displayed within the adaptive detail row and how they adapt to the different screen resolutions.</p>
            <p>A layout item provides settings allowing you to define how it is sized using the Bootstrap grid system functionality:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewColumnLayoutItem.ColSpanXl">ColSpanXl</helplink> - Specifies how many virtual columns the item should occupy on an extra large screen (1200px or wider).</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewColumnLayoutItem.ColSpanLg">ColSpanLg</helplink> - Specifies how many virtual columns the item should occupy on a large screen (992px or wider).</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewColumnLayoutItem.ColSpanMd">ColSpanMd</helplink> - Specifies how many virtual columns the item should occupy on a medium screen (768px or wider).</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewColumnLayoutItem.ColSpanSm">ColSpanSm</helplink> - Specifies how many virtual columns the item should occupy on a small screen (576px or wider).</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewColumnLayoutItem.ColSpanXs">ColSpanXs</helplink> - Specifies how many virtual columns the item should occupy on an extra small screen (less than 576px).</li>
            </ul>
            <p>Refer to the <helplink href="https://docs.devexpress.com/AspNetBootstrap/118834/site-layout/form-layout/form-layout-rendering">Form Layout Rendering</helplink> documentation topic to learn about the Form Layout rendering specifics and how to apply these specifics to construct efficient adaptive layouts.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AdaptiveEditFormLayout" Title="Adaptive Edit Form Layout">
        <Description>
          <![CDATA[
            <p>The layout of an edit form <a href="#AdaptiveLayout">adaptive</a> mode can be customized using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewFormLayoutProperties.Items">SettingsEditing.FormLayoutProperties.Items</helplink> collection property. This collection allows items of the following types:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapEditModeCommandLayoutItem">BootstrapEditModeCommandLayoutItem</helplink></li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewColumnLayoutItem">BootstrapGridViewColumnLayoutItem</helplink></li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapLayoutGroup">BootstrapLayoutGroup</helplink></li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTabbedLayoutGroup">BootstrapTabbedLayoutGroup</helplink></li>
            </ul>
            <p>All these classes expose <strong>ColSpanXX</strong> properties that allow you to use the Bootstrap grid system functionality to align layout elements based on the display resolution.</p>
            <p>If the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewFormLayoutProperties.Items">SettingsEditing.FormLayoutProperties.Items</helplink> collection is empty, the default layout is generated automatically.</p>
            <p>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ColumnLayoutItem.ColumnName">BootstrapGridViewColumnLayoutItem.ColumnName</helplink> property to associate a layout item with a data column.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="CssAdaptivity" Title="Css Adaptivity">
        <Description>
          <![CDATA[
                <p>This demo illustrates how you can use the bootstrap classes' functionality to achieve granular control over the adaptive behavior of Grid View's visual elements. 
                The Grid View control displayed below hides its Discontinued and Quantity per Unit columns when orientated vertically, after assigning column elements (data cells, header cells, and footer cells) to the <strong>hidden-xs</strong> CSS class provided by Bootstrap. Assigning this class specifies that the element should not be displayed when the Grid View is viewed with an extra small display resolution.</p>
                <p>Similarly, some elements of the grid pager are assigned to the <strong>hidden-xs</strong> class to provide a more compact pager presentation on extra small screens.</p>
                <p>You can use other responsive utility Bootstrap classes to control the visibility of control elements with different screen sizes: <a href="https://getbootstrap.com/docs/3.4/css/#responsive-utilities">Bootstrap responsive utility classes</a></p>
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewDataColumn.CssClasses">BootstrapGridViewDataColumn.CssClasses</helplink> - Allows you to assign custom CSS classes to various grid column elements.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridView.CssClassesPager">BootstrapGridView.CssClassesPager</helplink> - Allows you to assign custom CSS classes to pager elements.</li>
                </ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Templates" Title="Templates" SeoTitle="Bootstrap GridView Templates Demo">
      <DemoSection Key="CellTemplate" Title="Cell Template">
        <Description>
          <![CDATA[
                <p>The Grid View control allows you to customize layouts of its visual elements using the template technology. This demo demonstrates the use of a template to display cells within the 'Details' column. The template contains a link labeled 'Details'. Clicking this link displays a popup window containing additional information about an employee.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="PreviewTemplate" Title="Preview Template">
        <Description>
          <![CDATA[
                <p>Preview Rows are used to display large memo fields or custom data across all the columns within a Grid View. This demo illustrates how to create a template to display images along with textual content within preview rows.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DataToggleInColumns" Title="Data Attributes in Header">
        <Description>
          <![CDATA[
                <p>This demo demonstrates the use of the <strong>data-toggle</strong> attribute to declaratively assign an action to a control displayed within a column header template. In this demo, a button's <strong>data-toggle</strong> attribute is set to <strong>gridview-column-filterpopup</strong> to show the header filter popup.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DataToggleInRows" Title="Data Attributes in Row">
        <Description>
          <![CDATA[
                <p>This demo demonstrates the use of the <strong>data-toggle</strong> attribute to declaratively assign an action to a control displayed within a data item template. In this demo, each data row displays custom Edit and Delete buttons. The Edit button's <strong>data-toggle</strong> attribute is set to <strong>gridview-datarow-edit</strong> allowing the button to start editing the current row on click. Likewise, the Delete button's <strong>data-toggle</strong> attribute is set to <strong>gridview-datarow-delete</strong> allowing the button to delete the current row. Additionally, the Title Panel template contains a custom button whose <strong>data-toggle</strong> attribute is set to <strong>gridview-newrow</strong> allowing the button to create a new data row.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="SparklineColumn" Title="Sparkline Column">
        <Description>
          <![CDATA[
            <p>This demo demonstrates how to display the Bootstrap Sparkline within a grid cell in browse mode. In this demo, each data row displays a sparkline illustrating sales dynamics. 
            Since the amount of data presented by a single sparkline is large and the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataColumn.DataItemTemplate">DataItemTemplate</helplink> can be rebuilt several times per request, it is recommended that you store the sparkline data in a cache variable after obtaining it from the data source.
            The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.EnableRowsCache">BootstrapGridView.EnableRowsCache</helplink> property should be set to False to prevent incorrect deserialization of a custom object used as a BootstrapSparkLine data source.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
  </DemoGroup>

  <DemoGroup Key="CardView" Title="Card View" SeoTitle="Bootstrap CardView Demo" IconCssClass="icon icon-card" OrderIndex="1">
    <PreDescription>
      <![CDATA[
        <p>
        The DevExpress Bootstrap Card View is a full-featured data presentation control that renders itself using Bootstrap CSS classes. 
        It fully supports data editing and delivers numerous end-user data shaping features, including facilities for end-user data filtering and sorting. Total summaries are also available out-of-the box.
        </p>
      ]]>
    </PreDescription>
    <Description>
      <![CDATA[
          <p>The layouts of separate Card View's visual elements are customizable using templates.</p>
          <p>The Card View has been designed to work with large data sources and supports data binding in server mode. In this mode, it only loads the records to be displayed on screen and delegates all data processing to the database server.</p>
          <p>The Card View control automatically splits content across multiple pages and a built-in pager enables end-users to navigate through data.</p> 
          <p>Extensive server-side and client-side APIs cover multiple popular customization scenarios and gives you full control over the Card View's behavior and presentation.</p>
      ]]>
    </Description>
    <Demo Key="LargeDataBase" Title="Binding to Large DB" SeoTitle="Bootstrap GridView Binding to Large DataBase Demo">
      <DemoSection Key="BindingToLargeDatabase" Title="Binding to Large Database (Server Mode)">
        <Description>
          <![CDATA[
            <p>The Card View control supports binding to data in the server mode using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Data.Linq.EntityServerModeDataSource">EntityServerModeDataSource</helplink> component. In this mode, the Grid View loads only the minimum amount of data required for display on screen and delegates all data processing (such as grouping and sorting) to the database server. This technique significantly reduces the application's response time when working with large data sets.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="FilteringAndSorting" Title="Filtering and Sorting" SeoTitle="Bootstrap CardView Filtering and Sorting Demo">
      <DemoSection Key="SearchPanel" Title="Search Panel">
        <Description>
          <![CDATA[
            <p>The Card View control allows you to filter data and highlight search results via an integrated easy-to-use Search Panel. To enable the Search Panel, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.Visible">SettingsSearchPanel.Visible</helplink> property to <strong>true</strong>.</p>
            <p>To use an external editor instead of the built-in search panel, assign the editor's identifier to the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.CustomEditorID">SettingsSearchPanel.CustomEditorID</helplink> property.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.SearchPanelFilter">CardView.SearchPanelFilter</helplink> - Specifies the search text programmatically.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCardView.ApplySearchPanelFilter(value)">ClientCardView.ApplySearchPanelFilter</helplink> - Sets the search text on the client-side.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewSearchPanelSettings.ColumnNames">SettingsSearchPanel.ColumnNames</helplink> - Specifies particular columns to which the search panel filter should be applied. All columns are used for searching by default. The columns can be identified by a field name, column name or caption.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridDataColumnSettings.AllowFilterBySearchPanel">DataColumn.Settings.AllowFilterBySearchPanel</helplink> - Prevents a particular column from being filtered using the search panel.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView.SearchPanelEditorCreate">GridView.SearchPanelEditorCreate</helplink> - Fires when a search panel editor is being created. Handling this event allows you to adjust the editor's properties or provide a custom editor by specifying the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridEditorCreateEventArgs.EditorProperties">e.EditorProperties</helplink> event parameter.</li>              
            </ul>      
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="HeaderFilter" Title="Header Filter">
        <Description>
          <![CDATA[
            <p>The Card View control provides a powerful data filtering mechanism that displays a dropdown list of all unique values within a column. Clicking the column header's filter button invokes this dropdown list. Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.ShowHeaderFilterButton">Settings.ShowHeaderFilterButton</helplink> to <strong>true</strong> to show header filter buttons.</p>
            <p>Additionally, an end-user can filter items displayed by the header filter dropdown by entering text in the filter editor above the list. This editor is shown by default. To hide it, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.ShowHeaderFilterListBoxSearchUI">Settings.ShowHeaderFilterListBoxSearchUI</helplink> property to <strong>false</strong>.</p>
            <p>You can set header filter settings for each data column using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewColumn.SettingsHeaderFilter">Column.SettingsHeaderFilter</helplink> property.</p>
            <%--BeginCollapse--%>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridDataColumnHeaderFilterSettings.Mode">DataColumn.SettingsHeaderFilter.Mode</helplink> - Specifies the type of header filter for a column: List, CheckedList, DateRangeCalendar, DateRangePicker, and NumericRangePicker.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewColumn.FilterExpression">DataColumn.FilterExpression</helplink> - Gets the column's filter expression.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridHeaderFilterListBoxSearchUISettings.Visibility">DataColumn.SettingsHeaderFilter.ListBoxSearchUISettings.Visibility</helplink> - Specifies the visibility of the search UI within the column's header filter dropdown.</li>
            </ul>
            <p>Note that the Card View control does not display column headers by default. To enable column headers, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewSettings.ShowHeaderPanel">Settings.ShowHeaderPanel</helplink> property to <strong>true</strong>.</p>
            <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="HeaderFilterWithCheckedListMode" Title="Header Filter - Checked List mode">
        <Description>
          <![CDATA[
            <p>The header filter can operate in <strong>CheckedList</strong> mode, in which it displays a check box list allowing an end-user to specify multiple filtering criteria. You can enable the <strong>CheckedList</strong> mode for a column's header filter by setting the column's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridDataColumnHeaderFilterSettings.Mode">SettingsHeaderFilter.Mode</helplink> property to <strong>GridHeaderFilterMode.CheckedList</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AdvancedFiltering" Title="Header Filter - Custom Values">
        <Description>
          <![CDATA[
            <p>The Card View control allows you to create custom filter values, define filter criteria and display these values within the column's filter dropdown. To do this, handle the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardView.HeaderFilterFillItems">HeaderFilterFillItems</helplink> event. The event argument contains a list of predefined filter values, which contains a data column's unique values. These values are shown in the header filter popup by default. You can modify this list and fill it with custom items. Each filter value should have a title and filter expression.</p>
            <p>In this demo, custom filter values are displayed within the 'Total' and 'Quantity' columns' filter dropdowns.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridHeaderFilterEventArgs.Values">e.Values</helplink> - A list of column header filter items.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridheaderfiltereventargs.addvalue.overloads">e.AddValue</helplink> - Adds a new item to the list of header filter items. The Criteria Language Syntax help topic describes the filter expression syntax.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridHeaderFilterEventArgs.AddShowAll">e.AddShowAll</helplink> - Adds the 'All' item to the header filter.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Sorting" Title="Sorting Data">
        <Description>
          <![CDATA[
            <p>An end-user can sort the Card View by clicking the header of a column by which data should be sorted. An arrow glyph indicates the sort order within the sorted column. The Card View can be sorted against multiple columns by clicking the required column headers while holding down the shift key.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBehaviorSettings.AllowSort">SettingsBehavior.AllowSort</helplink> property defines whether the Card View can be sorted. The default value is <strong>true</strong>.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewColumn.SortIndex">DataColumn.SortIndex</helplink> - Specifies a column's position among sorted columns. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewColumn.SortIndex">SortIndex</helplink> equals 1 when the column is not sorted.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewColumn.SortOrder">DataColumn.SortOrder</helplink> - Specifies a column's sort order.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxcardview.sortby.overloads">CardView.SortBy</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCardView.SortBy(column)">ClientCardView.SortBy</helplink> - Sort data by the specified column using the specified sort order.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.ClearSort">GridView.ClearSort</helplink> - Clears sorting applied to the Card View.</li>
            </ul>
            <p>Note that the Card View control does not display column headers by default. To enable column headers, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewSettings.ShowHeaderPanel">Settings.ShowHeaderPanel</helplink> property to <strong>true</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Editing" Title="Editing" SeoTitle="Bootstrap CardView Data Editing Demo">
      <DemoSection Key="EditingWithEditForm" Title="Editing With Edit Form">
        <Description>
          <![CDATA[
            <p>The Card View control provides end-user data editing functionality out of the box. By default, card editing is performed in Edit Form mode. In this mode, the Card View shows the Edit Form instead of the currently edited card. The Edit Form displays edit cells that correspond to data columns, and the <strong>Cancel/Update</strong> commands that allow end-users to discard changes or save them to a database.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewFormLayoutProperties.Items">SettingsEditing.FormLayoutProperties.Items</helplink> collection property defines the Edit Form layout. If this property is not set, the Edit Form layout is generated based on the card layout (which is controlled by the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewFormLayoutProperties.Items">CardLayoutProperties.Items</helplink> property). The following layout item types are allowed:</p>
            <%--BeginCollapse--%>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewColumnLayoutItem">BootstrapCardViewColumnLayoutItem</helplink> - On a card, displays the value of a data column to which the layout item is bound. On the Edit Form, displays an editor allowing an end-user to edit the column's value.</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewCommandLayoutItem">BootstrapCardViewCommandLayoutItem</helplink> - Displays command buttons. The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewCommandLayoutItem">BootstrapCardViewCommandLayoutItem</helplink> class exposes the following properties allowing you to specify which command items should be displayed: ShowEditButton, ShowDeleteButton, ShowNewButton, ShowSelectCheckbox. Additionally, you can use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewCommandLayoutItem.CustomButtons">BootstrapCardViewCommandLayoutItem.CustomButtons</helplink> collection property to create custom command buttons. Each custom button in the collection is represented by a <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewCustomCommandButton">BootstrapCardViewCustomCommandButton</helplink> object.</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapEditModeCommandLayoutItem">BootstrapEditModeCommandLayoutItem</helplink> - Displays the Update and Cancel command buttons within the Edit Form.</li>
            </ul>
            <p>By default all data editing operations are prohibited. In this demo, row insertion, deletion, and editing is explicitly enabled using settings available through the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardView.SettingsDataSecurity">SettingDataSecurity</helplink> property.</p>
            <%--EndCollapse--%>
         ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="EditingInPopupEditForm" Title="Editing in Popup Edit Form">
        <Description>
          <![CDATA[
            <p>In this mode, the Edit Form is displayed within a popup window. To use this mode, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewEditingSettings.Mode">SettingsEditing.Mode</helplink> property to <strong>PopupEditForm</strong>.</p>
            <p>By default, all data editing operations are prohibited. In this demo, card insertion, deletion, and editing are explicitly enabled using settings available through the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardView.SettingsDataSecurity">SettingDataSecurity</helplink> property.</p>
         ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="BatchEditingAndUpdating" Title="Batch Editing and Updating">
        <Description>
          <![CDATA[
            <p>The Card View control allows you to edit and update multiple cards on the client side and send them to the server in a single request.</p>
            <p>To enable the batch editing functionality, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewEditingSettings.Mode">SettingsEditing.Mode</helplink> property to <strong>Batch</strong>. In this mode, data displayed on a Card View page can be edited using in-line editors. The modified cells are highlighted. Deleted cards are also highlighted and display the Recover command item. To hide the deleted cards  from the view, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewBatchEditSettings.HighlightDeletedCards">SettingsEditing.BatchEditSettings.HighlightDeletedCards</helplink> property to <strong>false</strong>. All changes are maintained on the client side until the Save changes button is clicked or all changes are canceled by clicking the Cancel changes button.</p>
            <p>If a Card View contains modified data, it displays a confirm message before a callback or postback is performed.</p>
            <%--BeginCollapse--%>
            <p>You can customize the batch edit mode settings using the following properties.</p>
            <ul>
              <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewBatchEditSettings.EditMode">EditMode</helplink> property allows you to specify which control element (cell or card) is used to edit data.</li>
              <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridBatchEditSettings.StartEditAction">StartEditAction</helplink> property specifies the action used to begin editing data.</li>
            </ul>
            <p>The client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCardView.batchEditApi">batchEditApi</helplink> property provides access to the batch editing client API. The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCardView.BatchEditStartEditing">BatchEditStartEditing</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCardView.BatchEditEndEditing">BatchEditEndEditing</helplink> events occur when a Card View switches to/leaves the batch edit mode.</p>
            <p>By default, all data editing operations are prohibited. In this demo, card insertion, deletion, and editing are explicitly enabled using settings available through the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardView.SettingsDataSecurity">SettingDataSecurity</helplink> property.</p>            
            <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DataValidation" Title="Data Validation">
        <Description>
          <![CDATA[
            <p>The Card View Control allows you to manually validate the edited card and display errors for invalid fields. This demo demonstrates how you can provide data validation by handling the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView.CardValidating">CardValidating</helplink> event.</p>
            <p>To indicate cards with invalid data, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView.HtmlCardPrepared">HtmlCardPrepared</helplink> event is handled. This event is raised for each data row when the corresponding card within the card view has been created. In this sample, cards with invalid data are colored in red (a text-danger CSS class is applied).</p>
            <p>In the Edit Form, an error icon indicates an invalid field. Hover over the icon with the mouse to display a hint along with a description of the error.</p>
            <p>By default, all data editing operations are prohibited. In this demo, card insertion, deletion, and editing are explicitly enabled using settings available through the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardView.SettingsDataSecurity">SettingDataSecurity</helplink> property.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Selection" Title="Selection and Focus" SeoTitle="Bootstrap CardView Selection and Focus Demo">
      <DemoSection Key="Focusing" Title="Focusing">
        <Description>
          <![CDATA[
            <p>When the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewBehaviorSettings.AllowFocusedCard">SettingsBehavior.AllowFocusedCard</helplink> is set to <strong>true</strong>, one of the cards in the Card View control is focused. You can use this feature in multiple ways, for example, to display additional information for the focused card.</p>
            <p>An end-user can move focus to another card by clicking it. Handle the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView.FocusedCardChanged">FocusedCardChanged</helplink> event to respond to changing card focus.</p>
            <p>You can programmatically change card focus using the following API:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCardView.GetFocusedCardIndex">GetFocusedCardIndex</helplink> - Gets the index of the currently focused card on the client.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCardView.SetFocusedCardIndex(visibleIndex)">SetFocusedCardIndex</helplink> - Sets the focused card by its index on the client.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView.FocusedCardIndex">FocusedCardIndex</helplink> - Gets or sets the focused card index on the server-side.</li>
            </ul>
            <p>Set the focused card index to -1 on the client or server-side to reset a focused card.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Selection" Title="Selection">
        <Description>
          <![CDATA[
            <p>When card selection is enabled, the Card View control allows end-users to select cards by clicking them or enabling selection checkboxes.</p>
            <p>To show selection checkboxes within a layout item, set a layout item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewCommandLayoutItem.ShowSelectCheckbox">ShowSelectCheckBox</helplink> property to <strong>true</strong>.</p>
            <p>Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewBehaviorSettings.AllowSelectByCardClick">SettingsBehavior.AllowSelectByCardClick</helplink> property to <strong>true</strong> to enable row selection via mouse click. Once set, clicking any card clears the previous selection and selects this card.</p>
            <p>To select multiple cards, click the desired rows while holding down the <kbd>Ctrl</kbd> key. Clicking a card in this manner toggles its selected state and preserves the selection. To select contiguous cards, click the first row you wish to select, hold down the <kbd>Shift</kbd> key, and click the last row. You can continue customizing the selection by clicking individual cards while holding down the <kbd>Ctrl</kbd> key.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="SelectionAPI" Title="Selection API">
        <Description>
          <![CDATA[
            <p>The Card View control provides a client-side API allowing you to programmatically manipulate card selection and obtain information about the currently selected card.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView.Selection">CardView.Selection</helplink> object represents an API to manipulate selection on the server-side.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.SelectionChanged">CardView.SelectionChanged</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCardView.SelectionChanged">ClientCardView.SelectionChanged</helplink> - Fire when selection has been changed.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.SelectRows">ClientCardView.SelectRows</helplink> - Allows you to select or deselect the specified cards, or select all cards within the Card View.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.SelectRowsByKey(keys)">ClientCardView.SelectRowsByKey</helplink> - Allows you to select or deselect cards by their keys.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.SelectAllRowsOnPage">ClientCardView.SelectAllRowsOnPage</helplink> - Allows you to select or deselect all cards displayed on the current page.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.UnselectRows">ClientCardView.UnselectRows</helplink> - Deselects all cards or the specified cards within the Card View.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Summary" Title="Summary" SeoTitle="Bootstrap CardView Summary">
      <DemoSection Key="Summary" Title="Summary">
        <Description>
          <![CDATA[
            <p>Total summaries are aggregate function values calculated against all cards within the Card View and displayed in the summary panel when the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewSettings.ShowSummaryPanel">Settings.ShowSummaryPanel</helplink> property is set to <strong>true</strong>.</p>
            <p>The Card View control stores its total summary items in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView.TotalSummary">TotalSummary</helplink> collection. Each item in the collection is an instance of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewSummaryItem">ASPxCardViewSummaryItem</helplink> class.</p>
            <p>Built-in aggregate functions include: Min, Max, Avg, Sum and Count.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="ColumnTypes" Title="Column Types" SeoTitle="Bootstrap CardView Column Types Demo">
      <DemoSection Key="DataColumn" Title="Data Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewColumn">BootstrapCardViewColumn</helplink> is a type of a grid column that automatically determines the actual column type (and, consequently, the control used for both displaying and editing cell data) based on the type of a data field to which a column is bound:</p>
            <ul>
              <li>A Date Edit column is created for the DateTime data type.</li>
              <li>A Check Box column is created for the Bool data type.</li>
              <li>A Text column is created for any other data type.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="BinaryImageColumn" Title="Binary Image Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewBinaryImageColumn">BootstrapCardViewBinaryImageColumn</helplink> column used to display images for columns that contain binary data. You can access the Binary Image settings using a column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewBinaryImageColumn.PropertiesBinaryImage">PropertiesBinaryImage</helplink> property.</p>
            <p>Editing settings of the Binary Image control are available via the PropertiesBinaryImage.EditingSettings property.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BinaryImageEditProperties.ImageWidth">PropertiesBinaryImage.ImageWidth</helplink> - Specifies the width of the image displayed within a column.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BinaryImageEditProperties.ImageHeight">PropertiesBinaryImage.ImageHeight</helplink> - Specifies the height of the image displayed within a column.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="ButtonEditColumn" Title="Button Edit Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewButtonEditColumn">BootstrapCardViewButtonEditColumn</helplink> column displays the Button Edit control as its cell editor. You can access the cell editor's settings using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewButtonEditColumn.PropertiesButtonEdit">PropertiesButtonEdit</helplink> property.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapButtonEditProperties.Buttons">PropertiesButtonEdit.Buttons</helplink> - a collection property that allows you to specify buttons that should be displayed within the cell editor.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="CheckColumn" Title="Check Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewCheckColumn">BootstrapCardViewCheckColumn</helplink> is a column using a check box to display and edit data from Boolean data fields. You can access the cell editor's settings using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewCheckColumn.PropertiesCheckEdit">PropertiesCheckEdit</helplink> property.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CheckBoxProperties.UseDisplayImages">PropertiesCheckEdit.UseDisplayImages</helplink> - Specifies whether the editor's check state is represented by icons or specific texts in browse mode.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CheckBoxProperties.DisplayTextChecked">PropertiesCheckEdit.DisplayTextChecked</helplink> / <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CheckBoxProperties.DisplayTextUnchecked">DisplayTextUnchecked</helplink> - Specifies the text that represents the checked/unchecked state of a column editor in browse mode.</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewEditorCssClasses.IconCheckColumnChecked">CssClassesEditor.IconCheckColumnChecked</helplink> / <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapGridViewEditorCssClasses.IconCheckColumnUnchecked">IconCheckColumnUnchecked</helplink> - Specifies the icons that represent the checked/unchecked state of a column editor in browse mode.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="ComboBoxColumn" Title="Combo Box Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewComboBoxColumn">BootstrapCardViewComboBoxColumn</helplink> is a column whose values are edited using the Combo Box editor. You can access the cell editor's settings using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewComboBoxColumn.PropertiesComboBox">PropertiesComboBox</helplink> property.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapComboBoxProperties.Items">PropertiesComboBox.Items</helplink> - specifies collection of Combo Box items.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AutoCompleteBoxPropertiesBase.DataSourceID">PropertiesComboBox.DataSourceID</helplink> - allows to bind Combo Box item collection to a data source.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="DateEditColumn" Title="Date Edit Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewDateColumn">BootstrapCardViewDateColumn</helplink> is a column using the Date Edit control to display and edit data from a DateTime data field. You can access the cell editor's settings using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewDateColumn.PropertiesDateEdit">PropertiesDateEdit</helplink> property.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DateEditProperties.EditFormat">PropertiesDateEdit.EditFormat</helplink> - Specifies possible formats of the date column: Time, DateTime, Date, Custom.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="DropDownEditColumn" Title="Drop-Down Edit Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewDropDownEditColumn">BootstrapCardViewDropDownEditColumn</helplink> column provides a cell editor containing a customizable drop-down window. You can access the cell editor's settings using the column's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewDropDownEditColumn.PropertiesDropDownEdit">PropertiesDropDownEdit</helplink> property.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapDropDownEditProperties.DropDownWindowWidth">PropertiesDropDownEdit.DropDownWindowTemplate</helplink> - Specifies a template used to display the editor's drop-down window content.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="HyperLinkColumn" Title="Hyperlink Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewHyperLinkColumn">BootstrapCardViewHyperLinkColumn</helplink> column represents a data column with hyperlink functionality. You can access settings of a displayed hyperlink using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewHyperLinkColumn.PropertiesHyperLinkEdit">PropertiesHyperLinkEdit</helplink> property.</p>
            <p>By default, if no display text is provided for a hyperlink through the corresponding settings (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.HyperLinkProperties.Text">HyperLinkProperties.Text</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.HyperLinkProperties.TextField">HyperLinkProperties.TextField</helplink>), the hyperlink displays the URL obtained from the column's data field. You can disable this behavior by setting the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewHyperLinkColumn.ShowUrlAsDisplayText">BootstrapCardViewHyperLinkColumn.ShowUrlAsDisplayText</helplink> property to <strong>false</strong>.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.HyperLinkProperties.NavigateUrlFormatString">HyperLinkProperties.NavigateUrlFormatString</helplink> - Specifies the pattern used to format the hyperlink location url in display mode.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="ImageColumn" Title="Image Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewImageColumn">BootstrapCardViewImageColumn</helplink> is a column used to display images from specified URLs. You can access the cell editor's settings using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewImageColumn.PropertiesImage">PropertiesImage</helplink> property.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageEditPropertiesBase.ImageUrlFormatString">PropertiesImage.ImageUrlFormatString</helplink> - specifies the pattern used to format the URL that points to the image displayed in the cell</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="MemoColumn" Title="Memo Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewMemoColumn">BootstrapCardiewMemoColumn</helplink> is a data column used to display and edit multiline text data. You can access the cell editor's settings using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewMemoColumn.PropertiesMemoEdit">PropertiesMemoEdit</helplink> property.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MemoProperties.Columns">PropertiesMemoEdit.Columns</helplink> - Gets or sets the textarea's width in characters.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MemoProperties.Rows">PropertiesMemoEdit.Rows</helplink> - Gets or sets the textarea's height in characters.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="ProgressBarColumn" Title="Progress Bar Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewProgressBarColumn">BootstrapCardViewProgressBarColumn</helplink> column presents numeric data as a progress bar. You can access settings of a displayed progress bar using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewProgressBarColumn.PropertiesProgressBar">PropertiesProgressBar</helplink> property.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ProgressBarProperties.Minimum">PropertiesProgressBar.Minimum</helplink> - Specifies the minimum range value of a progress bar column (when the progress bar is empty).</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ProgressBarProperties.Maximum">PropertiesProgressBar.Maximum</helplink> - Specifies the maximum range value of a progress bar column (when the progress bar is completely filled).</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="SpinEditColumn" Title="Spin Edit Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewSpinEditColumn">BootstrapCardViewSpinEditColumn</helplink> is a column used to display and edit numeric data. The column data is edited using the Spin Edit control. You can access the Spin Edit settings using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewSpinEditColumn.PropertiesSpinEdit">PropertiesSpinEdit</helplink> property.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SpinEditProperties.Increment">PropertiesSpinEdit.Increment</helplink> - Specifies the value by which the spin editor's value is changed when clicking a small increment/decrement spin button.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SpinEditProperties.NumberFormat">PropertiesSpinEdit.NumberFormat</helplink> - Specifies possible display formats for a spin editor's value: Number, Currency, Percent, Custom.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SpinEditProperties.MinValue">PropertiesSpinEdit.MinValue</helplink> / <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SpinEditProperties.MaxValue">MaxValue</helplink> - Specify the minimum and maximum values of the column editor.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="TagBoxColumn" Title="Tag Box Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewTagBoxColumn">BootstrapCardViewTagBoxColumn</helplink> is a column used to display and edit values with the Tag Box editor. You can access the cell editor's settings using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewTagBoxColumn.PropertiesTagBox">PropertiesTagBox</helplink> property.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTagBoxProperties.Tags">PropertiesTagBox.Tags</helplink> - Provides access a collection of editor tags.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AutoCompleteBoxPropertiesBase.DataSourceID">PropertiesTagBox.DataSourceID</helplink> - Allows to bind the tags collection to a data source.</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTagBoxProperties.AllowCustomTags">PropertiesTagBox.AllowCustomTags</helplink> - Specifies whether end-users can input tokens that are not contained in the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTagBoxProperties.Tags">Tags</helplink> collection.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="TextColumn" Title="Text Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewTextColumn">BootstrapCardViewTextColumn</helplink> is a data column used to display and edit text. You can access the cell editor's settings using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewTextColumn.PropertiesTextEdit">PropertiesTextEdit</helplink> property.</p>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="TimeEditColumn" Title="Time Edit Column">
        <Description>
          <![CDATA[
            <p>A <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewTimeEditColumn">BootstrapCardViewTimeEditColumn</helplink> is a column using the Time Edit control to display and edit data from a DateTime data field. You can access the cell editor's settings using the column's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewTimeEditColumn.PropertiesTimeEdit">PropertiesTimeEdit</helplink> property.</p>
            <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TimeEditProperties.EditFormat">PropertiesTimeEdit.EditFormat</helplink> - specifies possible formats of the date column: Time, DateTime, Date, Custom</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="ConditionalFormatting" Title="Conditional Formatting" SeoTitle="Bootstrap CardView Conditional Formatting Demo">
      <DemoSection Key="CardFormatting" Title="Card Formatting">
        <Description>
          <![CDATA[
            <p>The Card View control supports conditional formatting, i.e., automatically applies cell formatting based on the specified rules. This feature helps end-users quickly notice critical information, identify trends and exceptions, and compare data.</p>
            <p>Formatting rules can be created at design time or programmatically. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView.FormatConditions">FormatConditions</helplink> property provides an access to a collection of rules, which are represented by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridFormatConditionBase">GridFormatConditionBase</helplink> class descendants.</p>
            <p>In this demo, the <strong>ApplyToCard</strong> property is set to <strong>true</strong> to specify that formatting should be applied to the whole card.</p>
            <p>The style settings applied to card cells can be exported together with data to various formats using our data aware export engine. 
            Moreover, when we export data to Excel formats (XLS and XLSX), the format conditions are transformed to corresponding Excel conditional formatting rules. 
            Therefore, you can manage the rules in Excel after export. You can take a look at a card view export capabilities in the <a href="Export.aspx#ExportWithFormatConditions">Export with Format Conditions</a> demo.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ItemFormatting" Title="Item Formatting">
        <Description>
          <![CDATA[
            <p>This example demonstrates conditional formatting applied to separate card items (in cases when a format condition object's <strong>ApplyToCard</strong> property is not set).</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="ScrollingAndPaging" Title="Scrolling and Paging" SeoTitle="Bootstrap CardView Scrolling and Paging Demo">
      <DemoSection Key="VerticalScrolling" Title="Vertical Scrolling">
        <Description>
          <![CDATA[
            <p>This demo illustrates the Card View control's vertical scrolling capability.</p>
            <p>By default, the grid height is determined by the number of rows displayed within a page. To reduce the grid's height, display the vertical scrollbar using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.VerticalScrollBarMode">Settings.VerticalScrollBarMode</helplink> property, and specify the height of the scrollable area (in pixels) using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.VerticalScrollableHeight">Settings.VerticalScrollableHeight</helplink> property.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.VerticalScrollBarMode">Settings.VerticalScrollBarMode</helplink> property accepts the following values:</p>
            <ul>
              <li><strong>Auto</strong> - The scrollbar is automatically shown when the size of the control content exceeds the size of the control itself.</li>
              <li><strong>Hidden</strong> - The scrollbar is hidden.</li>
              <li><strong>Visible</strong> - The scrollbar is visible.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="EndlessPaging" Title="Endless Paging">
        <Description>
          <![CDATA[
            <p>The Card View control supports the endless paging mode. This mode allows cards to load on demand. To enable this functionality, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewPagerSettings.Mode">SettingsPager.Mode</helplink> property to <strong>EndlessPaging</strong>.</p>
            <p>When the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewPagerSettings.EndlessPagingMode">SettingsPager.EndlessPagingMode</helplink> property is set to <strong>OnClick</strong>, the cards are loaded when the <strong>Show more cards</strong> button is clicked.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="EndlessPagingOnPageScroll" Title="Endless Paging on Page Scroll">
        <Description>
          <![CDATA[
            <p>The Card View control supports the endless paging mode. This mode allows cards to load on demand. To enable this functionality, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewPagerSettings.Mode">SettingsPager.Mode</helplink> property to <strong>EndlessPaging</strong>.</p>
            <p>When the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewPagerSettings.EndlessPagingMode">SettingsPager.EndlessPagingMode</helplink> property is set to <strong>OnScroll</strong>, the cards are automatically loaded when a page or the control is scrolled.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Export" Title="Export" SeoTitle="Bootstrap CardView Export Demo">
      <DemoSection Key="ExportingTo" Title="Exporting to PDF, XLS, XLSX, CSV and RTF">
        <Description>
          <![CDATA[
            <p>The Card View control allows you to export Card View data with ease. Data can be exported to a file or stream in the following formats:</p>
            <ul>
              <li>PDF (WritePdf, WritePdfToResponse)</li>
              <li>XLS (WriteXls, WriteXlsToResponse)</li>
              <li>XLSX (WriteXlsx, WriteXlsxToResponse)</li>
              <li>RTF (WriteRtf, WriteRtfToResponse)</li>
              <li>CSV (WriteCsv, WriteCsvToResponse)</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ExportSelectedRecords" Title="Export Selected Records">
        <Description>
          <![CDATA[
            <p>To export only the currently selected cards, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewExportSettings.ExportSelectedCardsOnly">SettingsExport.ExportSelectedCardOnly</helplink> property to <strong>true</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ExportWithFormatConditions" Title="Export with Format Conditions">
        <Description>
          <![CDATA[
            <p>When data is exported to a PDF or RTF file, the Card View maintains the style settings applied to the cells (with the exception of images). 
            Moreover, when you export data to Excel formats (XLS and XLSX), the format conditions are transformed to corresponding Excel conditional formatting rules. 
            Therefore, you can manage the rules in Excel after export.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Toolbar" Title="Toolbar" SeoTitle="Bootstrap CardView Toolbar Customization">
      <DemoSection Key="Toolbar" Title="Toolbar">
        <Description>
          <![CDATA[
            <p>The Card View control can display toolbars aggregating commands related to the Card View and its data.</p>
            <p>All Card View toolbars are available through the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardView.Toolbars">Toolbars</helplink> collection property, in which each toolbar is a <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewToolbar">BootstrapCardViewToolbar</helplink> object. Each item on the toolbar is represented by a <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewToolbarItem">BootstrapCardViewToolbarItem</helplink> object available through the toolbar's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewToolbar.Items">BootstrapCardViewToolbar.Items</helplink> collection property.</p>
            <p>A toolbar item's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewToolbarItemBase.Command">Command</helplink> property allows you to associate the toolbar item with one of the built-in commands or custom logic implemented in the Card View's server-side or client-side <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardView.ToolbarItemClick">ToolbarItemClick</helplink> event handler.</p>
            <p>Refer to the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewToolbarCommand">BootstrapCardViewToolbarCommand</helplink> documentation topic to view the full list of available commands.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AdaptiveToolbar" Title="Adaptive Toolbar">
        <Description>
          <![CDATA[
            <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewToolbar">BootstrapCardViewToolbar</helplink> object allows you to add adaptive toolbars to different Card View parts (inside the header/footer, outside the Panel element). </p>
            <p><b>Toolbar Position</b></p>
            <p>The following table lists the properties that control the toolbar's position:</p>
            <div style="max-width: 100%; overflow-x: auto; margin-bottom: 1rem;">
			        <table class="table table-bordered my-0">
			          <tr>
				          <th></th>
				          <th class="text-center"><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridToolbar.Position">Position</helplink> = Top</th> 
				          <th class="text-center"><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridToolbar.Position">Position</helplink> = Bottom</th>
			          </tr>
			          <tr>
				          <th class="text-nowrap"><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewToolbar.ShowInsidePanel">ShowInsidePanel</helplink> = true</th>
				          <td>The toolbar is displayed in the PanelHeader <br />(<code class="text-nowrap">&lt;div class="card-header"&gt;...&lt;/div&gt;</code>)</td> 
				          <td>The toolbar is displayed in the PanelFooter <br />(<code class="text-nowrap">&lt;div class="card-footer"&gt;...&lt;/div&gt;</code>)</td>
			          </tr>
			          <tr>
				          <th class="text-nowrap"><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewToolbar.ShowInsidePanel">ShowInsidePanel</helplink> = false</th>
				          <td>The toolbar is displayed above the Panel element <br />(<code class="text-nowrap">&lt;div class="card"&gt;...&lt;/div&gt;</code>)</td> 
				          <td>The toolbar is displayed below the Panel element <br />(<code class="text-nowrap">&lt;div class="card"&gt;...&lt;/div&gt;</code>)</td>
			          </tr>
			        </table>
            </div>
            <p>Note: If a Card View has one or more toolbars in the the PanelHeader, the Card View's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridTextSettings.Title">title</helplink> is displayed inside the first toolbar. Otherwise, the title is displayed above the Card View.</p>
            <p><b>Toolbar Adaptivity</b></p>
            <p>The following properties control how the toolbar responds when the container's width changes:</p>
            <%--BeginCollapse--%>
            <ol>
            <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuSettingsAdaptivity.EnableCollapseRootItemsToIcons">SettingsAdaptivity.EnableCollapseRootItemsToIcons</helplink> - If <b>true</b>, the text of all items that contain icons are hidden. Additionally, you can use the item's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewToolbarItem.AdaptivePriority">BootstrapCardViewToolbarItem.AdaptivePriority</helplink> property to hide a specific item first of others.</li>
            <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuSettingsAdaptivity.EnableAutoHideRootItems">SettingsAdaptivity.EnableAutoHideRootItems</helplink> - If <b>true</b>, the toolbar combines root items one by one in the root submenu until the toolbar contains the minimum number of root items (specified in the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapToolbarSettingsAdaptivityBase.MinRootItemsCount">SettingsAdaptivity.MinRootItemsCount</helplink> property).</li>
            </ol>
            <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ToolbarCustomItems" Title="Custom Toolbar Items">
        <Description>
          <![CDATA[
            <p>You can provide custom logic for a toolbar item by setting its <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewToolbarItemBase.Command">Command</helplink> property to <strong>Custom</strong>. Handle the client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridBase.ToolbarItemClick">ToolbatItemClick</helplink> event to process a toolbar item click.</p>
            <p>If you also want to perform server-side processing, set the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientProcessingModeEventArgs.processOnServer">processOnServer</helplink> client event argument to <strong>true</strong>, which forces a callback after the client-side processing is finished.</p>
            <p>You can specify that the server-side processing should be initiated by a postback rather than a callback by setting the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridToolbarItemClickEventArgs.usePostBack">usePostBack</helplink> client event argument to <strong>true</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Adaptivity" Title="Adaptivity" SeoTitle="Bootstrap CardView Adaptivity Demo">
      <DemoSection Key="AdaptiveCardsLayout" Title="Adaptive Cards Layout">
        <Description>
          <![CDATA[
            <p>The Card View control relies on the Bootstrap grid system to align cards. 
               It can display a different number of cards in a row for different display resolutions. 
               For this purpose, the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardView">BootstrapCardView</helplink> class exposes <strong>SettingsLayout.CardColSpanXX</strong> properties. 
               The number of cards rendered per page can be specified using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewPagerSettings.ItemsPerPage">SettingsPager.ItemsPerPage</helplink> property.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AdaptiveCardLayout" Title="Adaptive Card Layout">
        <Description>
          <![CDATA[
            <p>The layout of a card can be customized using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewFormLayoutProperties.Items">CardLayoutProperties.Items</helplink> collection property. 
               This collection allows items of the following types:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewCommandLayoutItem">BootstrapCardViewCommandLayoutItem</helplink> (visible only in browse mode)</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapEditModeCommandLayoutItem">BootstrapEditModeCommandLayoutItem</helplink> (visible only in edit mode)</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewCommandLayoutItem">BootstrapCardViewColumnLayoutItem</helplink></li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapLayoutGroup">BootstrapLayoutGroup</helplink></li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTabbedLayoutGroup">BootstrapTabbedLayoutGroup</helplink></li>
            </ul>
            <p>All these classes expose <strong>ColSpanXX</strong> properties that allow you to use the Bootstrap grid system functionality to align layout elements based on the display resolution.</p>
            <p>If the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewFormLayoutProperties.Items">CardLayoutProperties.Items</helplink> collection is empty, the default layout is generated automatically.</p>
            <p>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ColumnLayoutItem.ColumnName">BootstrapCardViewColumnLayoutItem.ColumnName</helplink> property to associate a layout item with a data column.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AdaptiveEditCardLayout" Title="Adaptive Edit Card Layout">
        <Description>
          <![CDATA[
            <p>The layout of an edit card can be customized using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewFormLayoutProperties.Items">SettingsEditing.FormLayoutProperties.Items</helplink> collection property. 
               This collection allows items of the following types:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewCommandLayoutItem">BootstrapCardViewCommandLayoutItem</helplink> (visible only in browse mode)</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapEditModeCommandLayoutItem">BootstrapEditModeCommandLayoutItem</helplink> (visible only in edit mode)</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewCommandLayoutItem">BootstrapCardViewColumnLayoutItem</helplink></li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapLayoutGroup">BootstrapLayoutGroup</helplink></li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTabbedLayoutGroup">BootstrapTabbedLayoutGroup</helplink></li>
            </ul>
            <p>All these classes expose <strong>ColSpanXX</strong> properties that allow you to use the Bootstrap grid system functionality to align layout elements based on the display resolution.</p>
            <p>If the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewFormLayoutProperties.Items">SettingsEditing.FormLayoutProperties.Items</helplink> collection is empty, items from the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewFormLayoutProperties.Items">CardLayoutProperties.Items</helplink> collection are used instead. If the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCardViewFormLayoutProperties.Items">CardLayoutProperties.Items</helplink> collection is also empty, the default layout is generated automatically.</p>
            <p>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ColumnLayoutItem.ColumnName">BootstrapCardViewColumnLayoutItem.ColumnName</helplink> property to associate a layout item with a data column.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Templates" Title="Templates" SeoTitle="Bootstrap CardView Templates Demo">
      <DemoSection Key="CardTemplate" Title="Card Template">
        <Description>
          <![CDATA[
            <p>The Card View control allows you to customize layouts of its visual elements using the template technology. 
            This example demonstrates how to use templates to create custom card layouts.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DataToggleInHeaders" Title="Data Attributes in Header">
        <Description>
          <![CDATA[
            <p>This demo demonstrates the use of the <strong>data-toggle</strong> attribute to declaratively assign an action to a control displayed within a header template. In this demo, an &lt;a&gt; element's data-toggle attribute is set to <strong>cardview-column-sort</strong> to sort data by the column's values and a button's <strong>data-toggle</strong> attribute is set to <strong>cardview-column-filterpopup</strong> to show the header filter popup.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DataToggleInCards" Title="Data Attributes in Card">
        <Description>
          <![CDATA[
            <p>This demo demonstrates the use of the <strong>data-toggle</strong> attribute to declaratively assign an action to a control displayed within a data item template. In this demo, each data row displays custom Edit and Delete buttons. The Edit button's <strong>data-toggle</strong> attribute is set to <strong>cardview-card-edit</strong> allowing the button to start editing the current card on click. Likewise, the Delete button's <strong>data-toggle</strong> attribute is set to <strong>cardview-card-delete</strong> allowing the button to delete the current card. Additionally, the Title Panel template contains a custom button whose <strong>data-toggle</strong> attribute is set to <strong>cardview-newcard</strong> allowing the button to create a new card.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
  </DemoGroup>

  <DemoGroup Key="Charts" Title="Charts" SeoTitle="Bootstrap Chart Controls Demo" IconCssClass="icon icon-chart" OrderIndex="2">
    <PreDescription>
      <![CDATA[
        <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/118575/charts">DevExpress Bootstrap Charts</helplink> are a set of server-side wrappers for JavaScript-based DevExtreme Chart widgets that allow you to use the familiar ASP.NET approach to integrate DevExtreme Charts into your web application. The Bootstrap Chart is a control that visualizes data from a local or remote storage using a great variety of series types along with different interactive elements, such as tooltips, crosshair pointer, a legend, etc. You can use one of these chart types depending on your task:</p>
          <ul>
            <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/118689/charts/chart-types/chart">BootstrapChart</helplink> to show data in a 2d coordinate system</li>
            <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/118691/charts/chart-types/pie-chart">BootstrapPieChart</helplink> to visualize portions of data as segments in a circle</li>
            <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/118691/charts/chart-types/pie-chart">BootstrapPolarChart</helplink> to represent data in a polar coordinate system</li>
          </ul>
      ]]>
    </PreDescription>
    <Description>
      <![CDATA[
        <p>Bootstrap Charts help you transform data to its most appropriate, concise and readable visual representation. Regardless of the data source or manner in which application information is stored on disk, Bootstrap Charts guarantee flexibility and speed in its consumption of input data as well as its ability to output/render information on screen or on the printed page.</p>
      ]]>
    </Description>
    <Demo Key="DataBinding" Title="Data Binding" SeoTitle="Bootstrap Charts Data Binding Demo">
      <DemoSection Key="DataSourceControl" Title="Data Source Controls">
        <Description>
          <![CDATA[
            <p>The Chart control can obtain data from one of ASP.NET data source controls (such as <strong>EntityDataSource</strong>) on the server side. It is the easiest way to provide large amounts of data from the database to the control, and it is the right choice if you do not need to get data from third-party sources.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="JSON" Title="JSON Files">
        <Description>
          <![CDATA[
            <p>If your server stores data in JSON, performing AJAX requests is inevitable. But instead of configuring these requests manually, assign the URL of your data storage (in this demo, a JSON file) to the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapWebClientUIWidget.DataSourceUrl">DataSourceUrl</helplink> property, and the Chart will do the rest. This URL may specify an absolute or relative path to the resource.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="JSONP" Title="JSONP">
        <Description>
          <![CDATA[
            <p>You can use a JSONP callback parameter supported by <helplink href="https://api.jquery.com/jQuery.ajax/">jQuery.ajax()</helplink> to access a web service that implements a JSONP (JSON with padding) endpoint.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Selection" Title="Selection" SeoTitle="Bootstrap Charts Selection Demo">
      <DemoSection Key="SingleSelection" Title="Single Selection">
        <Description>
          <![CDATA[
            <p>The Chart control supports selection of points and series with a mouse click. To allow selecting a single item at a time, set the Chart control's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartBase.PointSelectionMode">PointSelectionMode</helplink> (for points) or <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCoordinateSystemChart.SeriesSelectionMode">SeriesSelectionMode</helplink> (for series) property to <strong>Single</strong>.</p>
            <p>This demo illustrates the use of the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartBase.PointSelectionMode">PointSelectionMode</helplink> property and the client-side <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartClientSideEventsBase.PointClick">PointClick</helplink> event to implement single item selection in the Chart. In the <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientChartBase.PointClick">PointClick</helplink> event handler, the clicked point is accessed through the <strong>e.target</strong> property. The point is then selected using its select method. Refer to the <a href="https://js.devexpress.com/Documentation/16_2/ApiReference/Data_Visualization_Widgets/dxChart/Chart_Elements/Point/">Point</a> document for more information on the API available for a point object.</p>
          
          
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="MultipleSelection" Title="Multiple Selection">
        <Description>
          <![CDATA[
            <p>To allow multiple item selection, set the Chart control's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartBase.PointSelectionMode">PointSelectionMode</helplink> (for points) or <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCoordinateSystemChart.SeriesSelectionMode">SeriesSelectionMode</helplink> (for series) property to <strong>Multiple</strong>.</p>
            <p>This demo illustrates the use of the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCoordinateSystemChart.SeriesSelectionMode">SeriesSelectionMode</helplink> property and the client-side <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCoordinateSystemChartClientSideEvents.SeriesClick">SeriesClick</helplink> event to implement multiple item selection in the Chart. In the <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientChartBase.SeriesClick">SeriesClick</helplink> event handler, the clicked series is accessed through the <strong>e.target</strong> property. The series is then selected or unselected depending on its current state using the <strong>select</strong> and <strong>clearSelection</strong> methods. The <strong>isSelected</strong> method is used to determine whether or not the item is currently selected. Refer to the <a href="https://js.devexpress.com/Documentation/16_2/ApiReference/Data_Visualization_Widgets/dxChart/Chart_Elements/Series/">Series</a> document for more information on the API available for a series object.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Customization" Title="Customization" SeoTitle="Bootstrap Charts Customization Demo">
      <DemoSection Key="Points" Title="Points">
        <Description>
          <![CDATA[
            <p>By default, all series points in a chart are identical, but you can specify a unique appearance for individual points using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartBase.OnClientCustomizePoint">OnClientCustomizePoint</helplink> property. A client-side callback function assigned to this property should return an object containing modified point options. See the <helplink href="https://js.devexpress.com/Documentation/ApiReference/Data_Visualization_Widgets/dxChart/Configuration/series/point/">point</helplink> object for information about all options available for customization.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Series" Title="Series">
        <Description>
          <![CDATA[
            <p>To specify individual options of a particular series, assign a client-side callback function to the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartSeriesTemplateSettings.OnClientCustomizeSeries">SeriesTemplate.OnClientCustomizeSeries</helplink> property.</p>
            <p>Define a data source, set the argument and value fields using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartCommonSeriesBase.ArgumentField">CommonSeriesSettings.ArgumentField</helplink> and <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartSeries.ValueField">CommonSeriesSettings.ValueField</helplink> properties, which will apply to all series. Then, define a template for the series using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCoordinateSystemChart.SettingsSeriesTemplate">SeriesTemplate</helplink> property. Assign the data source field that specifies the series name to the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartSeriesTemplateSettings.NameField">SeriesTemplate.NameField</helplink> property.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartSeriesTemplateSettings.OnClientCustomizeSeries">OnClientCustomizeSeries</helplink> property specifies a callback function that should return a <helplink href="https://js.devexpress.com/Documentation/ApiReference/Data_Visualization_Widgets/dxChart/Configuration/series/">series</helplink> object containing customized settings of an individual series.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Axes" Title="Axes">
        <Description>
          <![CDATA[
            <p>To customize the text displayed by axis labels or the hint that appears when a user points to an axis label, assign a client-side callback function to the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartAxisLabelSettings.OnClientCustomizeText">Label.OnClientCustomizeText</helplink> or <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartAxisLabelSettings.OnClientCustomizeHint">Label.OnClientCustomizeHint</helplink> property of the required axis.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Tooltip" Title="Tooltip">
        <Description>
          <![CDATA[
            <p>To customize the appearance of a particular tooltip, use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapUIWidgetTooltipSettings.OnClientCustomizeTooltip">Tooltip.OnClientCustomizeTooltip</helplink> property. This property should be assigned a function returning an object containing customized settings. The following fields can be specified in this object.</p>
            <ul>
            <li><strong>color</strong> - Specifies the color of a tooltip.</li>
            <li><strong>text</strong> - Specifies the text displayed by a tooltip.</li>
            <li><strong>html</strong> - Specifies the HTML markup for a tooltip content. If you are going to use external resources (for example, images) in the markup, specify the size of the area they will occupy.</li>
            <li><strong>fontColor</strong> - Specifies the color of the text displayed by a tooltip.</li>
            <li><strong>borderColor</strong> - Specifies the color of the tooltip border.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="ClientSideEvents" Title="Client-Side Events" SeoTitle="Bootstrap Charts Client-Side Events Demo">
      <DemoSection Key="ClicksAndHover" Title="Clicks and Hover">
        <Description>
          <![CDATA[
            <p>The following events allow you to respond to mouse clicks on various elements of the Chart.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCoordinateSystemChartClientSideEvents.ArgumentAxisClick">ArgumentAxisClick</helplink></li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartClientSideEventsBase.LegendClick">LegendClick</helplink></li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCoordinateSystemChartClientSideEvents.SeriesClick">SeriesClick</helplink></li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartClientSideEventsBase.PointClick">PointClick</helplink></li>
            </ul>
            <p>You can handle mouse hover events for points and series of the Chart.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCoordinateSystemChartClientSideEvents.SeriesHoverChanged">SeriesHoverChanged</helplink></li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartClientSideEventsBase.PointHoverChanged">PointHoverChanged</helplink></li>
            </ul>
            <p>When implementing a handling function, use the object passed to it as its parameter. Among the fields of this object, you can find the element whose state (click, hover) has been changed.</p>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="Selection" Title="Selection">
        <Description>
          <![CDATA[
            <p>The Chart supports selection of points and series with a mouse click, to which you can respond using the following events.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCoordinateSystemChartClientSideEvents.SeriesSelectionChanged">SeriesSelectionChanged</helplink></li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartClientSideEventsBase.PointSelectionChanged">PointSelectionChanged</helplink></li>
            </ul>
            <p>When implementing a handling function, use the object passed to it as its parameter. Among the fields of this object, you can find the element whose selection has been changed.</p>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="Tooltips" Title="Tooltips">
        <Description>
          <![CDATA[
            <p>A point's tooltip appears when a user moves the mouse cursor over the point. When a tooltip appears, you can perform specific actions by handling the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartClientSideEventsBase.TooltipShown">TooltipShown</helplink> event. Additionally, when a tooltip is hidden, you can perform specific actions by handling the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartClientSideEventsBase.TooltipHidden">TooltipHidden</helplink> event. The event parameter object provides access to the series point whose tooltip has been shown/hidden.</p>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="ChartControlState" Title="Chart Control State">
        <Description>
          <![CDATA[
            <p>This demo illustrates the usage of client-side events provided by the Chart control.</p>
            <p>Handle the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapUIWidgetClientSideEventsBase.Disposing">Disposing</helplink> event to perform a custom action when the widget is being removed.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartClientSideEventsBase.Done">Done</helplink> event fires when the Series and Point chart elements are ready to be accessed.</p>
            <p>When an error or warning appears, the widget notifies you by passing a message to the browser console. This message contains the ID of the incident, a brief description, and a link to the <a href="https://js.devexpress.com/Documentation/ApiReference/Data_Visualization_Widgets/Errors_and_Warnings/">Errors and Warnings</a> document where further information about this incident can be found. However, you can handle errors and warnings the way you require. To do this, implement a client-side function performing the required actions and assign it to the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapUIWidgetClientSideEventsBase.IncidentOccurred">IncidentOccurred</helplink> event. Within this function, you have access to the information about an occurred incident. This information can be accessed from the <strong>Target</strong> field of the object passed to the callback function as a parameter. This information includes the following.<p>
            <%--BeginCollapse--%>
            <ul>
              <li><strong>id</strong> - Contains the ID of an incident. The full list of IDs can be found in the <a href="https://js.devexpress.com/Documentation/ApiReference/Data_Visualization_Widgets/Errors_and_Warnings/">Errors and Warnings</a> document.</li>
              <li><strong>type</strong> - Contains the type of an incident. This field equals <em>'error'</em> for errors or <em>'warning'</em> for warnings.</li>
              <li><strong>args</strong> - Contains the argument of an incident's message. The content of this field varies greatly, depending on the incident. For example, it may contain the name of a data source field that has not been specified correctly, or the name of an option that has not been set properly.</li>
              <li><strong>text</strong> - Contains text passed to the browser console. This text includes the content of the <strong>args</strong> field if there is any.</li>
              <li><strong>widget</strong> - Contains the name of a widget that produced the error or warning.</li>
              <li><strong>version</strong> - Contains the currently used version of the ChartJS library.</li>
            </ul>
            <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Exporting" Title="Exporting">
        <Description>
          <![CDATA[
            <p>To perform a custom action before Chart data is exported, assign a client-side function to the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapUIWidgetClientSideEventsBase.Exporting">Exporting</helplink> event. For example, you can cancel exporting using the <strong>Cancel</strong> field of the event parameter object.</p>
            <p>Assign a client-side function to the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapUIWidgetClientSideEventsBase.Exported">Exported</helplink> event if you need to perform a custom action after Chart data is exported. For example, this function can notify the user that the exporting has completed.</p>
            <p>To perform a custom action before a file with exported data is saved on the user's local storage, assign a client-side function to the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapUIWidgetClientSideEventsBase.FileSaving">FileSaving</helplink> event. Using the <strong>Cancel</strong> field of the event parameter object, you can cancel file saving.</p>
          ]]>
        </Description>
      </DemoSection>


      <DemoSection Key="Zoom" Title="Zoom">
        <Description>
          <![CDATA[
            <p>When you deal with a large amount of data, providing an efficient way of navigating this data is essential. The Chart control allows you to enable built-in scrolling and zooming. You can use the mouse wheel or the "pinch" gesture for zooming and the horizontal slide gesture across the chart (using mouse or touch interface) for scrolling. Write a handler for the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartClientSideEvents.ZoomStart">ZoomStart</helplink> (<helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartClientSideEvents.ZoomEnd">ZoomEnd</helplink>) event to perform specific operations when zooming or scrolling begins (ends).</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Export" Title="Export" SeoTitle="Bootstrap Charts Export Demo">
      <DemoSection Key="ExportingPrintingMenu" Title="Exporting/Printing Menu">
        <Description>
          <![CDATA[
            <p>This feature allows a user to print a chart displayed by the control or export it to one of the supported document formats. The control displays an "Exporting/Printing" button when exporting is enabled, which invokes a drop-down menu that lists exporting and printing commands. The following document formats are supported: PNG, PDF, JPEG, SVG and GIF.</p>
            <p>Set the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapWebClientUIWidget.Enabled">SettingsExport.Enabled</helplink> property to <strong>true</strong> to display the <strong>Export</strong> button. The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapUIWidgetExportSettings.PrintingEnabled">SettingsExport.PrintingEnabled</helplink> property allows you to specify whether or not the <strong>Export</strong> menu should contain the <strong>Print</strong> item.</p>
            <p>You can specify the name of the exported file using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapUIWidgetExportSettings.FileName">SettingsExport.FileName</helplink> property.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ExportAndPrintingAPI" Title="Export and Printing API">
        <Description>
          <![CDATA[
            <p>This demo illustrates the <strong>ExportTo</strong> and <strong>Print</strong> client API methods used to initiate exporting and printing from code using the <i>Print</i> and <i>Export</i> buttons above the Chart. Clicking the <i>Print</i> button invokes the browser's Print dialog and clicking the <i>Export</i> button saves the chart as a PNG file to your local storage.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="BarSeries" Title="Bar Series" SeoTitle="Bootstrap Charts Types Bar Series Demo">
      <DemoSection Key="StandardBar" Title="Standard Bar">
        <Description>
          <![CDATA[
            <p>This example illustrates the ease with which you can create a bar chart.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="SideBySideBar" Title="Side-by-Side Bar">
        <Description>
          <![CDATA[
            <p>This example illustrates a Side-By-Side Bar series view, in which bars are positioned side-by-side to help compare values across different categories.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="StackedBar" Title="Stacked Bar">
        <Description>
          <![CDATA[
            <p>This example illustrates a Stacked Bar series view, which, unlike the side-by-side bar series, can present both the proportion and the total value of each data category using rectangular bars stacked on top of one another.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="FullStackedBar" Title="Full Stacked Bar">
        <Description>
          <![CDATA[
            <p>This example illustrates a Full-Stacked Bar series view, which is useful to compare the percentage value of various bar series for each argument. The height of each bar always equals 100%.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="SideBySideStackedBar" Title="Side-by-Side Stacked Bar">
        <Description>
          <![CDATA[
            <p>This example shows the Side-by-Side Stacked Bar series view. This view allows you to stack series having the same Stacked property value into the same bars and combines the advantages of both the Side-by-Side Bar and Stacked Bar view types.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="SideBySideFullStackedBar" Title="Side-by-Side Full-Stacked Bar">
        <Description>
          <![CDATA[
            <p>This example shows the Side-by-Side Full-Stacked Bar series view. This view allows you to stack series having the same Stacked property value into the same bars and combines the advantages of both the Side-by-Side Bar and Full-Stacked Bar view types.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="LineSeries" Title="Line And Point Series" SeoTitle="Bootstrap Charts Types Line Point Spline Scatter Bubble Step Series Demo">
      <DemoSection Key="Line" Title="Line">
        <Description>
          <![CDATA[
            <p>This example shows the Line series view. This view is useful when you need to show line trends for several series on the same diagram and to compare the values of several series for the same points arguments.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Spline" Title="Spline">
        <Description>
          <![CDATA[
            <p>This example shows the Spline series view. This view is similar to the Line chart but plots a fitted curve through each data point in a series.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Scatter" Title="Scatter">
        <Description>
          <![CDATA[
            <p>This example shows the Scatter series view. You can use Scatter whenever you need to allow the user to draw their conclusions about information displayed within the chart.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="StepLine" Title="Step Line">
        <Description>
          <![CDATA[
            <p>This example shows the Step Line series view. This view is useful when you need to show how much values have changed for different points of the same series.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Bubble" Title="Bubble">
        <Description>
          <![CDATA[
            <p>This example shows a Bubble series view. This chart, in addition to the XY point diagram capabilities, allows you to visually represent the Weight of a series point by a bubble's size.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="FinancialSeries" Title="Financial Series" SeoTitle="Bootstrap Charts Types Financial Series Stock Candlestick Demo">
      <DemoSection Key="Stock" Title="Stock">
        <Description>
          <![CDATA[
            <p>In this example, the Stock series displays variations in stock price throughout the course of a given day.</p>
            <p>Left and right lines at each point represent the Open and Close prices, and the bottom and top values of the vertical line shown at each point represents the Low and High prices.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Candlestick" Title="Candlestick">
        <Description>
          <![CDATA[
            <p>In this example, the Candlestick series displays variations in stock price throughout the course of a given day.</p>
            <p>A filled rectangle represents the Open and Close prices, and the bottom and top values of the vertical line shown at each point represent the Low and High prices.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="AreaSeries" Title="Area Series" SeoTitle="Bootstrap Charts Types Area Series Spline Step Demo">
      <DemoSection Key="Area" Title="Area">
        <Description>
          <![CDATA[
            <p>This demo shows the Area series view. This view is useful when you need to show trends for several series on the same diagram and also demonstrate the relationship of parts to a whole.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="SplineArea" Title="Spline Area">
        <Description>
          <![CDATA[
            <p>This example shows the Spline Area series view. This view is similar to the Area chart but plots a fitted curve through each data point in a series.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="StepArea" Title="Step Area">
        <Description>
          <![CDATA[
            <p>This demo illustrates the Step Area series view, which shows how much values have changed for different points of the same series.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="RangeSeries" Title="Range Series" SeoTitle="Bootstrap Charts Types Range Series Demo">
      <DemoSection Key="RangeBar" Title="Range Bar">
        <Description>
          <![CDATA[
            <p>This example illustrates the use of the range bar series type. Range bars can be used to display value ranges corresponding to specified arguments. The data displays as sets of rectangular bars beginning and ending at a specified values.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="RangeArea" Title="Range Area">
        <Description>
          <![CDATA[
            <p>Range area series can be used to display value ranges corresponding to specified arguments. The data displays as a color-filled space between the line that joins the beginning the end series points.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="PieSeries" Title="Pie Series" SeoTitle="Bootstrap Charts Types Pie Series Demo">
      <DemoSection Key="Pie" Title="Pie">
        <Description>
          <![CDATA[
            <p>This example demonstrates the Pie Chart control, which is used to compare percentage values of different point arguments in the same series.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="PieMultipleSeries" Title="Pie with Multiple Series">
        <Description>
          <![CDATA[
            <p>This example illustrates the ability of a Pie Chart to display multiple series as nested rings.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Doughnut" Title="Doughnut">
        <Description>
          <![CDATA[
            <p>This example shows the Pie Chart in the Doughnut mode, which is similar to the default mode, but the chart displays a pie with a non-zero radius hole.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="PolarRadarCharts" Title="Polar and Radar Charts" SeoTitle="Bootstrap Charts Types Polar Radar Charts Demo">
      <DemoSection Key="ContinuousData" Title="Continuous Data">
        <Description>
          <![CDATA[
            <p>In this example, the Polar Chart control visualizes a curve that has the shape of a petalled flower. This curve is commonly known as "rose" or "rhodonea", and a line series type visualizes it.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DiscreteData" Title="Discrete Data">
        <Description>
          <![CDATA[
            <p>This example demonstrates how to visualize discrete data using the Polar Chart control. Months in the data source form discrete categories that divide the PolarChart.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="SpiderWeb" Title="Spider Web">
        <Description>
          <![CDATA[
            <p>This example displays the Spider Web mode of the Polar Chart control. In this mode, chart sectors are straight rather than circular. This mode is enabled using the UseSpiderWeb option.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="WindRose" Title="Wind Rose">
        <Description>
          <![CDATA[
            <p>This example illustrates a Wind Rose using the Polar Chart control with the StackedBar series type.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="PeriodicData" Title="Periodic Data">
        <Description>
          <![CDATA[
            <p>This example illustrates the visualization of periodic data. The Period option of the argument axis is specified to notify the chart that data is periodic.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="InvertedChart" Title="Inverted Chart">
        <Description>
          <![CDATA[
            <p>This example shows the Polar Chart with inverted axes.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="AxisFeatures" Title="Axes" SeoTitle="Multiple Value Axes Axis Breaks Scale Breaks">
      <DemoSection Key="MultipleValueAxis" Title="Multiple Value Axes">
        <Description>
          <![CDATA[
            <p>The Chart control can have several value axes associated with different series. You can specify a collection of a chart's value axes using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChart.ValueAxisCollection">BootstrapChart.ValueAxisCollection</helplink> property. Each axis in the collection is a <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartValueAxis">BootstrapChartValueAxis</helplink> object. For each axis, specify the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartCommonSeriesBase.Name">BootstrapChartCommonSeriesBase.Name</helplink> property that uniquely identifies it. The same value should be assigned to a series's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartSeriesBase.Axis">BootstrapChartSeriesBase.Axis</helplink> property to associate it with a particular value axis.
            </p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChart.ValueAxisCollection">ValueAxisCollection</helplink></li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartValueAxis._members">BootstrapChartValueAxis Members</helplink></li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChart.SeriesCollection">SeriesCollection</helplink></li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AxisBreaks" Title="Axis Breaks">
        <Description>
          <![CDATA[
            <p>If an axis's values range is huge and most values are significantly smaller than the axis maximum value, or there are intervals in your data, you can collapse the space by adding axis breaks.</p>
            <p>Note that axis breaks can only be used with continuous and logarithmic type axes.</p>
            <p>For more details, refer to the following articles:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartAxisSettings.Breaks">Breaks</helplink></li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartAxisSettingsBase.BreakStyle">BreakStyle</helplink></li>
            </ul>          
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AutoAxisBreaks" Title="Auto Axis Breaks">
        <Description>
          <![CDATA[
            <p>The Chart control can automatically detect spaces between neighboring points and collapse them using scale breaks. Use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartValueAxis.EnableAutoBreaks">EnableAutoBreaks</helplink> property to enable this functionality. Note that this property has effect only if the axis' type is continuous or logarithmic.</p>
            <p>You can limit the numer of automatically inserted breaks using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartValueAxis.MaxAutoBreakCount">BootstrapChartValueAxis.MaxAutoBreakCount</helplink> property.</p>
            <p>Refer to the following articles for more information:</p>
             <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartAxisSettings.Breaks">Breaks</helplink></li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartAxisSettingsBase.BreakStyle">BreakStyle</helplink></li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartValueAxis.EnableAutoBreaks">EnableAutoBreaks</helplink></li>
            </ul>
            
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ConstantLines" Title="Constant Lines">
        <Description>
          <![CDATA[
            <p>The Chart can display constant lines, which indicate arbitrary constant values. Constant lines extend over the entire chart and are always perpendicular to the axis to which they belong. You can add constant lines to an axis using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartAxisSettings.ConstantLineCollection">ConstantLineCollection</helplink> property. Each constant line within this collection is represented by a <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartConstantLine">BootstrapChartConstantLine</helplink> object. You can configure a constant line's visual presentation through its properties:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.ConstantLineStyle-1.Color">Color</helplink> - Specifies the constant line's color.</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.ConstantLineStyle-1.Width">Width</helplink> - Specifies the constant line's width in pixels.</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.ConstantLineStyle-1.PaddingTopBottom">PaddingTopBottom</helplink> - Generates a space between the top/bottom side of a constant line and the constant line label.</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.ConstantLineStyle-1.PaddingLeftRight">PaddingLeftRight</helplink> - Generates a space between the left/right side of a constant line and the constant line label.</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.ConstantLineStyle-1.Label">Label</helplink> - Provides access to the constant line label's settings.</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.ConstantLineStyle-1.DashStyle">DashStyle</helplink> - Specifies the constant line's dash style.</li>
            </ul>
            <p>You can also specify these settings for an argument or value axis's constant lines using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartAxisSettingsBase.ConstantLineStyle">BootstrapChartAxisSettingsBase.ConstantLineStyle</helplink> property. You can also change style of all constant lines in a chart using the <strong>BootstrapChart.SettingsCommonAxis.ConstantLineStyle</strong> property.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AxisPositions" Title="Axis Positions">
        <Description>
          <![CDATA[
            <p>The Chart allows you to specify the custom position and offset of the X and Y axes relative to each other using the following properties:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartCommonAxisSettings.CustomPosition">BootstrapChartCommonAxisSettings.CustomPosition</helplink> - Specifies the position of an axis relative to the other axis.</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartCommonAxisSettings.Offset">BootstrapChartCommonAxisSettings.Offset</helplink> - Specifies the shift of the other axis in pixels.</li>
              <!--<li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartArgumentAxis.CustomPositionAxis">BootstrapChartArgumentAxis.CustomPositionAxis</helplink> - Specifies the name of the target value axis.</li>-->
            </ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
  </DemoGroup>

  <DemoGroup Key="Scheduler" Title="Scheduler" SeoTitle="Bootstrap Scheduler Controls Demo" IconCssClass="icon icon-scheduler" OrderIndex="3">
    <PreDescription>
      <![CDATA[
        <p>
            The Bootstrap Scheduler control provides a set of comprehensive tools for embedding a scheduling capability in your web project. Different view types and built-in printing support allow delivering full-featured personal information management systems in the shortest possible time.        
        </p>
      ]]>
    </PreDescription>
    <Description>
      <![CDATA[
        <p>The Bootstrap Scheduler control provides the following features:</p>
        <ul>
          <li>Fully adaptive visual interface rendered using Bootstrap-powered markup;</li>
          <li>Day View, Work and Full Week Views, Week and Month Views, Timeline and Agenda Views;</li>
          <li>Customizable adaptive appointment edit form;</li>
          <li>Time Zones, Reminders and Resource Sharing;</li>
          <li>Grouping by date and resource </li>
          <li>Integrated standalone controls: Date and Resource Navigators, View Navigator and View Selector.</li>          
        </ul>
      ]]>
    </Description>
    <Demo Key="DataBinding" Title="Data Binding" SeoTitle="Bootstrap Scheduler Data Binding Demo">
      <DemoSection Key="AppointmentsDataBinding" Title="Appointment Data Binding">
        <Description>
          <![CDATA[
            <p>The Bootstrap Scheduler's data layer is separated into two entities - appointments and resources. An appointment represents a scheduled time interval and an end-user's plans for this time interval. The data source storing appointments can be specified using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxSchedulerDataWebControlBase.AppointmentDataSourceID">AppointmentDataSourceID</helplink> property.</p>
            <p>Specify the following data field mapping properties (available through <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxAppointmentStorage.Mappings">Storage.Appointments.Mappings</helplink>) to allow the Scheduler control to save and retrieve appointment data to/from the data source.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxAppointmentMappingInfo.AppointmentId">AppointmentId</helplink> - Specifies the data field storing appointments' unique identifiers.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxAppointmentMappingInfo.Start">Start</helplink> - Specifies the data field storing appointments' start dates and times.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxAppointmentMappingInfo.End">End</helplink> - Specifies the data field storing appointments' end dates and times.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxAppointmentMappingInfo.Description">Description</helplink> - Specifies the data field storing appointments' descriptions.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxAppointmentMappingInfo.Location">Location</helplink> - Specifies the data field storing locations where appointments are scheduled.</li>
            </ul>
            <p>An end-user can navigate through dates using two arrow buttons and the <strong>Today</strong> button displayed at the top-left corner of the Scheduler.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="StatusesAndLabels" Title="Statuses and Labels">
        <Description>
          <![CDATA[
            <p>An appointment's identification label and availability status are an appointment's basic visual characteristics. They are used for at-a-glance appointment identification.</p>
            <ul>
              <li>An <strong>identification label</strong> is displayed in a background color which is used to fill the client region of the rectangle that is occupied by the appointment.</li>
              <li>The <strong>availability status</strong> is indicated by a strip displayed on the left side of the appointment. The strip is colored depending upon the availability status's type.</li>
            </ul>
            <p>Specify the following data field mapping properties (available through <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxAppointmentStorage.Mappings">Storage.Appointments.Mappings</helplink>) to allow the Scheduler control to save and retrieve labels' and statuses' information to/from the data source.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxAppointmentMappingInfo.Label">Label</helplink> - Specifies the data field storing appointments' statuses.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxAppointmentMappingInfo.Status">Status</helplink> - Specifies the data field storing appointments' labels.</li>
            </ul>
            <p>You can customize settings for labels and statuses using the following properties available through <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapScheduler.Storage">Storage</helplink>:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAppointmentStorage.Labels">Appointment.Labels</helplink> - Specifies the collection of available appointment labels. An individual label is represented by a <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAppointmentLabel">BootstrapAppointmentLabel</helplink> object.</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAppointmentStorage.Statuses">Appointment.Statuses</helplink> - Specifies the collection of available appointment statuses. An individual status is represented by a <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAppointmentStatus">BootstrapAppointmentStatus</helplink> object.</li>
            </ul>  
            <p>The default appearance of statuses and labels can be changed using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSchedulerOptionsAppearance.DefaultAppointmentColorsMode">OptionsAppearance.DefaultAppointmentColorsMode</helplink> property. This property allows the following values:</p>
            <ul>
              <li><strong>Bootstrap</strong> - Contextual colors provided by Bootstrap are used. This value is used by default.</li>
              <li><strong>Internal</strong> - Colors provided by DevExpress are used.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="RecurenceInfo" Title="Recurence Info">
        <Description>
          <![CDATA[
            <p>A recurring appointment is an appointment configured to occur on multiple dates in the same time interval. Whether an appointment is recurring is specified by the <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraScheduler.Appointment.IsRecurring">Appointment.IsRecurring</helplink> property.</p>
            <p>Specify the following data field mapping properties (available through <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxAppointmentStorage.Mappings">Storage.Appointments.Mappings</helplink>) to allow the Scheduler control to save and retrieve appointment recurrence information to/from the data source.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxAppointmentMappingInfo.Type">Type</helplink> - Specifies the data field storing appointments' types (normal or recurring).</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxAppointmentMappingInfo.RecurrenceInfo">RecurrenceInfo</helplink> - Specifies the data field storing appointments' recurrence rules.</li>
            </ul>
            <p>An end-user can navigate through currently visible resources, as well as increase or decrease their total number using the <strong>Resource Navigator</strong> control (toolbar buttons with arrows, plus and minus signs, and a drop-down list of resources) which is shown on the top of the Bootstrap Scheduler control.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ResourcesDataBinding" Title="Resource Data Binding">
        <Description>
          <![CDATA[
            <p>In real-life scheduling applications, appointments are seldom processed simply "as is", but usually are assigned to different resources. The decision as to what should be a resource in a particular scheduling application depends upon the specifics of the task solved by the application. The resource data source can be specified using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxSchedulerDataWebControlBase.ResourceDataSourceID">ResourceDataSourceID</helplink> property.</p>
            <p>Specify the following data field mapping properties (available through <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxResourceStorage.Mappings">Storage.Resources.Mappings</helplink>) to allow the Scheduler control to save and retrieve resource data to/from the data source.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxResourceMappingInfo.ResourceId">ResourceId</helplink> - Specifies the data field storing resources' unique identifiers.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxResourceMappingInfo.Caption">Caption</helplink> - Specifies the data field storing resources' captions.</li>
            </ul>
            <p>Additionally, specify the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxResourceMappingInfo.ResourceId">Storage.Appointments.Mappings.ResourceId</helplink> property to store appointments' associated resource.</p>
            <p>Setting the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSchedulerOptionsAppearance.UseResourceColorSchemas">OptionsAppearance.UseResourceColorSchemas</helplink> property to <strong>true</strong> allows you to use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSchedulerOptionsAppearance.ResourceColorSchemas">OptionsAppearance.ResourceColorSchemas</helplink> color collection to specify colors of time cells for different resources.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="FetchAppointments" Title="Fetch Appointments">
        <Description>
          <![CDATA[
            <p>This demo demonstrates how you can use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxSchedulerDataWebControlBase.FetchAppointments">FetchAppointments</helplink> event to speed up appointment loading by loading appointments for the currently displayed time interval only.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxSchedulerDataWebControlBase.FetchAppointments">FetchAppointments</helplink> event occurs before the scheduler starts retrieving appointments from the data storage.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="ViewTypes" Title="View Types" SeoTitle="Bootstrap Scheduler View Types Demo">
      <DemoSection Key="DayView" Title="Day View">
        <Description>
          <![CDATA[
            <p>This demo illustrates the Bootstrap Scheduler control's <strong>Day View</strong>, which provides the most detailed view of appointments for a particular day.</p> 
            <p>Use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSchedulerViewRepository.DayView">Views.DayView</helplink> property to configure the Day View's basic functionality. This property provides access to the following settings:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.DayView.DayCount">DayCount</helplink> - Gets or sets the number of days that are simultaneously displayed within the Day View.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.DayView.ShowAllDayArea">ShowAllDayArea</helplink> - Gets or sets a value which specifies if the All-Day Area is shown when a Scheduler shows its data in the Day view.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.DayView.ShowDayHeaders">ShowDayHeaders</helplink> - Gets or sets a value which specifies if day headers are shown when a scheduler shows its data in the Day view.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.DayView.ShowWorkTimeOnly">ShowWorkTimeOnly</helplink> -  Gets or sets a value indicating if the scheduler should show its data only for the working hours in the Day View.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.DayView.WorkTime">WorkTime</helplink> - Gets or sets the work time interval for the Day View.</li>
            </ul>

            <p>Use the <helplink href="https://docs.devexpress.com/WindowsForms/DevExpress.XtraScheduler.SchedulerControl.ActiveViewType">ActiveViewType</helplink> property to change the active view.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="WorkWeekView" Title="Work Week View">
        <Description>
          <![CDATA[
            <p>This demo illustrates the Bootstrap Scheduler control's <strong>Work Week View</strong>, which displays appointments for working days in a particular week.</p>
            <p>Use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSchedulerViewRepository.WorkWeekView">Views.WorkWeekView</helplink> property to configure the Work Week View's basic functionality. This property provides access to the following settings:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.DayView.DayCount">DayCount</helplink> - Gets or sets the number of days that are simultaneously displayed within the view. </li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.DayView.ShowAllDayArea">ShowAllDayArea</helplink> - Gets or sets a value which specifies if the All-Day Area is shown when a Scheduler shows its data in the view. </li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.DayView.ShowDayHeaders">ShowDayHeaders</helplink> - Gets or sets a value which specifies if day headers are shown when a scheduler shows its data in the Work-Week view. </li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.DayView.ShowWorkTimeOnly">ShowWorkTimeOnly</helplink> - Gets or sets a value indicating if the scheduler should show its data only for the working hours in the view. </li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.DayView.WorkTime">WorkTime</helplink> - Gets or sets the work time interval for the view.</li>
            </ul>

            <p>Use the <helplink href="https://docs.devexpress.com/WindowsForms/DevExpress.XtraScheduler.SchedulerControl.ActiveViewType">ActiveViewType</helplink> property to change the active view.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="FullWeekView" Title="Full Week View">
        <Description>
          <![CDATA[
            <p>This demo illustrates the Bootstrap Scheduler control's <strong>Full Week View</strong>, which displays appointments for a specified week.</p>            
            <p>Use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSchedulerViewRepository.FullWeekView">Views.FullWeekView</helplink> property to configure the Full Week View's basic functionality. This property provides access to the following settings:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.DayView.AppointmentDisplayOptions">AppointmentDisplayOptions</helplink> - Provides access to the options specifying how appointments are displayed in the view.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.DayView.ShowAllDayArea">ShowAllDayArea</helplink> - Gets or sets a value which specifies if the All-Day Area is shown when a Scheduler shows its data in the view. </li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.DayView.ShowDayHeaders">ShowDayHeaders</helplink> - Gets or sets a value which specifies if day headers are shown when a scheduler shows its data in the Work-Week view. </li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.DayView.ShowWorkTimeOnly">ShowWorkTimeOnly</helplink> - Gets or sets a value indicating if the scheduler should show its data only for the working hours in the view. </li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.DayView.WorkTime">WorkTime</helplink> - Gets or sets the work time interval for the view.</li>
            </ul>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler.FirstDayOfWeek">BootstrapScheduler.FirstDayOfWeek</helplink> property gets the day from which the Scheduler's week starts.</p>
            <p>Use the <helplink href="https://docs.devexpress.com/WindowsForms/DevExpress.XtraScheduler.SchedulerControl.ActiveViewType">ActiveViewType</helplink> property to change the active view.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="WeekView" Title="Week View">
        <Description>
          <![CDATA[
            <p>This demo illustrates the Bootstrap Scheduler control's <strong>Week View</strong>, which displays appointments for the specified weekly period.</p>            
            <p>Use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSchedulerViewRepository.WeekView">Views.WeekView</helplink> property to configure the Week View's basic functionality. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.WeekView.AppointmentDisplayOptions">Views.WeekView.AppointmentDisplayOptions</helplink> property provides access to the options specifying how appointments are displayed in the view.</p>
            <p>Use the <helplink href="https://docs.devexpress.com/WindowsForms/DevExpress.XtraScheduler.SchedulerControl.ActiveViewType">ActiveViewType</helplink> property to change the active view.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="MonthView" Title="Month View">
        <Description>
          <![CDATA[
            <p>This demo illustrates the Bootstrap Scheduler control's <strong>Month View</strong>, which is the least detailed view designed to provide your end-users with an appointments overview.</p>            
            <p>Use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSchedulerViewRepository.MonthView">Views.MonthView</helplink> property to configure the Month View's basic functionality. This property provides access to the following settings:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.MonthView.AppointmentDisplayOptions">AppointmentDisplayOptions</helplink> - Provides access to the options specifying how appointments are displayed in the view.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.MonthView.CompressWeekend">CompressWeekend</helplink> - Gets or sets a value indicating if the weekend days (Saturday and Sunday) should be displayed as one day.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.MonthView.ShowWeekend">ShowWeekend</helplink> - Gets or sets a value indicating if the scheduler should also show its data for the weekend days (Saturday and Sunday) in the Month View.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.MonthView.WeekCount">WeekCount</helplink> - Gets or sets the number of weeks that are simultaneously displayed within the Week View.</li>
            </ul>
            <p>Use the <helplink href="https://docs.devexpress.com/WindowsForms/DevExpress.XtraScheduler.SchedulerControl.ActiveViewType">ActiveViewType</helplink> property to change the active view.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="TimelineView" Title="Timeline View">
        <Description>
          <![CDATA[
            <p>This demo illustrates the Bootstrap Scheduler control's <strong>Timeline View</strong>, which displays appointments as horizontal bars along the timescales, and provides end-users with a clearer overview for scheduling purposes.</p>            
            <p>Use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSchedulerViewRepository.TimelineView">Views.TimelineView</helplink> property to configure the Timeline View's basic functionality. This property provides access to the following settings:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.TimelineView.AppointmentDisplayOptions">AppointmentDisplayOptions</helplink> - Provides access to the options specifying how appointments are displayed in the view.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.TimelineView.WorkTime">WorkTime</helplink> - Gets or sets the work time interval for the Timeline View.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.TimelineView.CellAutoHeightOptions">CellAutoHeightOptions</helplink> - Provides access to options for specifying cell auto height behavior.</li>
            </ul>
            <p>Use the <helplink href="https://docs.devexpress.com/WindowsForms/DevExpress.XtraScheduler.SchedulerControl.ActiveViewType">ActiveViewType</helplink> property to change the active view.</p>  
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AgendaView" Title="Agenda View">
        <Description>
          <![CDATA[
            <p>This demo illustrates the Bootstrap Scheduler control's <strong>Agenda View</strong>, which lists individual days' appointments chronologically. You can navigate through dates using the two arrow buttons at the Scheduler's top-left corner. If you want to see the current day's appointments, click the <strong>Today</strong> button.</p>            
            <p>Use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSchedulerViewRepository.AgendaView">Views.AgendaView</helplink> property to configure the Agenda View's basic functionality. This property provides access to the following settings: </p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.AgendaView.AppointmentDisplayOptions">AppointmentDisplayOptions</helplink> - Provides access to the options specifying how appointments are displayed in the view.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.AgendaView.DayCount">DayCount</helplink> - Specifies the number of days that can be displayed simultaneously within the Agenda View.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.AgendaView.DayHeaderOrientation">DayHeaderOrientation</helplink> - Gets or sets a value that specifies a day header's orientation.</li>
            </ul>
            <p>Use the <helplink href="https://docs.devexpress.com/WindowsForms/DevExpress.XtraScheduler.SchedulerControl.ActiveViewType">ActiveViewType</helplink> property to change the active view.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Grouping" Title="Grouping" SeoTitle="Bootstrap Scheduler Grouping Demo">
      <DemoSection Key="GroupByDate" Title="Group by Date">
        <Description>
          <![CDATA[
            <p>This demo illustrates how to group scheduled appointments by date. When appointments are grouped by date and the Scheduler control displays multiple dates and resources, resource headers are grouped under date headers. To group appointments by date, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler.GroupType">GroupType</helplink> property to <strong>Date</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="GroupByResource" Title="Group by Resource">
        <Description>
          <![CDATA[
            <p>This demo illustrates how to group scheduled appointments by resources. When appointments are grouped by resource and the Scheduler control displays multiple dates and resources, date headers are grouped under resource headers. To group appointments by resource, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler.GroupType">GroupType</helplink> property to <strong>Resource</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="NoGrouping" Title="No Grouping">
        <Description>
          <![CDATA[
            <p>This demo illustrates how the Scheduler looks without grouping. When appointments are not grouped, date columns display appointments for all resources simultaneously.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Customization" Title="Customization" SeoTitle="Bootstrap Scheduler Customization Demo">
      <DemoSection Key="CustomEditForm" Title="Custom Edit Form">
        <Description>
          <![CDATA[
            <p>This demo illustrates how to change the Bootstrap Scheduler control UI. You can access the customization options for various dialogs using the OptionsDialogs property. In this demo, the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSchedulerDialogsSettings.AppointmentDialog">OptionsDialogs.AppointmentDialog</helplink> is used to customize the Edit Appointment form.</p>
            <p>Create a new appointment or right-click on any existing appointment and choose the <strong>Open</strong> item, to see a custom <strong>Edit Appointment</strong> form in place of the standard form. This form not only allows you to edit standard appointment properties, but also the ones obtained via custom mappings.</p>
            <p>Note that data field mappings should be specified before the <strong>GenerateDefaultLayoutElements</strong> method is called since only mapped appointment fields are generated by default.</p>
          ]]>
        </Description>
        <SourceFile>~/App_Code/Scheduler/CustomAppointmentEditDialogViewModel.cs</SourceFile>
      </DemoSection>
      <DemoSection Key="CustomAppointments" Title="Custom Appointments">
        <Description>
          <![CDATA[
            <p>This demo illustrates how to customize appointments' appearance. In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler.InitAppointmentDisplayText">InitAppointmentDisplayText</helplink> event is handled to apply custom formating to appointments' displayed texts. Additionally, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler.InitAppointmentImages">InitAppointmentImages</helplink> event is used to display custom images based on appointment properties.</p>
          ]]>
        </Description>
        <SourceFile>~/App_Code/Scheduler/CustomAppointmentsHelper.cs</SourceFile>
      </DemoSection>
      <DemoSection Key="CustomContextMenu" Title="Custom Context Menu">
        <Description>
          <![CDATA[
            <p>This demo illustrates how to customize a popup menu - a menu, invoked by right-clicking the Scheduler control or via the smart tag.</p>
            <p>In this example, default scheduler menu items are replaced with custom ones. Instead of commands that enable you to create a new appointment or change its label and status, the popup menu contains submenu items that allow the creation of predefined events.</p>
            <p>To achieve this, handle the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapScheduler.PopupMenuShowing">PopupMenuShowing</helplink> event. It provides access to a <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSchedulerPopupMenu">BootstrapSchedulerPopupMenu</helplink> class instance, which represents the popup menu being displayed, and contains methods for modifying menu items and structure.</p>
          ]]>
        </Description>
        <SourceFile>~/App_Code/Scheduler/CustomMenuHelper.cs</SourceFile>
      </DemoSection>
    </Demo>
    <Demo Key="StandAloneControls" Title="Stand-Alone Controls" SeoTitle="Bootstrap Scheduler Stand-Alone Controls Demo">
      <DemoSection Key="DateNavigator" Title="Date Navigator">
        <Description>
          <![CDATA[
            <p>This demo illustrates how to use the <strong>BootstrapSchedulerDateNavigator</strong> control to select the visible date interval.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxSchedulerRelatedControlBase.MasterControlID">MasterControlID</helplink> property is used to associate the stand-alone Date Navigator control with a scheduler. The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSchedulerDateNavigator.Properties">Properties</helplink> property provides access to the Date Navigator control's basic settings.</p>        
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ResourceNavigator" Title="Resource Navigator">
        <Description>
          <![CDATA[
            <p>This demo illustrates how to use the <strong>BootstrapSchedulerResourceNavigator</strong> control to select the visible resources.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxSchedulerRelatedControlBase.MasterControlID">MasterControlID</helplink> property is used to associate the stand-alone Resource Navigator control with a scheduler.</p>
            <p>The resource navigator control supports two modes - pager and tokens. You can specify the desired mode using the master scheduler's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSchedulerResourceNavigator.Mode">OptionsResourceNavigator.Mode</helplink> property.</p>
            <p>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ResourceNavigatorPropertiesBase.SettingsPager">SettingsPager</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ResourceNavigatorPropertiesBase.SettingsTokens">SettingsTokens</helplink> properties to configure the Resource Navigator's display settings.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ViewNavigator" Title="View Navigator">
        <Description>
          <![CDATA[
            <p>This demo illustrates how to use the <strong>BootstrapSchedulerViewNavigator</strong> control to navigate between the current view's pages.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxSchedulerRelatedControlBase.MasterControlID">MasterControlID</helplink> property is used to associate the stand-alone View Navigator control with a scheduler.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ViewSelector" Title="View Selector">
        <Description>
          <![CDATA[
            <p>This demo illustrates how to use the <strong>BootstrapSchedulerViewSelector</strong> control to change the active view.</p>
            <p>the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxSchedulerRelatedControlBase.MasterControlID">MasterControlID</helplink> property is used to connect the standalone view selector control to a scheduler control. The selectors buttons can be arranged vertically by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxViewSelector.ButtonsRepeatDirection">ButtonsRepeatDirection</helplink> property value to <strong>Vertical</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Exporting" Title="Exporting" SeoTitle="Bootstrap Scheduler Exporting Demo">
      <DemoSection Key="iCalendarExport" Title="iCalendar Export">
        <Description>
          <![CDATA[
            <p>This example demonstrates the Bootstrap Scheduler's support for the iCalendar data exchange format. It facilitates data transfer between applications that use Scheduler and other applications, such as Apple iCal, Google Calendar, Microsoft Exchange Server, Microsoft Office Outlook 2007, Novell GroupWise, Windows Calendar.</p>
            <p>In this demo, you can save appointments into an iCalendar file with the .ics extension on the client host. This example creates an iCalendarExporter class instance and calls its Export method to save data to a memory stream. Then it is written to an output stream of an HttpResponse object.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="iCalendarImport" Title="iCalendar Import">
        <Description>
          <![CDATA[
            <p>This example demonstrates the Bootstrap Scheduler's support for the iCalendar data exchange format. It facilitates data transfer between applications that use Scheduler and other applications, such as Apple iCal, Google Calendar, Microsoft Exchange Server, Microsoft Office Outlook 2007, Novell GroupWise, Windows Calendar.</p>
            <p>In this demo, you can load appointments from the iCalendar file. This example loads file data into a memory stream, creates an iCalendarImporter class instance and calls its Import method to load data into a scheduler. You can check the corresponding box to clear scheduler appointments before import.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Reporting" Title="Reporting" SeoTitle="Bootstrap Scheduler Reporting Demo">
      <DemoSection Key="DailyStyle" Title="Daily Style">
        <Description>
          <![CDATA[
            <p>This demo illustrates how to create a report which corresponds to the Day View of the Bootstrap Scheduler, and mimics the Daily print style. For more information, refer to <helplink href="https://docs.devexpress.com/AspNetBootstrap/120493/Scheduler/Reporting">Reporting</helplink>.</p>
          ]]>
        </Description>
        <SourceFile>~/Scheduler/UserControls/ReportPreview.ascx</SourceFile>
        <SourceFile>~/Scheduler/UserControls/ReportPreview.ascx.cs</SourceFile>
      </DemoSection>
      <DemoSection Key="WeeklyStyle" Title="Weekly Style">
        <Description>
          <![CDATA[
            <p>This demo illustrates how to create a report which corresponds to the Week View of the Bootstrap Scheduler and mimics the Weekly Top to Bottom print style. For more information, refer to <helplink href="https://docs.devexpress.com/AspNetBootstrap/120493/Scheduler/Reporting">Reporting</helplink>.</p>
          ]]>
        </Description>
        <SourceFile>~/Scheduler/UserControls/ReportPreview.ascx</SourceFile>
        <SourceFile>~/Scheduler/UserControls/ReportPreview.ascx.cs</SourceFile>
      </DemoSection>
      <DemoSection Key="MonthlyStyle" Title="Monthly Style">
        <Description>
          <![CDATA[
            <p>This demo illustrates how to create a report which corresponds to the Month View of the Scheduler and mimics the Monthly print style. For more information, refer to <helplink href="https://docs.devexpress.com/AspNetBootstrap/120493/Scheduler/Reporting">Reporting</helplink>.</p>
          ]]>
        </Description>
        <SourceFile>~/Scheduler/UserControls/ReportPreview.ascx</SourceFile>
        <SourceFile>~/Scheduler/UserControls/ReportPreview.ascx.cs</SourceFile>
      </DemoSection>
    </Demo>
    <Demo Key="Adaptivity" Title="Adaptivity" SeoTitle="Bootstrap Scheduler Adaptivity Demo">
      <DemoSection Key="AdaptiveLayout" Title="Adaptive Layout">
        <Description>
          <![CDATA[
            <p>The Bootstrap Scheduler allows you to build adaptive layouts in Adaptivity mode, which you can enable by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxSchedulerOptionsAdaptivity.Enabled">OptionsAdaptivity.Enabled</helplink> property to <strong>true</strong>. In this mode, the control can automatically resize its elements when the browser window is resized. In this case, the scheduler's content is reordered in the following ways for different views:</p>
              <ul>
                <li><strong>Agenda View</strong> - Moves the date section above its appointments list, narrows the time section and moves the resources to the appointment's subject.</li>
                <li><strong>Timeline View</strong> - Narrows day headers and appointment sections.</li>
                <li><strong>Work Week View</strong> - Narrows date headers.</li>
                <li><strong>Month View</strong> - Narrows appointments.</li>
                <li><strong>Day View</strong> - Narrows date headers, days' appointment sections.</li>
              </ul>          
            <p>The toolbar hides its view selector items in the drop-down list and displays the ellipse button when the browser window's width changes. The View's visible interval format is also modified to make it more compact.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Miscellaneous" Title="Miscellaneous" SeoTitle="Bootstrap Scheduler Miscellaneous Features Demo">
      <DemoSection Key="TimeZones" Title="Time Zones">
        <Description>
          <![CDATA[
            <p>This demo illustrates multiple time rulers, which are simultaneously shown in the active view. A view's rulers can be accessed through its <strong>TimeRulers</strong> collection. Each ruler is an object of the <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraScheduler.TimeRuler">TimeRuler</helplink> class.
            </p>
            <p>In this demo, each time ruler shows its time using a specific time zone:</p>
            <ul>
              <li>The first time ruler uses GMT (Greenwich Mean Time).</li>
              <li>The second time ruler uses server time.</li>
              <li>The third time ruler uses client time, which can be changed in the drop-down box at the top of this page.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Reminders" Title="Reminders">
        <Description>
          <![CDATA[
            <p>This demo illustrates how easy it is to set up a reminder in the Scheduler Suite. Reminders are used to send alerts at specified time periods before an appointment's start time. If an appointment has a reminder, it displays a corresponding image. Click "Create Appointment with reminder" button to create an appointment with a reminder due in 5 minutes time. Then, a reminder alert window will be invoked to provide a notification about the event.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ResourceSharing" Title="Resource Sharing">
        <Description>
          <![CDATA[
            <p>This example demonstrates how to share resources between appointments to create multi-resource appointments. To assign any appointment to several resources, open the Edit Appointment form and select the required resources in the drop-down list.</p>
            <p>Resource sharing is not enabled by default. To use this feature you should set the <strong>ResourceSharing</strong> property to <strong>true</strong>. Make sure that your data table structure is appropriate for resource sharing, since the mapped <strong>ResourceID</strong> field will hold xml string data.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="FloatingActionButton" Title="Floating Action Button">
        <Description>
          <![CDATA[
            <p>The DevExpress Bootstrap <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFloatingActionButton">Floating Action Button</helplink> is a button that appears in front of a container (HTML element or control) when users interact with the container's elements.</p>
			<p>The following types of floating action buttons are available:</p>
			<ul>
				<li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFABAction">Action</helplink> - Executes the action once users click the floating action button.</li>
				<li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFABActionGroup">Action Group</helplink> - The floating action button serves as a container for multiple actions (action items). When pressed, the floating action button expands nested actions.</li>
			</ul>
			<p>This demo adds an action group to a scheduler control. Once a user clicks the action group, two action buttons (<strong>Month View</strong> and <strong>Day View</strong>) appear. The JS code-behind file handles the button clicks and performs appropriate actions against the underlying control.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Templates" Title="Templates" SeoTitle="Bootstrap Scheduler Templates Demo">
      <DemoSection Key="AppointmentTemplate" Title="Appointment Template">
        <Description>
          <![CDATA[
            <p>This demo illustrates how to customize the appearance of appointments by providing custom templates. The templates to modify are: <strong>VerticalAppointmentTemplate</strong> for Day, Full Week and Work Week views, <strong>HorizontalAppointmentTemplate</strong> and <strong>HorizontalSameDayAppointmentTemplate</strong> for the Month view, <strong>HorizontalAppointmentTemplate</strong> for the Timeline view.</p>
            <p>In this demo, switch views to observe changes in appointment appearance.</p>
          ]]>
        </Description>
        <SourceFile>~/Scheduler/UserControls/VerticalAppointment.ascx</SourceFile>
        <SourceFile>~/Scheduler/UserControls/VerticalAppointment.ascx.cs</SourceFile>
        <SourceFile>~/Scheduler/UserControls/HorizontalAppointment.ascx</SourceFile>
        <SourceFile>~/Scheduler/UserControls/HorizontalAppointment.ascx.cs</SourceFile>
        <SourceFile>~/Scheduler/UserControls/HorizontalAlldayAreaAppointment.ascx</SourceFile>
        <SourceFile>~/Scheduler/UserControls/HorizontalAlldayAreaAppointment.ascx.cs</SourceFile>
        <SourceFile>~/Scheduler/UserControls/HorizontalSameDayAppointment.ascx</SourceFile>
        <SourceFile>~/Scheduler/UserControls/HorizontalSameDayAppointment.ascx.cs</SourceFile>
      </DemoSection>
      <DemoSection Key="DateHeaderTemplate" Title="Date Header Template">
        <Description>
          <![CDATA[
            <p>This demo illustrates how to customize headers shown for every date in a Day View by providing a custom <strong>DateHeaderTemplate</strong>.</p>
            <p>In this demo, pay your attention to date headers, which appearance is different from the default one.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ResourceHeaderTemplate" Title="Resource Header Template">
        <Description>
          <![CDATA[
            <p>This demo illustrates how to customize headers shown for every resource by providing a custom template (either <strong>HorizontalResourceHeaderTemplate</strong> or <strong>VerticalResourceHeaderTemplate</strong>).</p>
            <p>In this demo, resource headers display photos associated with every resource.</p>
            <p>Try to change group modes (either <strong>by date</strong> or <strong>by resource</strong>), or the current view (<strong>Day</strong>, <strong>Work Week</strong>, etc.) to see how resource headers look like.</p>
          ]]>
        </Description>
        <SourceFile>~/Scheduler/UserControls/ResourceHeader.ascx</SourceFile>
        <SourceFile>~/Scheduler/UserControls/ResourceHeader.ascx.cs</SourceFile>
      </DemoSection>
    </Demo>
    <Demo Key="ClientSideAPI" Title="Client-Side API" SeoTitle="Bootstrap Scheduler Client-Side API Demo">
      <DemoSection Key="ClientSideEvents" Title="Client-Side Events">
        <Description>
          <![CDATA[
            <p>This Demo illustrates the capabilities of the Bootstrap Scheduler control's client events. This demo allows you to specify which client-side events you want to track. Interact with the Scheduler interface, and information about all tracked events raised in response of your actions will be displayed in the event log.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AppointmentSelectionAPI" Title="Appointment Selection API">
        <Description>
          <![CDATA[
            <p>This demo illustrates how to take advantage of the Bootstrap Scheduler's client-side scripting to obtain information about the selected appointment.</p>
            <p>In this example, the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientScheduler.AppointmentsSelectionChanged">AppointmentSelectionChanged</helplink> client-side scripting event is handled. It is raised every time an end-user selects an appointment. The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientScheduler.GetAppointmentProperties(aptId-propertyNames-onCallBack)">GetAppointmentProperties</helplink> method is used to make an asynchronous callback for appointment property values. This method uses the list of appointment properties and the function handler as input parameters. The function will receive property values when they are delivered.</p>
            <p>After the values are passed to the specified function, it formats and displays them.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ActiveViewChangingAPI" Title="Active View Changing API">
        <Description>
          <![CDATA[
            <p>This demo illustrates how to take advantage of the Bootstrap Scheduler's client-side scripting when switching active views.</p>
            <p>In this demo, you're able to switch an active view by selecting it in the combo box. To perform this, the code uses the Bootstrap Scheduler client-side API.</p>
            <p>When a view type is selected in the drop-down list, the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientScheduler.SetActiveViewType(value)">SetActiveViewType</helplink> client-side method is called to change the active view.<p>
            <p>Two client-side events are handled when the active view type is being modified. The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientScheduler.ActiveViewChanging">ActiveViewChanging</helplink> event handler asks the user for a confirmation of changing the scheduler's view type, and if the answer is negative, cancels the operation. After the active view type is changed, the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientScheduler.ActiveViewChanged">ActiveViewChanged</helplink> event occurs. It uses the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientScheduler.GetActiveViewType">GetActiveViewType</helplink> client-side method to indicate the currently active view for updating the combo box content.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
  </DemoGroup>

  <DemoGroup Key="Spreadsheet" Title="Spreadsheet" SeoTitle="Bootstrap Spreadsheet Control Demo" IconCssClass="icon icon-spreadsheet" OrderIndex="4">
    <PreDescription>
      <![CDATA[
        <p>
            The Bootstrap Spreadsheet is an Excel-inspired control that allows you to introduce spreadsheet functionality to an ASP.NET application. It provides a rich UI and comprehensive API to create, manage and convert spreadsheet files. Your application does not require Microsoft Excel to be installed on user or developer machines.
        </p>
      ]]>
    </PreDescription>
    <Description>
      <![CDATA[
        <p>The Bootstrap Spreadsheet control provides the following features.</p>
		<ul>
			<li>A fully adaptive visual interface rendered using Bootstrap-powered markup</li>
			<li>The ability to insert pictures into worksheets</li>
			<li>The ability to insert and calculate formulas in a manner similar to Microsoft Excel</li>
			<li>The ability to insert professional-looking charts that make it easier to understand large quantities of data by visualizing the relationship between different data series </li>
			<li>The of use of Excel inspired comments - additional informational texts for individual cells</li>
		</ul>
      ]]>
    </Description>
    <Demo Key="Images" Title="Images" SeoTitle="Bootstrap Spreadsheet Images Demo">
      <DemoSection Key="Images" Title="Images">
        <Description>
          <![CDATA[
                <p>The Bootstrap Spreadsheet allows you to insert pictures into worksheets. To insert a picture:</p>
				<ol>
					<li>Select the cell where you wish to place the picture.</li>
					<li>Click on the <strong>Picture</strong> item within the user interface ribbon's <strong>Insert</strong> tab.</li>
					<li>Select the required picture to be inserted. The pictures may be located on your computer or on the web. You can also move, transform and delete pictures in a worksheet.</li>
				</ol>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Formulas" Title="Formulas" SeoTitle="Bootstrap Spreadsheet Formulas Demo">
      <DemoSection Key="Formulas" Title="Formulas">
        <Description>
          <![CDATA[
                <p>Formulas are one of the most commonly used features of spreadsheets. With the Bootstrap Spreadsheet, you can easily insert and calculate formulas in a manner similar to Microsoft Excel.</p>
				<p>A formula is a string expression that begins with an equal (<strong>=</strong>) sign. It can contain constants, operators, cell references, functions and names.</p>
				<p>The Bootstrap Spreadsheet's built-in functions cover a wide range of categories - from basic mathematical operations such as simple addition and subtraction, to complex engineering and statistical calculations. This can meet even the most demanding requirements. The function categories provided include:</p>
				<ul>
					<li>Financial</li>
					<li>Statistical</li>
					<li>Engineering</li>
					<li>Logical</li>
					<li>Text</li>
					<li>Date &amp; Time</li>
					<li>Lookup &amp; Reference</li>
					<li>Math &amp; Trig</li>
					<li>Informational</li>
				</ul>
				<%--BeginCollapse--%>
				<p>The built-in functions are listed within an Excel-like <strong>Formulas</strong> tab in the Spreadsheet's automatically generated ribbon. In this tab, functions are divided into groups for easy access.</p>
				<p>A formula can contain references to other cells or cell ranges within the same or different worksheets. The following references are supported:</p>
				<ul>
					<li>Relative, Absolute and Mixed References</li>
					<li>Cross-Worksheet References</li>
					<li>3D References</li>
					<li>Structured References</li>
					<li>External References</li>
				</ul>
				<p>Note: The Formula AutoComplete feature makes it easier to create and edit formulas and minimizes typing and syntax errors. After typing an equal sign (=) and beginning letters into a cell, a dynamic drop-down list of valid functions that match the letters is displayed below the cell. For a function selected within the list, a text tooltip with function information is displayed. This helps choosing the right function. To insert the selected item into the formula and put the insertion point directly after it, press <strong>Tab</strong> or double-click the item.</p>
				<%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Charting" Title="Charting" SeoTitle="Bootstrap Spreadsheet Charting Demo">
      <DemoSection Key="Charting" Title="Charting">
        <Description>
          <![CDATA[
                <p>Charts are used in spreadsheets to make it easier to understand large quantities of data by visualizing the relationship between different data series.</p>
				<p>The Bootstrap Spreadsheet allows you to easily insert a professional-looking chart that displays the details you require. A comprehensive set of 2D and 3D charts is provided to address a broad range of business needs with ease.</p>
				<p>To create a chart, select a series of data within a worksheet and click on the required chart type within the user interface <strong>Insert</strong> tab.</p>
				<p>The data can be arranged in rows or columns - the Spreadsheet automatically determines the best way to plot the data on the chart.</p>
				<p>You can move a chart to any location on a worksheet by dragging it. You can also change the size of the chart for a better fit. By using a chart's context menu you can easily change the main chart characteristics (such as the chart type, underlying data, layout, styles, and etc.).</p>
				<p>In this demo, two charts - of the pie and bar types - are created to visualize information presented in the tables.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Comments" Title="Comments" SeoTitle="Bootstrap Spreadsheet Comments Demo">
      <DemoSection Key="Comments" Title="Comments">
        <Description>
          <![CDATA[
                <p>The Bootstrap Spreadsheet supports the use of Excel inspired comments - additional informational texts for individual cells. Comments are extremely useful when you need to provide additional information, such as reminders, notifications, or feedback in a document without modifying cell content.</p>
				<p>The Spreadsheet displays comments in a floating text box anchored to a cell. The cell containing a comment has a red triangular indicator in the corner.</p>
				<p>Your end-users can annotate a worksheet by adding new comments, editing, hiding or deleting existing comments, moving and resizing the comment box. End-users can manipulate comments by using context menu items, a specific <strong>Review</strong> ribbon tab or by dragging comments and their sizing handles.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="WorksheetProtection" Title="Worksheet Protection" SeoTitle="Bootstrap Spreadsheet Worksheet Protection Demo">
      <DemoSection Key="WorksheetProtection" Title="Worksheet Protection">
        <Description>
          <![CDATA[
                <p>The Bootstrap Spreadsheet control supports workbook and worksheet element protection defined within a document. If the document contains protected elements, Spreadsheet prevents their modification by your end-users.</p>
				<p>Note: The <strong>Formula Bar</strong> that displays focused cell content allows end-users to view formulas contained within the protected cells.</p>
				<p>In this demo, the Spreadsheet opens a document with the applied worksheet password protection that prevents modification of certain cells. In particular, you can modify only cells belonging to rows from 6 to 22 and columns from D to J - these cells are colored with different shades of green. Using Spreadsheet API, you can allow or disallow end-users to format, insert, delete, sort, filter or edit areas of the protected worksheet. The <code>Protect</code> and <code>Unprotect</code> methods of a worksheet object are used in the demo for this purpose. According to the defined permissions, the Spreadsheet UI prevents end-users from modifying protected elements - ribbon items and context menu items that relate to customization of these elements are either disabled or not in effect.</p>
				<p>From a usability standpoint, document protection allows you to hide data or formulas that might confuse end-users and prevent users from viewing or making changes to such data.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="WorksheetPrinting" Title="Worksheet Printing" SeoTitle="Bootstrap Spreadsheet Worksheet Printing Demo">
      <DemoSection Key="WorksheetPrinting" Title="Worksheet Printing">
        <Description>
          <![CDATA[
                <p>The Bootstrap Spreadsheet control ships with an integrated Ribbon UI, allowing end-users to customize active documents and to print workbook content as needed.</p>
				<p>Before printing, page settings for each worksheet can be customized. The more general printing parameters can be set up via the ribbon items contained in the <strong>Page Layout</strong> tab. All available page settings are grouped together in the <strong>Page Setup</strong> dialog.</p>
				<p>To open this dialog:</p>
				<ol>
					<li>Switch to the <strong>Page Layout</strong> tab.</li>
					<li>Click a <strong>Dialog Box Launcher</strong> button next to Page Setup or Print group title.</li>
				</ol>
				<p>Click <strong>Print</strong> within the Page Setup dialog. This invokes a browser-specific printing dialog. Printing dialog options might vary based upon the web client browser used.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="WorksheetDisplayArea" Title="Worksheet Display Area" SeoTitle="Bootstrap Spreadsheet Worksheet Display Area Demo">
      <DemoSection Key="WorksheetDisplayArea" Title="Worksheet Display Area">
        <Description>
          <![CDATA[
                <p>The Bootstrap Spreadsheet enables you to programmatically specify the worksheet area that is visible in the Spreadsheet and that allows end-user input.</p>
				<p>Use the <code>SetSize</code> method available through the <code>WorksheetDisplayArea</code> property to limit the maximum number of rows and columns to be displayed in a specific sheet. This restricts end-users from accessing worksheet cells through a control's UI. This restriction, however, is not in effect for programmatic cell manipulation so you can change the content and format of each worksheet cell in code.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="WorksheetFreezePanes" Title="Worksheet Freeze Panes" SeoTitle="Bootstrap Spreadsheet Worksheet Freeze Panes Demo">
      <DemoSection Key="WorksheetFreezePanes" Title="Worksheet Freeze Panes">
        <Description>
          <![CDATA[
                <p>The Bootstrap Spreadsheet implements an Excel-inspired Freeze Panes functionality. This allows end-users to lock specific rows or columns in one area to keep this area of a worksheet visible while scrolling the worksheet content vertically or horizontally.</p>
				<p>Using the <strong>Freeze Panes</strong> command from the <strong>View</strong> tab on the ribbon, end-users can freeze arbitrary panes (lock rows and/or columns based on the selection), freeze the top row, freeze the first column and unfreeze panes.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="SortingAndAutoFilter" Title="Sorting and AutoFilter" SeoTitle="Bootstrap Spreadsheet Sorting and AutoFilter Demo">
      <DemoSection Key="SortingAndAutoFilter" Title="Sorting and AutoFilter">
        <Description>
          <![CDATA[
                <p>End-users can use the Excel-inspired AutoFilter feature to filter data by columns and to easily display only rows that meet specific conditions. Filtering commands located on the <strong>Data</strong> tab in the <strong>Sort &amp; Filter</strong> group can be used to activate filtering, reapply the filter or completely remove all filters in a worksheet.</p>
				<p>Once filtering is activated, a drop-down arrow appears on the right side of each column header in the range. An end-user can click the arrow of the required column and select one of predefined filter types in the AutoFilter drop-down menu. The content of the AutoFilter menu depends on the type of data in the filtered column. Three filter types are available: Text Filters, Number Filters and Date Filters. In addition, the Filter by Values option, which allows you to select unique values from columns can be used.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="DataValidation" Title="Data Validation" SeoTitle="Bootstrap Spreadsheet Data Validation Demo">
      <DemoSection Key="DataValidation" Title="Data Validation">
        <Description>
          <![CDATA[
                <p>An Excel-inspired data validation implemented by the Bootstrap Spreadsheet helps prevent end-users from entering wrong values into worksheet cells. This feature allows a user to define restrictions and provide notifications on which data can and should be entered into a cell. Data validation is extremely useful when a workbook is shared by multiple users, and you want the data entered in the workbook to be accurate and consistent.</p>
				<p>This demo displays a simple document with data validation applied. Each column containing validated cells is accommodated with a comment explaining which values can be entered into these cells. To view or modify validation settings, click the <strong>Data Validation</strong> button on the ribbon to invoke the Data Validation dialog.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="MailMerging" Title="Mail Merging" SeoTitle="Bootstrap Spreadsheet Mail Merging Demo">
      <DemoSection Key="MailMerging" Title="Mail Merging">
        <Description>
          <![CDATA[
                <p>The Mail Merge functionality provided by the Bootstrap Spreadsheet enables you to automatically generate a set of documents based on a common template and fill each document with unique data values retrieved from a data source. This feature can be useful for a variety of business requirements, such as personalizing letters, and composing catalogs and reports.</p>
				<p>To perform a mail merge, you need a template and a data source.</p>
				<ol>
					<li>A <strong>template</strong> is a spreadsheet document that contains static information (which is the same for all resulting documents) and mail merge fields. A mail merge field is a placeholder in which a value from the specified data source field will appear in a merged document. To insert fields into template cells, use the following special functions in cell formulas: FIELD and FIELDPICTURE.</li>
					<li>A <strong>data source</strong> contains data that will be merged into fields in a template to create merged documents.</li>
				</ol>
				<p>To bind a template to a data source, use the <code>IWorkbook.MailMergeDataSource</code> and <code>IWorkbook.MailMergeDataMember</code> properties of the template workbook.</p>
				<%--BeginCollapse--%>
				<p>Within a template, you can choose <strong>a mail merge mode</strong> specifying how the result of the mail merge should be generated. The mail merge mode is specified programmatically at the template workbook level, by setting a specific defined name ("MAILMERGEMODE") to a particular string constant ("Worksheets" or "OneWorksheet").</p>
				<ul>
					<li>"<strong>OneWorksheet</strong>" (Single Sheet) - Used in this demo. Merged ranges for all data source records are inserted one after another (vertically or horizontally, depending on the document orientation) into a single worksheet.</li>
					<li>"<strong>Worksheets</strong>" (Multiple Sheets) - The merged range for each data source record is inserted into a separate worksheet in a single workbook.</li>
				</ul>
				<p>Note that by default, the "MAILMERGEMODE" defined name does not exist in a template workbook and the "Single Sheet" mode is used.</p>
				<p>To finalize the mail merge process, use the IWorkbook.GenerateMailMergeDocuments method of the template workbook. This method returns a collection of resulting workbooks containing the merged documents (if the "Single Sheet" or "Multiple Sheets" mail merge mode is used, the collection contains a single workbook).</p>
				<p>In this demo, we illustrate the merging of images along with personal information for contacts from the Northwind database&rsquo;s <em>Employees</em> table.</p>
				<%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="CustomDataMerging" Title="Custom Data Merging" SeoTitle="Bootstrap Spreadsheet Custom Data Merging Demo">
      <DemoSection Key="CustomDataMerging" Title="Custom Data Merging">
        <Description>
          <![CDATA[
                <p>In this demo, a spreadsheet template is loaded into the Bootstrap Spreadsheet and programmatically populated with data taken from an XML file. The template displays the predefined report layout and contains specific aggregate formulas. The data is retrieved from an XML file and merged with the corresponding worksheet cells into an integrated report. As a result, a worksheet represents a complete report calculated automatically.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="ExternalRibbon" Title="External Ribbon" SeoTitle="Bootstrap Spreadsheet External Ribbon Demo">
      <DemoSection Key="ExternalRibbon" Title="External Ribbon">
        <Description>
          <![CDATA[
                <p>The Bootstrap Spreadsheet provides a UI experience similar to Microsoft Excel Online. It allows you to create intuitive and easy-to-use spreadsheet apps in the shortest possible time.</p>
				<p>This demo illustrates how you can customize the Spreadsheet's built-in <strong>Ribbon</strong>. Based upon the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSpreadsheet.RibbonMode">RibbonMode</helplink> property setting, the Spreadsheet can use either a built-in ribbon, a built-in one-line toolbar, an external ribbon control, or no ribbon. The RibbonMode property values include:</p>
				<ul>
					<li><strong>Ribbon</strong> &ndash; The Spreadsheet uses a built-in ribbon; ribbon tabs can be customized using the Spreadsheet's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSpreadsheet.RibbonTabs">RibbonTabs</helplink> collection.</li>
					<li><strong>One Line Ribbon</strong> &ndash; Default. The Spreadsheet displays a built-in ribbon used in one-line mode optimized for touch devices; one-line mode related settings can be defined for ribbon groups and ribbon galleries with their <code>OneLineModeSettings</code> properties.</li>
					<li><strong>ExternalRibbon</strong> &ndash; The Spreadsheet uses an external Bootstrap Ribbon control, specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet.AssociatedRibbonID">AssociatedRibbonID</helplink> property. Ribbon tabs can be customized at the Ribbon control level with the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRibbon.Tabs">Tabs</helplink> property. The Spreadsheet's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet.CreateDefaultRibbonTabs(System.Boolean)">CreateDefaultRibbonTabs</helplink> method can be used to automatically populate the external ribbon with the default ribbon tabs.</li>
					<li><strong>None</strong> &ndash; The Spreadsheet does not incorporate or use the ribbon UI.</li>
					<li><strong>Auto</strong> &ndash; The Spreadsheet automatically displays a proper built-in ribbon depending upon the client browser type; a standard ribbon is used under desktop browsers and a one-line ribbon is used under the browsers of touch devices.</li>
				</ul>
				<p>In this demo, the external Bootstrap Ribbon is used.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="ContextMenuCustomization" Title="Context Menu Customization" SeoTitle="Bootstrap Spreadsheet Context Menu Customization Demo">
      <DemoSection Key="ContextMenuCustomization" Title="Context Menu Customization">
        <Description>
          <![CDATA[
                <p>The Bootstrap Spreadsheet enables you to programmatically customize its context menu. By handling the <code>PopupMenuShowing</code> client-side event, you can perform the following actions with the Spreadsheet's context menu:</p>
				<ul>
					<li>Manipulate menu items - add new items, remove or disable existing ones (use the <code>e.menuItems</code> property);</li>
					<li>Identify a worksheet element (e.g., a cell, row or column header, chart or picture) for which the context menu is invoked (use the <code>e.menuType</code> property);</li>
					<li>Prevent the context menu from being displayed (use the <code>e.cancel</code> property).</li>
				</ul>
				<p>This demo illustrates how to implement a custom context menu and display it only for certain sheet cells (non-empty cells that are highlighted with the gray background color in the demo). The context menu is dynamically populated in the <code>PopupMenuShowing</code> client event with custom menu items depending upon the type of data contained within cells (such as the weight, currency or discount values). The custom menu items are implemented as new items containing custom command names. Clicks on the custom menu items with custom command names are processed by using the <code>CustomCommandExecuted</code> client event. Within its handler, the activated custom command is identified and the corresponding action is performed either on the client side or through a callback to the server. For instance, commands for the weight and currency conversions are performed right on the client side and display a hint with converted values; and a command for getting information on how discounts are calculated requires sending a callback to the server to obtain additional information.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
  </DemoGroup>

  <DemoGroup Key="RichEdit" Title="Rich Text Editor" SeoTitle="Bootstrap Rich Text Editor Control Demo" IconCssClass="icon icon-richedit" OrderIndex="5">
    <PreDescription>
      <![CDATA[
        <p>
            The Bootstrap Rich Text Editor is a Word-inspired control that creates full-featured text applications with complex formatting and display capabilities. It supports loading, saving, exporting, and conversion to and from most popular text-based document formats.With the Bootstrap Rich Text Editor you can create, edit, and save rich-text documents within your browser.
        </p>
      ]]>
    </PreDescription>
    <Description>
      <![CDATA[
		<p>The Bootstrap Rich Text Editor control allows users to:</p>
		<ul>
			<li>format text</li>
			<li>apply styles to a document contents</li>
			<li>add images, hyperlinks, lists, and tables to documents</li>
			<li>export documents to PDF</li>
			<li>automatically check and correct documents</li>
		</ul>
      ]]>
    </Description>
    <Demo Key="CharacterFormatting" Title="Character Formatting" SeoTitle="Bootstrap Rich Text Editor Character Formatting Demo">
      <DemoSection Key="CharacterFormatting" Title="Character Formatting">
        <Description>
          <![CDATA[
                <p>The Bootstrap Rich Text Editor ships with everything you'd expect from a powerhouse word processor, including a rich set of character formatting options. Explore the capabilities of this control by applying character settings and font effects - available within the <strong>Font</strong> group of the ribbon&rsquo;s <strong>Home</strong> tab.</p>
				<p>There are various font, font size, and character style settings used for text: bold, italic, underlined, strike-through style, and different colors for background and foreground. Character formatting can be applied to a single character, word, sentence or a line of text, without affecting the entire paragraph.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="ParagraphFormatting" Title="Paragraph Formatting" SeoTitle="Bootstrap Rich Text Editor Paragraph Formatting Demo">
      <DemoSection Key="ParagraphFormatting" Title="Paragraph Formatting">
        <Description>
          <![CDATA[
                <p>This demo illustrates different paragraph formatting options available to you when using the Bootstrap Rich Text Editor. Explore the demo by changing paragraph formatting (such as alignment, spacing and indentation) using the buttons within the <strong>Paragraph</strong> group of the ribbon's <strong>Home</strong> tab.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Styles" Title="Styles" SeoTitle="Bootstrap Rich Text Editor Styles Demo">
      <DemoSection Key="Styles" Title="Styles">
        <Description>
          <![CDATA[
                <p>This demo illustrates the use of document styles. The Bootstrap Rich Text Editor supports both paragraph and character based styles, along with multiple style inheritance. A built-in style gallery allows you to quickly apply formatting to the contents of the Rich Text Editor. Give it a try and see how it works. Select a block of text within the editor, navigate to the <strong>Home</strong> tab of the ribbon and select the desired style from the style gallery in the <strong>Styles</strong> group.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="TextWithImages" Title="Text with Images" SeoTitle="Bootstrap Rich Text Editor Text with Images Demo">
      <DemoSection Key="TextWithImages" Title="Text with Images">
        <Description>
          <![CDATA[
                <p>The Bootstrap Rich Text Editor allows you to insert inline pictures into a document.</p>
				<p>To insert a picture, move the blinking cursor to the appropriate position within the document and click the <strong>Picture</strong> item within the Illustrations group of the ribbon's <strong>Insert</strong> tab. The pictures you insert can be located on your computer or on the web. You can also move, transform and delete pictures in a document.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="BulletsAndNumbering" Title="Bullets and Numbering" SeoTitle="Bootstrap Rich Text Editor Bullets and Numbering Demo">
      <DemoSection Key="BulletsAndNumbering" Title="Bullets and Numbering">
        <Description>
          <![CDATA[
                <p>This demo illustrates how the Bootstrap Rich Text Editor displays bulleted and numbered lists within a document and how you can control the auto-number feature. Use the corresponding buttons in the ribbon <strong>Home</strong> tab's <strong>Paragraph</strong> group to make desired changes.</p>
				<p>For more deeper customization of list appearances, use the <strong>Bullets and Numbering...</strong> item in the document's context menu. It provides access to the Bullets and Numbering dialog, which allows you to define dozens of bullet and number characteristics (such as bullet characters and positions, number format, style, position, and much more).</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="HyperlinksAndBookmarks" Title="Hyperlinks and Bookmarks" SeoTitle="Bootstrap Rich Text Editor Hyperlinks and Bookmarks Demo">
      <DemoSection Key="HyperlinksAndBookmarks" Title="Hyperlinks and Bookmarks">
        <Description>
          <![CDATA[
				<p>This demo illustrates the built-in hyperlink and bookmark support available within the Bootstrap Rich Text Editor. Once you browse the document, you will notice hyperlinks pointing to external locations or associated with bookmarks in the same document. To create a hyperlink or bookmark, select a position in the document or select a document range and press the <strong>Hyperlink</strong> or <strong>Bookmark</strong> command button in the <strong>Links</strong> group of the ribbon's <strong>Insert</strong> tab.</p>
				<p>In documents, a hyperlink is implemented as a document field of the HYPERLINK field code.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Tables" Title="Tables" SeoTitle="Bootstrap Rich Text Editor Tables Demo">
      <DemoSection Key="Tables" Title="Tables">
        <Description>
          <![CDATA[
                <p>The Bootstrap Rich Text Editor is shipped with integrated table support providing a capability to display, edit, and create tables in documents. The Rich Text Editor offers many of the table-related features you've come to expect from word processors such as Microsoft Word. Specific context ribbon tabs, context menu items and dialogs allow your end-users to create and modify tables with ease. The table-related features are available through the <strong>Tables</strong> group of the <strong>Insert</strong> tab.</p>
				<p>End-users can adjust the table size using the mouse - dragging of cell borders changes column widths or row heights. Column sizing can also be performed using ruler markers. The keyboard can be used to navigate and select table cells. To navigate through cells, use arrow keys, or Tab and Tab+Shift. To select cells, use Shift together with the arrow keys.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="FloatingObjects" Title="Floating Objects" SeoTitle="Bootstrap Rich Text Editor Floating Objects Demo">
      <DemoSection Key="FloatingObjects" Title="Floating Objects">
        <Description>
          <![CDATA[
                <p>To help you replicate the Microsoft Word user experience, the Bootstrap Rich Text Editor ships with the floating object support. The Rich Text Editor allows users to freely position, scale and rotate all floating objects when inserting pictures or text boxes into a document. End-users can also modify object characteristics using context menu items, a specific ribbon context tab, or activate the built-in <strong>Layout</strong> dialog through the context menu. Give the demo a try and see how easy it is to drag and resize an object using its outline, and rotate it by using its rotate handle.</p>
				<p>The Rich Text Editor provides a specific client API allowing you to manipulate floating objects programmatically. In code, you can call client commands available through the <code>commands</code> client property to insert text boxes (<code>insertFloatingTextBoxCommand</code>), change inline pictures into floating pictures, change different floating object settings, and invoke the Layout dialog (<code>openLayoutOptionsDialogCommand</code>).</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="DocumentProtection" Title="Document Protection" SeoTitle="Bootstrap Rich Text Editor Document Protection Demo">
      <DemoSection Key="DocumentProtection" Title="Document Protection">
        <Description>
          <![CDATA[
                <p>The Bootstrap Rich Text Editor provides support for working with protected documents. When the Rich Text Editor opens a fully protected document, users cannot edit it. If a protected document includes range permissions that enable editing document parts for a unique user or user group, the Rich Text Editor is able to identify the current user and grant him/her the corresponding permissions. Use the Rich Text Editor's <code>Authentication</code> property to authorize the current document user by its name, email or user group name. You can also define how the permitted ranges are highlighted within the Rich Text Editor by using the <code>RangePermission</code> property.</p>
				<p>In this demo, the Rich Text Editor opens a protected document that includes permitted ranges for four users. The <i>lawyer@somecompany.com</i> user is authorized through the <code>Authentication</code> property to edit a separate text area. The range that is enabled for editing is highlighted with yellow.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="DocumentRestrictions" Title="Document Restrictions" SeoTitle="Bootstrap Rich Text Editor Document Restrictions Demo">
      <DemoSection Key="DocumentRestrictions" Title="Document Restrictions">
        <Description>
          <![CDATA[
                <p>This demo illustrates the level of control the Bootstrap Rich Text Editor provides to you when your business logic requires you to restrict some behavior and formatting options available to end-users within a document. You are able to prevent certain operations (such as open/save or copy/paste) from being performed within a document and to limit document characteristics (such as character or paragraph formatting) that can be changed.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="ExportToPDF" Title="Export to PDF" SeoTitle="Bootstrap Rich Text Editor Export to PDF Demo">
      <DemoSection Key="ExportToPDF" Title="Export to PDF">
        <Description>
          <![CDATA[
                <p>This demo illustrates the ease with which you can generate PDF output directly from the Bootstrap Rich Text Editor. Rich Text Editor exposes the <code>ExportToPdf</code> server method which exports data to a file or stream in PDF format.</p>
				<p>Make any changes to the document and click the <strong>Export to PDF</strong> button to export the editor's contents.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Sections" Title="Sections" SeoTitle="Bootstrap Rich Text Editor Sections Demo">
      <DemoSection Key="Sections" Title="Sections">
        <Description>
          <![CDATA[
                <p>This demo illustrates how to divide documents into multiple sections &ndash; with specific page formatting options. For each section, you can change the number of columns, page orientation or margins using the options available in the ribbon's <strong>Page Layout</strong> tab.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="HeadersAndFooters" Title="Headers and Footers" SeoTitle="Bootstrap Rich Text Editor Headers and Footers Demo">
      <DemoSection Key="HeadersAndFooters" Title="Headers and Footers">
        <Description>
          <![CDATA[
                <p>This demo illustrates the capability of the Bootstrap Rich Text Editor to display and modify headers and footers within documents.</p>
				<p>A double-click on a document's corresponding areas (a page's top or bottom) invokes a specific <strong>Header and Footer</strong> ribbon context tab. It contains a set of commands to modify options specific to headers and footers. End-users can specify different headers and footers for the first page, odd and even pages, and each particular section. Headers and footers can contain any content, including page numeration, images, etc.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="TableOfContents" Title="Table of Contents" SeoTitle="Bootstrap Rich Text Editor Table of Contents Demo">
      <DemoSection Key="TableOfContents" Title="Table of Contents">
        <Description>
          <![CDATA[
                <p>The Bootstrap Rich Text Editor allows navigating through documents using interactive navigation tables: the <strong>Table of Contents</strong> and <strong>Table of Figures/Tables/Equations</strong>.</p>
				<ul>
					<li>The Table of Contents lists the document's headings created by applying headings styles to the text paragraphs. The heading style changes the characters' appearance and specifies the paragraph's outline level.</li>
					<li>The Table of Figures/Tables/Equations lists the corresponding document objects provided with a numbered label below - an object's caption. The caption identifies the object and adds it to the corresponding table.</li>
				</ul>
				<p>To manage these navigation tables, the Rich Text Editor provides the <strong>References </strong>ribbon tab that allows you to add tables, mark paragraphs as headings or add captions to objects, and update the tables to display the corrected entries and page numbers.</p>
				<p>In this demo, the document includes the Table of Contents and Table of Figures. You can move to the selected heading or figure by clicking the corresponding table's row while pressing the CTRL key. If a navigation table displays outdated information (outdated headings/captions or outdated page numbers) after changing the document, you can select the table and click the <strong>Update Table</strong> command in the <strong>References</strong> ribbon tab to update the table and display the correct information.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="SpellChecking" Title="Spell Checking" SeoTitle="Bootstrap Rich Text Editor Spell Checking Demo">
      <DemoSection Key="SpellChecking" Title="Spell Checking">
        <Description>
          <![CDATA[
                <p>The Bootstrap Rich Text Editor delivers built-in spell checking support, including the type-as-you-go error detection. This demo shows how a document's spelling can be checked and corrected within the Rich Text Editor.</p>
				<p>You can use the <code>Settings.SpellChecker</code> property to define the spell checking availability and the main spelling options (such as the selected culture and paths to alphabet, grammar and dictionary files).</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="AutoCorrection" Title="Auto Correction" SeoTitle="Bootstrap Rich Text Editor Auto Correction Demo">
      <DemoSection Key="AutoCorrection" Title="Auto Correction">
        <Description>
          <![CDATA[
                <p>The Bootstrap Rich Text Editor supports the AutoCorrect feature that allows you to analyze the typed text and modify or substitute it. The control provides the AutoCorrect capabilities that can be enabled by setting the corresponding server-side properties to true. You also can perform custom substitution algorithms by handling the client-side <code>AutoCorrect</code> event.</p>
				<p>You can enable the built-in AutoCorrect feature using the following server-side properties:</p>
				<ul>
					<li><code>CorrectTwoInitialCapitals</code> - specifies whether the control should correct words that start with two capital letters by changing the second letter to lowercase.</li>
					<li><code>DetectUrls</code> - specifies whether the control should detect URI strings and format them as hyperlinks.</li>
					<li><code>EnableAutomaticNumbering</code> - specifies whether the control should automatically start numbered or bulleted lists when the specific symbols are typed.</li>
					<li><code>ReplaceTextAsYouType</code> - specifies whether the control should search a replacement for the typed string in the <code>AutoCorrectReplaceInfoCollection</code>collection.</li>
				</ul>
				<p>If you need to extend the control&rsquo;s AutoCorrect functionality, you can handle client-side <code>AutoCorrect</code> event that occurs when a user types text in the control. While handling the event, you can use the client commands to insert formatted text, images, tables, and other document objects.</p>
				<p>In this demo, you can try the AutoCorrect functionality by typing symbols to in the rightmost column of the table in the document.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Fields" Title="Fields" SeoTitle="Bootstrap Rich Text Editor Fields Demo">
      <DemoSection Key="Fields" Title="Fields">
        <Description>
          <![CDATA[
                <p>In the Bootstrap Rich Text Editor, document fields are special placeholders for non-static data that might change (be updated on field update). These placeholders are replaced with actual data when the document is rendered for display or print. Using fields, you can automate different aspects of your document, such as auto page numbering, inserting actual dates and times, etc. The default <strong>Mail Merge</strong> ribbon tab can be used to work with fields (create, update, switch between field display modes).</p>
				<p>A field is specified by a field code, and can be viewed within a document as either a field code or a field result. The field code specifies how the field result should be calculated when the field is updated. The field result represents the actual, resultant value of the field. This value is calculated by the Rich Text Editor's field updating engine based on the field code information. To insert a field, position the mouse cursor within a document and execute the <strong>Create Field</strong> command from the ribbon's <strong>Mail Merge</strong> tab (or use the Ctrl+F9 shortcut). Field codes appear between curly brackets ( { } ). The following field codes are supported.</p>
				<ul>
					<li>DATE - Inserts the current date and time.</li>
					<li>TIME - Inserts the current time.</li>
					<li>DOCVARIABLE - Enables you to programmatically insert complex content when this field is updated.</li>
					<li>HYPERLINK - Enables you to navigate to another location or to a bookmark.</li>
					<li>NUMPAGES - Inserts the total number of pages.</li>
					<li>PAGE - Inserts the number of the page containing the field.</li>
					<li>MERGEFIELD - Retrieves a value from the bound data source.</li>
				</ul>
				<%--BeginCollapse--%>
				<p>In a document, a field code is displayed using the following syntax:</p>
				<p>{ FIELDNAME Properties Optional_Switches }</p>
				<p>FIELDNAME - This is the name of the field.</p>
				<p>Properties - These are any instructions or variables that are used in a particular field. Not all fields have parameters, and in some fields, parameters are optional.</p>
				<p>Optional switches - These are any optional settings that are available for a particular field. Not all fields have switches available, other than those that control the formatting of the field results.</p>
				<p>You can switch between displaying the field code and the field result by right-clicking in a field (or in a selected document portion that contains fields) and clicking the context menu's <strong>Toggle Field Codes</strong> item (or using the Shift + F9 shortcut). To toggle all fields within a document, use the <strong>Show All Field Codes</strong> and <strong>Show All Field Results</strong> commands in the ribbon's <strong>Mail Merge</strong> tab (or use the Alt + F9 shortcut).</p>
				<p>&nbsp;To update fields, use the context menu's <strong>Update Field</strong> item (or press F9). All fields in a document can be updated using the <strong>Update All Fields</strong> command in the ribbon's <strong>Mail Merge</strong> tab.</p>
				<%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="DocumentVariables" Title="Document Variables" SeoTitle="Bootstrap Rich Text Editor Document Variables Demo">
      <DemoSection Key="DocumentVariables" Title="Document Variables">
        <Description>
          <![CDATA[
                <p>The Bootstrap Rich Text Editor enables you to store custom information in the document using document variables. To insert a document variable in the document, use the DOCVARIABLE field code.</p>
				<p>The DOCVARIABLE field code has the following syntax:</p>
				<p>{ DOCVARIABLE "variable name" "argument1" "argument 2"... }</p>
				<p>This field code inserts the value of a named document variable specified by a text in the field argument(s). Before a field is updated, the <code>CalculateDocumentVariable</code> server event is fired allowing you to manually calculate the required value. In a handler of this event, the event argument's <code>Arguments</code> property provides access to a collection of arguments contained within the field. A common task is to evaluate DOCVARIABLE fields in a document depending on the variable name and argument and then substitute fields with their values. Note that you can return a text or the entire Document as a document variable.</p>
				<p>This demo illustrates how to use the DOCVARIABLE field with custom parameters to dynamically calculate and insert total incomes by categories and to embed bar charts that visualize income allocation by products.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="MailMerging" Title="Mail Merging" SeoTitle="Bootstrap Rich Text Editor Mail Merging Demo">
      <DemoSection Key="MailMerging" Title="Mail Merging">
        <Description>
          <![CDATA[
                <p>The mail merge functionality provided by the Bootstrap Rich Text Editor enables you to bind the control to an external data source and then preview dynamic content right in the opened template document, prior to performing the final mail merge. This feature can be useful for a variety of business requirements, such as composing, previewing and generating catalogs, reports, or personalized letters.</p>
				<p>To specify a data source, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControl.DataSourceID">DataSourceID</helplink> (or <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControlBase.DataSource">DataSource</helplink>) property can be used.</p>
				<p>The Rich Text Editor also provides a specific API allowing you to control mail merge operations programmatically.</p>
				<ul>
					<li>The <code>ViewMergedData</code> property specifies whether to display field results or field codes in a mail-merge document.</li>
					<li>The <code>MailMerge</code> method (with a set of overloads) initializes the mail merge process and generates the resulting document containing the merged information.</li>
				</ul>
				<p>The <code>CreateMailMergeOptions</code> method creates an object for specifying the options used in mail merge operations.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="MailMergingViaDocumentServer" Title="Mail Merging via Document Server" SeoTitle="Bootstrap Rich Text Editor Mail Merging via Document Server Demo">
      <DemoSection Key="MailMergingViaDocumentServer" Title="Mail Merging via Document Server">
        <Description>
          <![CDATA[
                <p>This demo illustrates a scenario, in which mail merge operations are performed dynamically with the help of an external <helplink href="https://docs.devexpress.com/OfficeFileAPI/17488/word-processing-document-api">RichEditDocumentServer</helplink> component.</p>
<p>The RichEditDocumentServer loads a predefined template document containing the static content with embedded mail merge data fields, binds to an external data source and generates the merged document. In this demo, the Bootstrap Rich Text Editor is used to open the resulting merged document for display within a web page.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="ExternalRibbon" Title="External Ribbon" SeoTitle="Bootstrap Rich Text Editor External Ribbon Demo">
      <DemoSection Key="ExternalRibbon" Title="External Ribbon">
        <Description>
          <![CDATA[
                <p>The Bootstrap Rich Text Editor provides a UI experience similar to Microsoft Word Online. It fully integrates the Bootstrap Ribbon control, allowing you to create intuitive and easy-to-use word processing apps in the shortest possible time.</p>
				<p>This demo illustrates the ribbon-based UI modes available within the Rich Text Editor. Based upon the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRichEdit.RibbonMode">RibbonMode</helplink> property setting, Rich Text Editor can use either a built-in ribbon, a built-in one-line toolbar, an external ribbon control, or no ribbon. The RibbonMode property values include:</p>
				<ul>
					<li><strong>Ribbon</strong> &ndash; The Rich Text Editor uses a built-in ribbon; ribbon tabs can be customized using the Rich Text Editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit.RibbonTabs">RibbonTabs</helplink> collection.</li>
					<li><strong>One Line Ribbon</strong> &ndash; The Rich Text Editor displays a built-in ribbon used in one-line mode optimized for touch devices; one-line mode related settings can be defined for ribbon groups and ribbon galleries with their <code>OneLineModeSettings</code> properties.</li>
					<li><strong>ExternalRibbon</strong> &ndash; The Rich Text Editor uses an external Bootstrap Ribbon control, specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit.AssociatedRibbonID">AssociatedRibbonID</helplink> property. Ribbon tabs can be customized at the Ribbon control level with the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRibbon.Tabs">Tabs</helplink> property. The Rich Text Editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit.CreateDefaultRibbonTabs(System.Boolean)">CreateDefaultRibbonTabs</helplink> method can be used to automatically populate the external ribbon with the default ribbon tabs.</li>
					<li><strong>None</strong> &ndash; The Rich Text Editor does not incorporate or use the ribbon UI.</li>
					<li><strong>Auto</strong> &ndash; The Rich Text Editor automatically displays a proper built-in ribbon depending upon the client browser type; a standard ribbon is used under desktop browsers and a one-line ribbon is used under the browsers of touch devices.</li>
				</ul>
				<p>Give the demo a try and see how the Rich Text Editor looks and behaves with the external ribbon applied.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="ContextMenuCustomization" Title="Context Menu Customization" SeoTitle="Bootstrap Rich Text Editor Context Menu Customization Demo">
      <DemoSection Key="ContextMenuCustomization" Title="Context Menu Customization">
        <Description>
          <![CDATA[
                <p>The Bootstrap Rich Text Editor enables you to customize its context menu. By handling the <code>PopupMenuShowing</code> client-side event, you can perform the following actions with the Rich Text Editor's context menu</p>
				<ul>
					<li>Manipulate menu items - add new items, remove or disable existing ones (use the <code>e.menuItems</code> property);</li>
					<li>Prevent the context menu from being displayed (use the <code>e.cancel</code> property).</li>
				</ul>
				<p>In this demo, the <code>PopupMenuShowing</code> event is handled to illustrate the context menu customization capabilities. Using check boxes, you can switch the context menu availability (via <code>e.cancel</code>) and control whether to clear or retain the default menu items when populating the menu with custom items (via <code>e.menuItems</code>). The custom items are implemented as <code>BootstrapClientRichEditPopupMenuItem</code> objects by their <code>name</code> property. Clicks on custom menu items are processed using the <code>CustomCommandExecuted</code> client event. Its handler identifies the activated item by its name and performs the corresponding action on the client-side. In this demo, custom menu items create the Date and Time fields (using the <code>createDateField</code> and <code>createTimeField</code> client commands) and search the selected text in Google (the selected text is received via the client API).</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
  </DemoGroup>

  <DemoGroup Key="Navigation" Title="Navigation" SeoTitle="Bootstrap Navigation Controls Demo" IconCssClass="icon icon-nav" OrderIndex="6">
    <PreDescription>
      <![CDATA[
        <p>The DevExpress Bootstrap Controls suite ships with a set of navigation tools that will help you build easy-to-navigate websites and web applications.</p>
      ]]>
    </PreDescription>
    <Description>
      <![CDATA[
        <p>The following controls are included:</p>
        <ul>
            <li>The Ajax-enabled Menu, Accordion, and Tree View controls visualize the structure of your web application's resources using hierarchical data presentation. These controls can function in a data-bound mode, in which they automatically retrieve their items from a hierarchical data source such as a <strong>SiteMapDataSource</strong> or <strong>XmlDataSource</strong>.</li>
            <li>The standalone Pager control provides a user interface that you can use to implement custom page navigation within your web application.</li>
            <li>The Popup Control is used to display overlapping temporary windows that appear separately from an application's main window, and are typically used to display quick reference information.</li>
        </ul>
      ]]>
    </Description>
    <Demo Key="Accordion" Title="Accordion" SeoTitle="Bootstrap Accordion Demo">
      <DemoSection Key="DefaultAccordion" Title="Default Accordion">
        <Description>
          <![CDATA[
                <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAccordion">Accordion</helplink> control allows you to provide navigation capabilities to your web application. The control displays navigation items arranged in collapsible groups. Groups within the Accordion can be accessed through the Groups property. Each group has a collection of items available through the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAccordionGroup.Items">BootstrapAccordionGroup.Items</helplink> property.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ItemsSelection" Title="Items Selection">
        <Description>
          <![CDATA[
              <p>The Accordion control supports selection of items with a mouse click client/server-side API. Set the Accordion control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.AllowSelectItem">AllowSelectItem</helplink> property to <strong>true</strong> to allow item selection.</p>
              <p>Use the following API to programmatically get or set the selection status:</p>
              
              <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBar.SetSelectedItem(item)">BootstrapClientAccordion.SetSelectedItem</helplink> - Sets the selected item on the client.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBar.GetSelectedItem">BootstrapClientAccordion.GetSelectedItem</helplink> - Gets the selected item on the client.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAccordion.SelectedItem">BootstrapAccordion.SelectedItem</helplink> - Gets or sets the selected Item on the server.</li>
              </ul>              
              
              <p>Moreover, the Accordion control can automatically select an item for a current page. You can control this behavior using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.SyncSelectionMode">SyncSelectionMode</helplink> property.</p> 
              <p>To respond to selection changes, subscribe to the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBar.ItemClick">BootstrapClientAccordion.ItemClick</helplink> client event or <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAccordion.ItemClick">ItemClick</helplink> server event.</p> 

              <aside>
                  <p>Note that only one item can be selected at a time.</p>
              </aside>           ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AutoCollapse" Title="Auto Collapse">
        <Description>
          <![CDATA[
                <p>When the Auto Collapse feature is activated, only one Accordion group can be expanded at a time. To activate this functionality, set the Accordion control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.AutoCollapse">AutoCollapse</helplink> property to <strong>true</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="LoadContentOnCallbacks" Title="Load Content on Callbacks">
        <Description>
          <![CDATA[
                <p>The Accordion control supports loading the content of collapsed groups using callbacks the first time a group is expanded. This approach allows the Accordion control to avoid the initial transfer of the group's data to the client, thus optimizing the page's load time. To enable callbacks, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.EnableCallBacks">EnableCallBacks</helplink> property to <strong>true</strong>.</p>
                <p>When a group is expanded for the first time, its content is retrieved from the server and then cached on the client. The next time the group is expanded, its content is taken from the cache and no callback to the server is performed.</p>
                <p><small>Note that in this demo the callback time is intentionally extended so that the loading indicator is visible during callbacks.</small></p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Badges" Title="Badges">
        <Description>
          <![CDATA[
                <p>The Accordion control can display supplementary information for any item or group within a badge. A badge can display text, an icon or both. Use the following API to configure badges on the server side:</p>                
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAccordionGroup.HeaderBadge">BootstrapAccordionGroup.HeaderBadge</helplink> - Provides access to group header badge settings allowing you to specify the badge text and/or icon.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAccordionItem.Badge">BootstrapAccordionItem.Badge</helplink> - Provides access to item badge settings allowing you to specify the badge text and/or icon.</li>
                </ul> 
                <%--BeginCollapse--%>         
                <p>The methods listed below allow you to manipulate badges on the client:</p>                
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientAccordionGroup.GetHeaderBadgeText">BootstrapClientAccordionGroup.GetHeaderBadgeText</helplink> - Gets the text of the group header badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientAccordionGroup.SetHeaderBadgeText(text)">BootstrapClientAccordionGroup.SetHeaderBadgeText</helplink> - Sets the text of the group header badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientAccordionGroup.GetHeaderBadgeIconCssClass">BootstrapClientAccordionGroup.GetHeaderBadgeIconCssClass</helplink> - Gets the icon CSS class of the group header badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientAccordionGroup.SetHeaderBadgeIconCssClass(cssClass)">BootstrapClientAccordionGroup.SetHeaderBadgeIconCssClass</helplink> - Sets the icon CSS class of the group header badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientAccordionItem.GetBadgeText">BootstrapClientAccordionItem.GetBadgeText</helplink> - Gets the text of the item badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientAccordionItem.SetBadgeText(text)">BootstrapClientAccordionItem.SetBadgeText</helplink> - Sets the text of the item badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientAccordionItem.GetBadgeIconCssClass">BootstrapClientAccordionItem.GetBadgeIconCssClass</helplink> - Gets the icon CSS class of the item badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientAccordionItem.SetBadgeIconCssClass(cssClass)">BootstrapClientAccordionItem.SetBadgeIconCssClass</helplink> - Sets the icon CSS class of the item badge.</li>
                </ul>             
                <p>Note that the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAccordionGroup.HeaderBadge">BootstrapAccordionGroup.HeaderBadge</helplink> and <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAccordionItem.Badge">BootstrapAccordionItem.Badge</helplink> properties do not effect templated group headers and items.</p>
                <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="RenderOption" Title="Render Option">
        <Description>
          <![CDATA[
              <p>Use the following properties to customize the Accordion group's appearance:</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.AccordionBootstrapSpecificGroupSettings.RenderOption">SettingsBootstrap.RenderOption</helplink> - Specifies the name of a Bootstrap style to be applied to the Accordion group.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAccordionGroup.TextCssClass">AccordionGroup.TextCssClass</helplink> - Specifies CSS classes to be applied to links (&lt;a&gt; elements located within the group header and items) that contain an Accordion group's text.</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AutoPostBack" Title="Auto PostBack">
        <Description>
          <![CDATA[
                <p>The Auto Postback feature allows the Accordion control to automatically initiate a postback when an end-user performs an action that you can handle on the server side (e.g., clicks an accordion item). Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.AutoPostBack">AutoPostBack</helplink> property to <strong>true</strong> to enable this feature.</p>
                <p>Depending on the performed action, one of the following events fires on the server in response to a postback:</p>
                
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAccordion.ItemClick">ItemClick</helplink> - Fires when an end-user clicks an accordion item.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAccordion.HeaderClick">HeaderClick</helplink> - Fires when an end-user clicks a group header.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAccordion.ExpandedChanging">ExpandedChanging</helplink> - Fires when a group is about to expand or collapse.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAccordion.ExpandedChanged">ExpandedChanging</helplink> - Fires when a group has expanded or collapsed.</li>
                </ul>   
            ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Data_Binding" Title="Data Binding">
        <Description>
          <![CDATA[
                <p>The Accordion control supports binding to a data source which can be any object that implements the <strong>IHierarchicalEnumerable</strong> or <strong>IHierarchicalDataSource</strong> interface (e.g., <strong>SiteMapDataSource</strong>, <strong>XmlDataSource</strong>, etc.). Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHierarchicalDataWebControl.DataSourceID">DataSourceID</helplink> property to assign a data source to an Accordion control.</p>
                <p>A data-bound Accordion control automatically creates accordion groups and items for all recognized first and second level data items respectively. Created groups and items obtain values for their properties from data item attributes with matching names. You can also explicitly specify mappings between group or item properties and names of data item attributes using the following properties.</p>
                
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAccordion.GroupDataFields">GroupDataFields</helplink> - Provides access to properties specifying data fields from which accordion group settings should be obtained.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAccordion.ItemDataFields">ItemDataFields</helplink> - Provides access to properties specifying data fields from which accordion item settings should be obtained.</li>
                </ul>
                <p>You can modify settings of each auto-created <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAccordionItem">Item</helplink> or <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAccordionGroup">Group</helplink> object during data binding in the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAccordion.ItemDataBound">ItemDataBound</helplink> and <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAccordion.GroupDataBound">GroupDataBound</helplink> events.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Templates" Title="Templates">
        <Description>
          <![CDATA[
                <p>The Accordion control supports templates allowing you to customize control appearance and layout. 
                A template can be applied to all items or groups (using control level templates) or specific ones (using item/group level templates). 
                Use the following properties to specify templates.</p>
                <%--BeginCollapse--%>
                <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAccordion">BootstrapAccordion</helplink> properties:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.GroupContentTemplate">GroupContentTemplate</helplink> - Specifies a common template used for displaying the content of all groups within the current accordion control.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.GroupHeaderTemplate">GroupHeaderTemplate</helplink> / <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.GroupHeaderTemplateCollapsed">GroupHeaderTemplateCollapsed</helplink> - Specify common template used for displaying the headers of all groups within the current accordion control.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.ItemTemplate">ItemTemplate</helplink> - Specifies a common template used for displaying the content of all items within the current accordion control.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.ItemTextTemplate">ItemTextTemplate</helplink> - Specifies a common template used for displaying the text content of all items within the current accordion control.</li>
                </ul>
                
                <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAccordionGroup">BootstrapAccordionGroup</helplink> properties:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NavBarGroup.ContentTemplate">ContentTemplate</helplink> - Specifies a common template used for displaying the content of the current accordion group.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NavBarGroup.HeaderTemplate">HeaderTemplate</helplink> / <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NavBarGroup.HeaderTemplateCollapsed">HeaderTemplateCollapsed</helplink> - Specifies a common template used for displaying the header of the current accordion group.</li>
                  <li><helplink href="https://docs.devexpress.com/WPF/DevExpress.Xpf.NavBar.NavBarGroup.ItemTemplate">ItemTemplate</helplink> - Specifies a common template used for displaying the content of all items within the current accordion group.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NavBarGroup.ItemTextTemplate">ItemTextTemplate</helplink> - Specifies a common template used for displaying the text content of all items within the current accordion group.</li>
                </ul>
                
                <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapAccordionItem">BootstrapAccordionItem</helplink> properties:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NavBarItem.Template">Template</helplink> - Specifies a template used for displaying the content of the current item.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NavBarItem.TextTemplate">TextTemplate</helplink> - Specifies a template used for displaying the text content of the current item.</li>
                </ul>
                <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ClientSideEvents" Title="Client-Side Events">
        <Description>
          <![CDATA[
                <p>This demo illustrates the capabilities of the Accordion control's <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientAccordion._members">client events</helplink> and allows you to specify which client-side events you want to track. Interact with the Accordion interface to see the information about all tracked events raised in response to your actions in the event log.</p>
                <p>The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBarItem.name">item.name</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBarGroup.name">group.name</helplink> properties of the event handler's parameter allow you to identify the item for which an event has been raised.</p>
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBar.ItemClick">ItemClick</helplink> - Fires when an end-user clicks an accordion item.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBar.HeaderClick">HeaderClick</helplink> - Fires when an end-user clicks a group header.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBar.ExpandedChanging">ExpandedChanging</helplink> - Fires before the expansion state of a group is changed. Allows to cancel this operation or force processing the event on the server side.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBar.ExpandedChanged">ExpandedChanged</helplink> - Fires after the expansion state of a group is changed.</li>
                </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ClientSideAPI" Title="Client-Side Functionality">
        <Description>
          <![CDATA[
              <p>The Accordion control offers an advanced client-side API allowing you to manipulate the control and its elements.</p>
              <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.EnableClientSideAPI">EnableClientSideAPI</helplink> property specifies whether or not the client-side API is available. Note that the client-side API is automatically enabled if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.ClientInstanceName">ClientInstanceName</helplink> property is specified or any client-side event available through the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.ClientSideEvents">ClientSideEvents</helplink> property is handled.</p>
              <p>This demo allows you to interactively explore capabilities of the Accordion control's client-side API.</p>
              <%--BeginCollapse--%>
              <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientAccordion">BootstrapClientAccordion</helplink> methods:</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBar.CollapseAll">CollapseAll</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBar.ExpandAll">ExpandAll</helplink> - Collapses/expands all groups.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBar.GetGroup(index)">GetGroup</helplink> - Returns the accordion group specified by its index.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBar.GetSelectedItem">GetSelectedItem</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBar.SetSelectedItem(item)">SetSelectedItem</helplink> - Gets/sets the selected item.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.GetVisible">GetVisible</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.SetVisible(visible)">SetVisible</helplink> - Gets/sets the control's visibility.</li>
              </ul>
              <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientAccordionItem">BootstrapClientAccordionItem</helplink> methods:</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientAccordionItem.GetIconCssClass">GetIconCssClass</helplink> / <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientAccordionItem.SetIconCssClass(cssClass)">SetIconCssClass</helplink> - Gets/sets the CSS class of the icon displayed by the accordion item.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBarItem.GetText">GetText</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBarItem.SetText(value)">SetText</helplink> - Gets/sets the text displayed by the accordion item.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBarItem.GetVisible">GetVisible</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBarItem.SetVisible(value)">SetVisible</helplink> - Gets/sets the accordion item's visibility.</li>
              </ul>
              
              <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientAccordionGroup">BootstrapClientAccordionGroup</helplink> methods:</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientAccordionGroup.GetItem(index)">GetItem</helplink> - Returns the group's item specified by its index.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBarGroup.GetExpanded">GetExpanded</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBarGroup.SetExpanded(value)">SetExpanded</helplink> - Gets/sets the expanded state of the accordion group.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBarGroup.GetVisible">GetVisible</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBarGroup.SetVisible(value)">SetVisible</helplink> - Gets/sets the group's visibility.</li>
              </ul>
              <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
    </Demo>

    <Demo Key="FloatingActionButton" Title="Floating Action Button" SeoTitle="Bootstrap Floating Action Button Demo">
      <DemoSection Key="DefaultFloatingActionButton" Title="Default Floating Action Button">
        <Description>
          <![CDATA[
            <p>The DevExpress Bootstrap <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFloatingActionButton">Floating Action Button</helplink> is a button that appears in front of a container (HTML element or control) when users interact with the container's elements.</p>
			<p>The following types of floating action buttons are available:</p>
			<ul>
				<li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFABAction">Action</helplink> - Executes the action once users click the floating action button.</li>
				<li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFABActionGroup">Action Group</helplink> - The floating action button serves as a container for multiple actions (action items). When pressed, the floating action button expands nested actions.</li>
			</ul>
			<p>This demo adds an action button to a container and handles button clicks.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ActionGroup" Title="Action Group">
        <Description>
          <![CDATA[
            <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFABActionGroup">Action Group</helplink> is a DevExpress Bootstrap <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFloatingActionButton">Floating Action Button</helplink> type. Action groups serve as containers for multiple actions (action items). When pressed, the action group expands nested actions.</p>
			<p>This demo adds an action group to a container. Once a user clicks the action group, two action buttons (<strong>Like</strong> and <strong>Comment</strong>) appear. The JS code-behind file handles the button clicks.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="TextVisibilityMode" Title="Text Visibility Mode">
        <Description>
          <![CDATA[
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFloatingActionButton.TextVisibilityMode">BootstrapFloatingActionButton.TextVisibilityMode</helplink> property specifies the visibility of the floating button's text. The following modes are available:</p>
			<ul>
				<li><i>Hidden</i> - The button text is always hidden.</li>
				<li><i>OnHover</i> - The button text is only displayed when users hover the mouse pointer over the floating action button.</li>
				<li><i>Always</i> - The button text is always visible.</li>
			</ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="HorizontalPosition" Title="Horizontal Position">
        <Description>
          <![CDATA[
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFloatingActionButton.HorizontalPosition">BootstrapFloatingActionButton.HorizontalPosition</helplink> property specifies the floating button's horizontal alignment. The available property values are:</p>
			<ul>
				<li><i>LeftEdge</i> - The floating action button is displayed at the container's left edge.</li>
				<li><i>Left</i> - The floating action button is displayed at the left of the container.</li>
				<li><i>Center</i> - The floating action button is displayed in the container's center.</li>
				<li><i>Right</i> - The floating action button is displayed at the right of the container.</li>
			</ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="VerticalPosition" Title="Vertical Position">
        <Description>
          <![CDATA[
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFloatingActionButton.VerticalPosition">BootstrapFloatingActionButton.VerticalPosition</helplink> property specifies the floating button's vertical alignment. The available property values are:</p>
			<ul>
				<li><i>Bottom</i> - The floating action button is displayed at the bottom of the container.</li>
				<li><i>Top</i> - The floating action button is displayed at the top of the container.</li>
				<li><i>TopEdge</i> - The floating action button is displayed at the container's top edge.</li>
			</ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="RenderOption" Title="Render Option">
        <Description>
          <![CDATA[
            <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFABActionBootstrapSpecificSettings.RenderOption">BootstrapFABActionBootstrapSpecificSettings.RenderOption</helplink> property specifies Bootstrap-specific styles that can be applied to the floating action button. The available <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFloatingActionButtonRenderOption">styles</helplink> are: <i>Danger</i>, <i>Dark</i>, <i>Info</i>, <i>Light</i>, and so on.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Badge" Title="Badge">
        <Description>
          <![CDATA[
			<p>The Floating Action Button control can display supplementary information action items and/or action buttons within a badge. A badge can display text and/or icon.</p>
			<p>To access the badge's contents on the server, use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFABActionBase.Badge">BootstrapFloatingActionButton.Badge</helplink> property.</p>
			<p>You can use the methods listed below to manage badges on the client:</p>
				<ul>
					<li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientFABActionItem.GetBadgeText">FABActionItem.GetBadgeText</helplink>/<helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientFABAction.GetBadgeText">FABAction.GetBadgeText</helplink> - Gets the text of the action item/action badge.</li>
					<li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientFABActionItem.SetBadgeText(text)">FABActionItem.SetBadgeText</helplink>/<helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientFABAction.SetBadgeText(text)">FABAction.SetBadgeText</helplink> - Sets the text of the action item/action badge.</li>
					<li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientFABActionItem.GetBadgeCssClass">FABActionItem.GetBadgeCssClass</helplink>/<helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientFABAction.GetBadgeCssClass">FABAction.GetBadgeCssClass</helplink> - Gets the CSS class applied to the action item/action badge.</li>
					<li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientFABActionItem.SetBadgeCssClass(cssClass)">FABActionItem.SetBadgeCssClass</helplink>/<helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientFABAction.SetBadgeCssClass(cssClass)">FABAction.SetBadgeCssClass</helplink> - Sets the CSS class applied to the action item/action badge.</li>
					<li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientFABActionItem.GetBadgeIconCssClass">FABActionItem.GetBadgeIconCssClass</helplink>/<helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientFABAction.GetBadgeIconCssClass">FABAction.GetBadgeIconCssClass</helplink> - Gets the icon CSS class of the action item/action badge.</li>
					<li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientFABActionItem.SetBadgeIconCssClass(cssClass)">FABActionItem.SetBadgeIconCssClass</helplink>/<helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientFABAction.SetBadgeIconCssClass(cssClass)">FABAction.SetBadgeIconCssClass</helplink> - Sets the icon CSS class of the action item/action badge.</li>
				</ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    
    <Demo Key="Menu" Title="Menu" SeoTitle="Bootstrap Menu Demo">
      <DemoSection Key="DefaultMenu" Title="Default Menu">
        <Description>
          <![CDATA[
                <p>By default, the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapMenu">Menu</helplink> control has a tree-like structure with root items aligned horizontally and sub-items available in drop-down menus. Each menu item is represented by a <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapMenuItem">BootstrapMenuItem</helplink> object and provides access to a collection of its sub-items through the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapMenu.Items">Items</helplink> collection property. The horizontal Menu re-orients its root items vertically if the display width is insufficient. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ShowPopOutImages">ShowPopoutImages</helplink> property enables the pop-out images, which indicate whether a menu item has child items.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="VerticalOrientation" Title="Vertical Orientation">
        <Description>
          <![CDATA[
                <p>By default, if the display resolution allows, the Menu arranges its items horizontally. To switch to the vertical orientation, set the Menu control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenu.Orientation">Orientation</helplink> property to <strong>Vertical</strong>. Note that a horizontally oriented menu can still be displayed vertically to fit a low-resolution display.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ItemAutoWidth" Title="Item AutoWidth">
        <Description>
          <![CDATA[
                <p>To control how root menu item widths are calculated, use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapMenu.ItemAutoWidth">ItemAutoWidth</helplink> property. When this property is set to <strong>true</strong>, root items are automatically resized to fit the Menu control's width.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ItemSelection" Title="Item Selection">
        <Description>
          <![CDATA[
                <p>The Menu control supports selection of root items with a mouse click. To allow item selection, set the Menu control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.AllowSelectItem">AllowSelectItem</helplink> property to <strong>true</strong>. Note that only one item can be selected at a time.</p>
                <p>Handle the client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.ItemClick">ItemClick</helplink> or server <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapToolbar.ItemClick">ItemClick</helplink> event to detect a selection change. You can identify the clicked item by the value of its <strong>Name</strong> property.</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapMenu.SelectedItem">Menu.SelectedItem</helplink> - gets or sets the selected item</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.SetSelectedItem(item)">ClientMenu.SetSelectedNode</helplink> - selects the specified menu item</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.GetSelectedItem">ClientMenu.GetSelectedNode</helplink> - returns the selected menu item</li>
                </ul>
                <p>Moreover, the Menu control can automatically select an item for a current page. You can control this behavior using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.SyncSelectionMode">SyncSelectionMode</helplink> property.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ItemChecking" Title="Item Checking">
        <Description>
          <![CDATA[
                <p>This feature allows you to arrange menu items into logical check groups in which items behave as radio buttons. You can assign a check group to an item by setting the item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.GroupName">GroupName</helplink> property. Within a logical check group only one item can be selected at a time. The Menu control allows you to define an unlimited number of check groups for both root items and sub-items. Also you can set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.GroupName">GroupName</helplink> to a unique value to force the menu item to change its checked state on every click.</p>
                <p>You can detect a change in an item's checked state by handling the client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.ItemClick">ItemClick</helplink> or server <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapToolbar.ItemClick">ItemClick</helplink> event.</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.Checked">Item.Checked</helplink> - specifies the item's checked state</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuItem.GetChecked">ClientItem.GetChecked</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuItem.SetChecked(value)">ClientItem.SetChecked</helplink> - gets/sets the item's checked state on the client-side</li>
                </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="PopupMenu" Title="Popup Menu">
        <Description>
          <![CDATA[
                <p>The Bootstrap Popup Menu control allows you to provide your web application with the context menu functionality. A popup menu can be associated with a specific control using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapPopupMenu.PopupElementCssSelector">PopupElementCssSelector</helplink> property. The menu is invoked automatically when a specific action (a left or right mouse click or mouse hovering) defined by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupMenu.PopupAction">PopupAction</helplink> property is performed within the associated control. To show the Popup Menu control near a specific HTML element on the client side, use the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupMenu.ShowAtElement(htmlElement)">ShowAtElement</helplink> or <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupMenu.ShowAtElementByID(id)">ShowAtElementByID</helplink> method.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="NavBarMode" Title="NavBar Mode">
        <Description>
          <![CDATA[
            <p>Enable the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapMenuBootstrapSpecificSettings.NavbarMode">SettingsBootstrap.NavBarMode</helplink> option if you want to display the BootstrapMenu control using the Bootstrap framework's <strong>NavBar</strong> component. 
               In this mode, the menu has background and changes the layout to a vertical dropdown menu on small screen resolutions (the menu displays its submenus as embedded blocks in this case).</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Badges" Title="Badges">
        <Description>
          <![CDATA[
                <p>The Menu control can display supplementary information for any item within a badge. A badge can display text and/or icon. Use the following API to set contents of item badges:</p>              
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapMenuItem.Badge">BootstrapMenuItem.Badge</helplink> - Gets or sets the item badge on the server.</li>
                </ul>
                <p>The methods listed below allow you to manipulate badges on the client:</p>                
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientMenuItem.GetBadgeText">BootstrapClientMenuItem.GetBadgeText</helplink> - Gets the text of the item badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientMenuItem.SetBadgeText(text)">BootstrapClientMenuItem.SetBadgeText</helplink> - Sets the text of the item badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientMenuItem.GetBadgeIconCssClass">BootstrapClientMenuItem.GetBadgeIconCssClass</helplink> - Gets the icon CSS class of the item badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientMenuItem.SetBadgeIconCssClass(cssClass)">BootstrapClientMenuItem.SetBadgeIconCssClass</helplink> - Sets the icon CSS class of the item badge.</li>
                </ul>
                <p>Note that the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapMenuItem.Badge">BootstrapMenuItem.Badge</helplink> property does not affect templated menu items.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AutoPostback" Title="Auto Postback">
        <Description>
          <![CDATA[
                <p>The Auto Postback feature allows the Menu control to automatically initiate a postback when an end-user clicks a menu item, which enables you to process the item click on the server side by handling the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapMenu.ItemClick">ItemClick</helplink> event. Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.AutoPostBack">AutoPostBack</helplink> property to <strong>true</strong> to enable this feature.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Data_Binding" Title="Data Binding">
        <Description>
          <![CDATA[
                <p>The Menu control supports binding to a data source, which can be any object that implements the <strong>IHierarchicalEnumerable</strong> or <strong>IHierarchicalDataSource</strong> interface (e.g., <strong>SiteMapDataSource</strong>, <strong>XmlDataSource</strong>, etc.). Set the Menu control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHierarchicalDataWebControl.DataSourceID">DataSourceID</helplink> property to assign a data source to a menu.</p>
                <p>A data-bound Menu control automatically creates a menu item for each data item. A created menu item obtains values for its properties from data item attributes with matching names. You can also explicitly specify mappings between menu item properties and data item attributes using the following properties.</p>
                <%--BeginCollapse--%>
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapMenuBase.IconCssClassField">IconCssClassField</helplink> - Specifies the name of a data field providing CSS classes of icons displayed within menu items.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.NameField">NameField</helplink> - Specifies the name of a data field providing unique identifiers to menu items.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.NavigateUrlField">NavigateUrlField</helplink> - Specifies the name of a data field providing menu item navigation locations.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.TextField">TextField</helplink> - Specifies the name of a data field providing menu item display texts.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ToolTipField">ToolTipField</helplink> - Specifies the name of a data field providing menu item tooltip texts.</li>
                </ul>  
                <p>You can modify settings of each auto-created <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapMenuItem">Item</helplink> object during data binding in the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapMenu.ItemDataBound">ItemDataBound</helplink> event.</p>
                <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Templates" Title="Templates">
        <Description>
          <![CDATA[
                <p>The Menu control supports templates allowing you to customize control appearance and layout. A template can be applied to all menu items (using control level templates) or a specific menu item (using item level templates). Use the following properties to specify templates.</p>
                <%--BeginCollapse--%>
                <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapMenu">BootstrapMenu</helplink> properties:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ItemTemplate">ItemTemplate</helplink> - Specifies a common template used for displaying the content of all items within the current menu control.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.RootItemTemplate">RootItemTemplate</helplink> - Specifies a common template used for displaying the content of root items within the current menu control.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ItemTextTemplate">ItemTextTemplate</helplink> - Specifies a common template used for displaying the text content of all items within the current menu control.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.RootItemTextTemplate">RootItemTextTemplate</helplink> - Specifies a common template used for displaying the text content of root items within the current menu control.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.SubMenuTemplate">SubMenuTemplate</helplink> - Specifies a common template used for displaying the content of all submenus within the current menu control.</li>
                </ul>                
                <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapMenuItem">BootstrapMenuItem</helplink> properties:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.Template">Template</helplink> - Specifies a template used for displaying the content of the current item.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.TextTemplate">TextTemplate</helplink> - Specifies a template used for displaying the text content of the current item.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.SubMenuTemplate">SubMenuTemplate</helplink> - Specifies a template used for displaying the content of the submenu of the current item.</li>
                </ul>
                <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ClientSideEvents" Title="Client-Side Events">
        <Description>
          <![CDATA[
                <p>This demo illustrates the capabilities of the Menu control's <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientMenu._members">client events</helplink> and allows you to specify which client-side events you want to track. Interact with the Menu interface to see the information about all tracked events raised in response to your actions in the event log.</p>
                <p>The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuItem.name">item.name</helplink> property of the event handler's parameter allows you to identify the item for which an event has been raised.</p>
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.ItemClick">ItemClick</helplink> - Fires when an end-user clicks a menu item.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.ItemMouseOver">ItemMouseOver</helplink> - Fires when the mouse cursor moves onto a menu item.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.ItemMouseOut">ItemMouseOut</helplink> - Fires when the mouse cursor moves outside a menu item.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.PopUp">PopUp</helplink> - Fires for a menu item when it displays a drop-down menu.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.CloseUp">CloseUp</helplink> - Fires for a menu item when its drop-down menu is closed.</li>
                </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ClientSideAPI" Title="Client-Side Functionality">
        <Description>
          <![CDATA[
            <p>The Menu control offers an advanced client-side API allowing you to manipulate the control and its elements.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.EnableClientSideAPI">EnableClientSideAPI</helplink> property specifies whether or not the client-side API is available. Note that the client-side API is automatically enabled if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ClientInstanceName">ClientInstanceName</helplink> property is specified or any client-side event available through the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ClientSideEvents">ClientSideEvents</helplink> property is handled.</p>
            <p>This demo allows you to interactively explore capabilities of the Menu control's client-side API.</p>
            <%--BeginCollapse--%>
            <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientMenu._members">BootstrapClientMenu</helplink> methods:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientMenu.GetItem(index)">GetItem</helplink> - Returns a menu item specified by its index.</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientMenu.GetSelectedItem">GetSelectedItem</helplink> / <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientMenu.SetSelectedItem(item)">SetSelectedItem</helplink> - Gets/sets the selected item.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.GetVisible">GetVisible</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.SetVisible(visible)">SetVisible</helplink> - Gets/sets the control's visibility.</li>
            </ul>
            <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientMenuItem._members">BootstrapClientMenuItem</helplink> methods:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientMenuItem.GetItem(index)">GetItem</helplink> - Returns a subitem specified by its index.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuItem.GetEnabled">GetEnabled</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuItem.SetEnabled(value)">SetEnabled</helplink> - Gets/sets the enabled state of the menu item.</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientMenuItem.GetIconCssClass">GetIconCssClass</helplink> / <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientMenuItem.SetIconCssClass(cssClass)">SetIconCssClass</helplink> - Gets/sets the CSS class of the icon displayed by the menu item.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuItem.GetText">GetText</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuItem.SetText(value)">SetText</helplink> - Gets/sets the text displayed by the menu item.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuItem.GetVisible">GetVisible</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuItem.SetVisible(value)">SetVisible</helplink> - Gets/sets the menu item's visibility.</li>
            </ul>
            <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Pager" Title="Pager" SeoTitle="Bootstrap Pager Demo">
      <DemoSection Key="DefaultPager" Title="Default Pager">
        <Description>
          <![CDATA[
                <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapPager">Pager</helplink> control provides a visual interface for custom paging in your web application.</p>
                <p>By default, the pager displays a summary indicating the current page number out of the total page count, and navigation buttons. The number of simultaneously displayed navigation buttons is controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPagerBase.NumericButtonCount">NumericButtonCount</helplink> property.</p>
                <p>To implement your custom paging logic, use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPagerBase.PageIndexChanging">PageIndexChanging</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPagerBase.PageIndexChanged">PageIndexChanged</helplink> events.</p>
                <p>Note that navigating between pages initiates a postback, which causes reloading the entire web page if the Pager control is not wrapped in an AJAX-enabled container. For demonstration purposes, this demo displays the Pager control within the <strong>asp:UpdatePanel</strong></p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="WithPageSizeItem" Title="With PageSize Item">
        <Description>
          <![CDATA[
                <p>The Page Size item provides a visual interface to specify the number of data items to be displayed within a single page. To enable the Page Size item, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerButtonProperties.Visible">PageSizeItemSettings.Visible</helplink> property to <strong>true</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="WithFirstAndLastButtons" Title="With First and Last Buttons">
        <Description>
          <![CDATA[
                <p>The First and Last pager buttons allow an end-user to quickly navigate to the first or last page of the paginated content. The visibility of the First and Last buttons is controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerButtonProperties.Visible">FirstPageButton.Visible</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerButtonProperties.Visible">LastPageButton.Visible</helplink> properties respectively.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="WithoutSummary" Title="Without Summary">
        <Description>
          <![CDATA[
                <p>It is possible to hide the summary from the pager. You can achieve this goal by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerButtonProperties.Visible">Summary.Visible</helplink> property to <strong>false</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="WithoutNumericButtons" Title="Without Numeric Buttons">
        <Description>
          <![CDATA[
                <p>You can hide numeric navigation buttons from the pager leaving only the Prev and Next buttons. To achieve this, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPagerBase.ShowNumericButtons">ShowNumericButtons</helplink> property to <strong>false</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="HideDisabledButtons" Title="Hide Disabled Buttons">
        <Description>
          <![CDATA[
                <p>The Pager control can automatically hide currently disabled navigation buttons (e.g., hide the Next and Last buttons when the last page is displayed). To activate this behavior, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPagerBase.ShowDisabledButtons">ShowDisabledButtons</helplink> property to <strong>false</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="EllipsisMode" Title="Ellipsis Mode">
        <Description>
          <![CDATA[
                <p>The ellipsis mode determines where in the pager the ellipsis symbol is placed to indicate page numbers that are omitted. The Pager control can display the ellipsis symbol inside or outside the range of pages, or never display the ellipsis symbol. To specify the ellipsis mode, assign the required <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerEllipsisMode">PagerEllipsisMode</helplink> enumeration value to the Pager control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPagerBase.EllipsisMode">EllipsisMode</helplink> property.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Ribbon" Title="Ribbon" SeoTitle="Bootstrap Ribbon Demo">
      <DemoSection Key="Default" Title="Default Ribbon">
        <Description>
          <![CDATA[
                <p>
                This demo demonstrates how to populate the DevExpress Bootstrap Ribbon control. 
                </p>
                <p>The Bootstrap Ribbon control supports the following item types: Button, Check Box, Color Button, Combo Box, Date Edit, Drop-Down Button, Drop-Down Toggle Button, Drop-Down Gallery, Gallery Bar, Option Button, Spin Edit, Template Item, Text Box, and Toggle Button.</p>
                ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Data_Binding" Title="Data Binding">
        <Description>
          <![CDATA[
                <p>
                This demo illustrates how the Bootstrap Ribbon control can be populated with information taken from a data source. The  Ribbon control can be bound to a data source in a standard manner - using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControl.DataSourceID">DataSourceID</helplink> or <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControlBase.DataSource">DataSource</helplink> property. While binding, the control automatically creates tabs, groups and items; and retrieves their property values from the corresponding data items. 
                </p>
                <p>
You can specify the data source fields to which the tabs, groups and items properties are mapped using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.TabDataFields">TabDataFields</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.GroupDataFields">GroupDataFields</helplink>, and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.ItemDataFields">ItemDataFields</helplink> properties, respectively.
                </p>
                <p>
Additionally, BootstrapRibbon provides specific events related to data binding that can be handled according to your application logic. 
                </p>
                <ul>
<li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRibbon.TabDataBound">TabDataBound</helplink> - Allows you to customize the settings of an individual tab immediately after it is bound to data.</li>
<li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRibbon.GroupDataBound">GroupDataBound</helplink> - Allows you to customize the settings of an individual group immediately after it is bound to data.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.ItemDataBound">ItemDataBound</helplink> - Allows you to customize the settings of an individual item immediately after it is bound to data.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControlBase.DataBound">DataBound</helplink> - Occurs after the control data binding is complete, and allows you to customize the control. </li>
                </ul>
                <p>
In this demo, the Ribbon control is bound to a standard XmlDataSource data source by specifying the DataSourceID property. The tab, group, and item property values are obtained automatically because the data item attributes are named according to the corresponding default property values.
                </p>
          ]]>
        </Description>
        <SourceFile>~/App_Data/MathInterface.xml</SourceFile>
      </DemoSection>
      <DemoSection Key="KeyboardSupport" Title="Keyboard Support">
        <Description>
          <![CDATA[
                <p>
The Ribbon control provides end-users with the capability to navigate through ribbon items using the keyboard. To enable this behavior, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.KeyboardSupport">KeyboardSupport</helplink> property to <strong>true</strong>. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.KeyTipModeShortcut">KeyTipModeShortcut</helplink> property allows you to specify a keyboard shortcut, which when pressed will show tab key tips. The key tips can also be displayed by calling the client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRibbon.ShowKeyTips">ShowKeyTips</helplink> method.
</p>
<p>
The ribbon control automatically generates access keys for tabs, groups, and items. However, you can specify the required access key manually by using the following properties.
</p>
<ul>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RibbonTab.AccessKey">RibbonTab.AccessKey</helplink> specifies the access key for a ribbon tab.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RibbonGroup.AccessKey">RibbonGroup.AccessKey</helplink> specifies the access key for a ribbon group.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RibbonItemBase.AccessKey">RibbonItemBase.AccessKey</helplink> specifies the access key for a ribbon item.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.FileTabAccessKey">ASPxRibbon.FileTabAccessKey</helplink> specifies the access key for a ribbon file tab.</li>
</ul>
<p>
You can disable the access key auto generation by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.AutoGenerateAccessKeys">AutoGenerateAccessKeys</helplink> property to <strong>false</strong>. However, in this case, you should specify access key for every element manually.
</p>
<p>Note that an access key is in effect provided that the corresponding key tip is currently displayed.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="QuickAccessToolbar" Title="Quick Access Toolbar">
        <Description>
          <![CDATA[
                <p>The Ribbon control provides a capability to define quick access toolbar items, that will be displayed above the ribbon tabs. These items are displayed even if the Ribbon is minimized.</p>
                <p>The client instance of a quick access toolbar item can be retrieved via the <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientRibbon.GetQuickAccessToolbarItem(name)">BootstrapClientRibbon.GetQuickAccessToolbarItem</helplink> method</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="OneLineMode" Title="One Line Mode">
        <Description>
          <![CDATA[
            <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRibbon">BootstrapRibbon</helplink> control can display all items within an active tab in one line, which makes the ribbon look more compact. Set the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRibbon.OneLineMode">OneLineMode</helplink> property to <b>true</b> to enable this mode.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Adaptivity" Title="Adaptivity">
        <Description>
          <![CDATA[
                <p>The Ribbon control relies to container's width to adjust own content</p>
                <p>The ribbon control automatically adjusts on browser window resize.</p>
                <p>If the container's width has changed while the window size remains the same, use the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControl.AdjustControl">BootstrapClientRibbon.AdjustControl</helplink> method to force ribbon's adjusting.</p>
                <p>The following steps are applied during adjusting to group's content until ribbon fits container:</p>
                <ol>
                    <li>Overlapping items are transfered to the next row if possible (group can contains up to 3 rows)</li>
                    <li>Small items' texts are collapsed</li>
                    <li>Groups are collapsed into group icon, group's content will be shown in popup below the group</li>
                </ol>
                <p>The described steps are applied to groups from the last group to first group.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Templates" Title="Templates">
        <Description>
          <![CDATA[
                <p>
          The Ribbon control supports the template technology allowing you to customize a control's appearance and layout.
          </p><p>
The look of the Ribbon control's default elements can be modified using a specific template that defines how an element will be rendered by a client browser. This control allows you to create templates for two elements: file tab (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.FileTabTemplate">FileTabTemplate</helplink>) and item (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RibbonTemplateItem.Template">Template</helplink>).
          </p><p>
 In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.FileTabTemplate">FileTabTemplate</helplink> property is used to replace tab text with an arrow image that invokes a popup menu. The content of a ribbon item is defined by its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RibbonTemplateItem.Template">Template</helplink> property. 
          </p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ClientSideEvents" Title="Client-Side Events">
        <Description>
          <![CDATA[
                <p>This Demo illustrates the capabilities of the Bootstrap Ribbon control's client events. This demo allows you to specify which client-side events you want to track. Interact with the Ribbon interface, and information about all tracked events raised in response of your actions will be displayed in the event log.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ClientSideAPI" Title="Client-Side Functionality">
        <Description>
          <![CDATA[
                <p>The Ribbon control offers an advanced client-side API allowing you to manipulate the control and its elements.</p>
                <p>This demo allows you to interactively explore capabilities of the Ribbon control's client-side API.</p>                
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Tabs" Title="Tabs" SeoTitle="Bootstrap Tabs Demo">
      <DemoSection Key="DefaultTabControl" Title="Default Tab Control">
        <Description>
          <![CDATA[
                <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTabControl">Tab Control</helplink> provides a visual interface for creating custom tabbed layouts. The Tab Control provides only navigation means and requires manually updating specific content to reflect a selected tab's changes.</p>          
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControl.ActiveTab">TabControl.ActiveTab</helplink> - specifies the current active tab.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTabControl.TabClick">TabControl.TabClick</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTabControlBase.TabClick">ClientTabControl.TabClick</helplink> - Occurs when an end-user clicks a tab.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTabControl.ActiveTabChanged">TabControl.ActiveTabChanged</helplink> - Occurs when an end-user changes an active tab by clicking another tab.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTabControlBase.ActiveTabChanging">ClientTabControl.ActiveTabChanging</helplink> - Occurs before an active tab is changed. Allows to cancel this operation or force processing the event on the server side.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TabBase.Name">BootstrapTab.Name</helplink> - Specifies a tab's name, which identifies the item in the Tabs collection.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TabBase.Text">BootstrapTab.Text</helplink> - Specifies a tab's display text.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTab.TabIconCssClass">BootstrapTab.TabIconCssClass</helplink> - Specifies the CSS class of an icon displayed by a tab.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.Tab.NavigateUrl">BootstrapTab.NavigateUrl</helplink> - Specifies a tab's navigation location.</li>
                </ul>
                <p>Use the <a href="../Layout/PageControl.aspx">Page Control</a> to associate specific contents with each tab.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="TabAlignment" Title="Tab Alignment">
        <Description>
          <![CDATA[
                <p>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.TabAlign">TabAlign</helplink> property to specify the alignment of tabs within the control. The following modes are supported: <strong>Justify</strong>, <strong>Left</strong>, <strong>Right</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Badges" Title="Badges">
        <Description>
          <![CDATA[
                <p>The Tab Control can display supplementary information for any tab within a badge. A badge can display a text, an icon or both. Use the following API to set the contents of item badges:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTab.Badge">BootstrapTab.Badge</helplink> - Gets or sets the tab badge on the server.</li>
                </ul>
                <p>The methods listed below allow you to manipulate badges on the client:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTab.GetBadgeText">BootstrapClientTab.GetBadgeText</helplink> - Gets the text of the tab badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTab.GetBadgeText">BootstrapClientTab.SetBadgeText</helplink> - Sets the text of the tab badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTab.GetBadgeIconCssClass">BootstrapClientTab.GetBadgeIconCssClass</helplink> - Gets the icon CSS class of the tab badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTab.SetBadgeIconCssClass(cssClass)">BootstrapClientTab.SetBadgeIconCssClass</helplink> - Sets the icon CSS class of the tab badge.</li>
                </ul>
                <p>Note that the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTab.Badge">BootstrapTab.Badge</helplink> property does not affect templated tabs.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AutoPostBack" Title="Auto PostBack">
        <Description>
          <![CDATA[
              <p>If the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.AutoPostBack">AutoPostBack</helplink> property is set to <strong>true</strong>, the Tab Control automatically initiates a postback when an end-user performs an action that you can handle on the server side (for example, switches the tab).</p>
              <p>Depending on the action, one of the following events fires on the server in response to a postback:</p>
              <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTabControl.ActiveTabChanged">ActiveTabChanged</helplink> - Fires when the active page was changed.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTabControl.ActiveTabChanging">ActiveTabChanging</helplink> - Fires when the active page is being changed.</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Data_Binding" Title="Data Binding">
        <Description>
          <![CDATA[
                <p>This demo illustrates how the Tab Control can be populated with tab information taken from a data source. The Tab Control supports standard data binding - any object that implements the <strong>IHierarchicalEnumerable</strong> or <strong>IHierarchicalDataSource</strong> interface may be used as a data source for this control. In this sample, the Tab Control is bound to the <strong>XmlDataSource</strong> component that obtains data from an xml file. Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHierarchicalDataWebControl.DataSourceID">DataSourceID</helplink> property to assign a data source to a Tab Control.</p>
                <p>A data-bound Tab Control automatically creates a tab for each data item. A created tab obtains values for its properties from data item attributes with matching names. You can also explicitly specify mappings between tab properties and names of data item attributes using the following properties.</p>
                <%--BeginCollapse--%>
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTabControl.ActiveTabIconCssClassField">ActiveTabIconCssClassField</helplink> - Specifies the name of a data field providing CSS classes of icons displayed by the active tab.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTabControl.TabIconCssClassField">TabIconCssClassField</helplink> - Specifies the name of a data field providing CSS classes of icons displayed by tabs.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControl.NameField">NameField</helplink> - Specifies the name of a data field providing unique identifiers to tabs.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControl.NavigateUrlField">NavigateUrlField</helplink> - Specifies the name of a data field providing tab navigation locations.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControl.TextField">TextField</helplink> - Specifies the name of a data field providing tab display texts.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControl.ToolTipField">ToolTipField</helplink> - Specifies the name of a data field providing tab tooltip texts.</li>
                </ul> 
                <p>You can modify settings of each auto-created <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTab">Tab</helplink> object during data binding in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControl.TabDataBound">TabDataBound</helplink> event.</p>
                <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Templates" Title="Templates">
        <Description>
          <![CDATA[
                <p>The Tab Control supports templates allowing you to customize control appearance and layout. 
                A template can be applied to all tabs (using control level templates) or a specific tab (using item level templates). 
                Moreover, templates can be specified for tabs in both active and inactive states. Use the following properties to specify templates.</p>
                <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTabControl">BootstrapTabControl</helplink> properties:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControl.TabTemplate">TabTemplate</helplink> / <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControl.ActiveTabTemplate">ActiveTabTemplate</helplink> - Specify common templates used for displaying the content of all tabs within the current tab control.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.TabTextTemplate">TabTextTemplate</helplink> / <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.ActiveTabTextTemplate">ActiveTabTextTemplate</helplink> - Specify common templates used for displaying the text content of all tabs within the current tab control.</li>
                </ul>
                
                <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTab">BootstrapTab</helplink> properties:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.Tab.TabTemplate">TabTemplate</helplink> / <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.Tab.ActiveTabTemplate">ActiveTabTemplate</helplink> - Specify templates used for displaying the content of the current tab.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.Tab.TabTextTemplate">TabTextTemplate</helplink> / <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.Tab.ActiveTabTextTemplate">ActiveTabTextTemplate</helplink> - Specify templates used for displaying the text content of the current tab.</li>
                </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ClientSideEvents" Title="Client-Side Events">
        <Description>
          <![CDATA[
                <p>This demo illustrates the capabilities of the Tab Control's client events and allows you to specify which client-side events you want to track.</p>
                <p>The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTab.name">tab.name</helplink> property of the event handler's parameter allows you to identify the tab for which an event has been raised.</p>
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTabControl.TabClick">TabClick</helplink> - Fires when an end-user clicks a toolbar item.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTabControl.ActiveTabChanging">ActiveTagChanging</helplink> - Fires when the active tab is being changed. Allows to cancel this operation or force processing the event on the server side.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTabControl.ActiveTabChanged">ActiveTabChanged</helplink> - Fires after the active tab was changed.</li>
                </ul>
                <p>Interact with a Tab control interface below to see the information about all tracked events raised in response to your actions in the event log.</p>        
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ClientSideAPI" Title="Client-Side Functionality">
        <Description>
          <![CDATA[
            <p>The Tab Control offers an advanced client-side API allowing you to manipulate the control and its elements.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.EnableClientSideAPI">EnableClientSideAPI</helplink> property specifies whether or not the client-side API is available. Note that the client-side API is automatically enabled if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.ClientInstanceName">ClientInstanceName</helplink> property is specified or any client-side event available through the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.ClientSideEvents">ClientSideEvents</helplink> property is handled.</p>
            <p>This demo allows you to interactively explore capabilities of the Tab Control's client-side API.</p>
            <%--BeginCollapse--%>
            <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTabControl._members">BootstrapClientTabControl</helplink> methods:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTabControl.GetTab(index)">GetTab</helplink> - Returns a tab specified by its index within the Tab Control's tab collection.</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTabControl.GetActiveTab">GetActiveTab</helplink> / <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTabControl.SetActiveTab(tab)">SetActiveTab</helplink> - Gets/sets the active tab.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTabControlBase.GetActiveTabIndex">GetActiveTabIndex</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTabControlBase.SetActiveTabIndex(index)">SetActiveTabIndex</helplink> - Gets/sets the active tab index.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.GetVisible">GetVisible</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.SetVisible(visible)">SetVisible</helplink> - Gets/sets the control's visibility.</li>
            </ul>
            <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTab._members">BootstrapClientTab</helplink> methods:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTab.GetEnabled">GetEnabled</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTab.SetEnabled(value)">SetEnabled</helplink> - Gets/sets the enabled state of the tab.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTab.GetText">GetText</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTab.SetText(value)">SetText</helplink> - Gets/sets the text displayed by the tab.</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTab.GetIconCssClass">GetIconCssClass</helplink> / <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTab.SetIconCssClass(cssClass)">SetIconCssClass</helplink> - Gets/sets the CSS class of the icon displayed by the tab.</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTab.GetActiveIconCssClass">GetActiveIconCssClass</helplink> / <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTab.SetActiveIconCssClass(cssClass)">SetActiveIconCssClass</helplink> - Gets/sets the CSS class of the icon displayed by the tab when it is active.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTab.GetVisible">GetVisible</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTab.SetVisible(value)">SetVisible</helplink> - Gets/sets the tab's visibility.</li>
            </ul>
            <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Toolbar" Title="Toolbar" SeoTitle="Bootstrap Toolbar Demo">
      <DemoSection Key="DefaultToolbar" Title="Default Toolbar">
        <Description>
          <![CDATA[
                <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapToolbar">Toolbar Control</helplink> allows you to supply your web application with a lightweight adaptive toolbar interface.</p>
                <p>The Toolbar Control is presented as a set of buttons arranged in groups. Toolbar buttons are elements of the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapToolbar.Items">Items</helplink> collection. Each button can display an icon, a text or both.</p>                
                <ul>
                    <li>Client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.ItemClick">ItemClick</helplink> and server <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.ItemClick">ItemClick</helplink> events - Occur when an end-user clicks a toolbar button.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.Name">BootstrapToolbarItem.Name</helplink> - Specifies a button's name, which identifies the item in the toolbar's Items collection.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.Text">BootstrapToolbarItem.Text</helplink> - Specifies a button's display text.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.BeginGroup">BootstrapToolbarItem.BeginGroup</helplink> - If set to true, the button becomes the first button in a new button group.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapToolbarItemBase.IconCssClass">BootstrapToolbarItem.IconCssClass</helplink> - Specifies the CSS class of an icon displayed by a toolbar item.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.NavigateUrl">BootstrapToolbarItem.NavigateUrl</helplink> - Specifies a button's navigation location. When this property is specified, the button is rendered as a hyperlink.</li>
                </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DropDown" Title="DropDown Items">
        <Description>
          <![CDATA[
                <p>Each toolbar item can have multiple child items, which are specified as elements of the parent item's <strong>Items</strong> collection. Note that all root-level toolbar items are <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapToolbarItem">BootstrapToolbarItem</helplink> objects, while items of subsequent hierarchy levels are <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapToolbarMenuItem">BootstrapToolbarMenuItem</helplink> objects.</p>
                <p>A root-level menu item that has child items is rendered as a drop-down button displaying a hierarchical popup menu when clicked.</p> 
                <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapToolbarMenuItem.DropDownMode">DropDownMode</helplink> property allows you to specify that an item should be split into two buttons, one of which behaves like a regular button, and the other invokes a popup menu. You can process clicks on these buttons separately.</p>         
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="RenderOption" Title="Render Option">
        <Description>
          <![CDATA[
                <p>You can specify contextual styles for the Toolbar control's root-level elements using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapToolbarItemBootstrapSpecificSettings.RenderOption">Item.SettingsBootstrap.RenderOption</helplink> property. Refer to the <a href="https://getbootstrap.com/docs/3.4/css/#buttons-options">Buttons - Options</a> section of the Bootstrap documentation to learn more about different style options for buttons provided by the Bootstrap framework</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ItemSelection" Title="Item Selection">
        <Description>
          <![CDATA[
                <p>The Toolbar control supports selecting items with a mouse click. Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.AllowSelectItem">AllowSelectItem</helplink> property to true to enable this. Only one item can be selected at a time.</p>
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.AllowSelectItem">AllowSelectItem</helplink> - Specifies whether item selection is allowed.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.Selected">BootstrapToolbarItem.Selected</helplink> - Specifies a root-level item's selection status.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.Selected">BootstrapToolbarMenuItem.Selected</helplink> - Specifies a nested menu item's selection status.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapToolbar.SelectedItem">BootstrapToolbar.SelectedItem</helplink> - Gets or sets the selected item on the server side.</li>
                </ul>
                <p>Handle the client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.ItemClick">ItemClick</helplink> or server <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapToolbar.ItemClick">ItemClick</helplink> event to detect a selection change. You can identify the clicked item by the value of its <strong>Name</strong> property.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ItemChecking" Title="Item Checking">
        <Description>
          <![CDATA[
                <p>The toolbar control allows you to create a Radio Group UI by letting an end-user check toolbar buttons and popup menu items.</p>
                <p>To enable this functionality, arrange toolbar items into groups using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.GroupName">BootstrapToolbarItem.GroupName</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.GroupName">BootstrapToolbarMenuItem.GroupName</helplink> properties. Similarly to radio buttons, only one toolbar item within a group can be checked at a time. Also you can set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.GroupName">GroupName</helplink> to a unique value to force the menu item to change its checked state on every click.</p>
                <p>You can detect a change in an item's checked state by handling the client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.ItemClick">ItemClick</helplink> or server <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapToolbar.ItemClick">ItemClick</helplink> event.</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.Checked">Item.Checked</helplink> - specifies the item's checked state</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuItem.GetChecked">ClientItem.GetChecked</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuItem.SetChecked(value)">ClientItem.SetChecked</helplink> - gets/sets the item's checked state on the client-side</li>
                </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AutoPostback" Title="Auto Postback">
        <Description>
          <![CDATA[
                <p>The Auto Postback feature allows the Toolbar control to automatically initiate a postback when an end-user performs an action that you can handle on the server side (for example, clicks a toolbar item). Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.AutoPostBack">AutoPostBack</helplink> property to <strong>true</strong> to enable this feature.</p>
                <p>Depending on the action, one of the following events fires on the server in response to a postback:</p>
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapToolbar.ItemClick">ItemClick</helplink> - Fires when a toolbar item has been clicked.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapToolbar.ItemCommand">ItemCommand</helplink> - Fires when a control contained within a templated toolbar item raises the <strong>Command</strong> event.</li>
                </ul>
                <p>Note that handling any of these events enables the Auto Postack feature.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Data_Binding" Title="Data Binding">
        <Description>
          <![CDATA[
                <p>The Toolbar control supports binding to a data source which can be any object that implements the IHierarchicalEnumerable or <strong>IHierarchicalDataSource</strong> interface (for example, <strong>SiteMapDataSource</strong>, <strong>XmlDataSource</strong>, etc.). Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHierarchicalDataWebControl.DataSourceID">DataSourceID</helplink> property to assign a data source to a Toolbar control.</p>
                <p>A data-bound Toolbar control automatically creates a toolbar item for each data item. A created item's properties obtain values from data item attributes with matching names. You can also explicitly specify mappings between toolbar item properties and data item attribute names using the following properties:</p>
                <%--BeginCollapse--%>
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapMenuBase.BeginGroupField">BeginGroupField</helplink> - Specifies the name of a data field that provides values defining whether a toolbar item should start a new group.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapMenuBase.IconCssClassField">IconCssClassField</helplink> - Specifies the name of a data field providing CSS classes of icons displayed by toolbar items.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.NameField">NameField</helplink> - Specifies the name of a data field providing toolbar item names.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.NavigateUrlField">NavigateUrlField</helplink> - Specifies the name of a data field providing toolbar item navigation locations.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.TextField">TextField</helplink> - Specifies the name of a data field providing toolbar item display texts.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ToolTipField">ToolTipField</helplink> - Specifies the name of a data field providing toolbar item tooltip texts.</li>
                </ul>
                <%--EndCollapse--%>
          ]]>
        </Description>
        <SourceFile>~/App_Data/ToolbarItems.xml</SourceFile>
      </DemoSection>
      <DemoSection Key="Templates" Title="Templates">
        <Description>
          <![CDATA[
                <p>The Toolbar control supports templates allowing you to customize control appearance and layout. A template can be applied to all toolbar items (using control level templates) or a specific item (using item level templates). Use the following properties to specify templates.</p>
                <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapToolbar">BootstrapToolbar</helplink> properties:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ItemTemplate">ItemTemplate</helplink> - Specifies a common template used for displaying the content of all items within the current toolbar control.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.RootItemTemplate">RootItemTemplate</helplink> - Specifies a common template used for displaying the content of root items within the current toolbar control.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ItemTextTemplate">ItemTextTemplate</helplink> - Specifies a common template used for displaying the text content of all items within the current toolbar control.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.RootItemTextTemplate">RootItemTextTemplate</helplink> - Specifies a common template used for displaying the text content of root items within the current toolbar control.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.SubMenuTemplate">SubMenuTemplate</helplink> - Specifies a common template used for displaying the content of all submenus within the current toolbar control.</li>
                </ul>
                
                <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapToolbarItem">BootstrapToolbarItem</helplink> properties:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.Template">Template</helplink> - Specifies a template used for displaying the content of the current item.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.TextTemplate">TextTemplate</helplink> - Specifies a template used for displaying the text content of the current item.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.SubMenuTemplate">SubMenuTemplate</helplink> - Specifies a template used for displaying the content of the submenu of the current item.</li>
                </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AdaptivitySettings" Title="Adaptivity Settings">
        <Description>
          <![CDATA[
            <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapToolbar">BootstrapToolbar</helplink> control supports adaptive mode.</p>
			<p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapToolbarSettingsAdaptivity.Title">SettingsAdaptivity.Title</helplink> property specifies the toolbar title.</p>
			<p>The following properties control how the toolbar responds when the container's width changes:</p>
			<ol>
				<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuSettingsAdaptivity.EnableCollapseRootItemsToIcons">SettingsAdaptivity.EnableCollapseRootItemsToIcons</helplink> - If <b>true</b>, the text of all items that contain icons are hidden. Additionally, you can use the item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.AdaptivePriority">BootstrapToolbarItem.AdaptivePriority</helplink> property to hide a specific item first of others.</li>
				<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuSettingsAdaptivity.EnableAutoHideRootItems">SettingsAdaptivity.EnableAutoHideRootItems</helplink> - If <b>true</b>, the toolbar combines root items one by one in the root submenu until the toolbar contains the minimum number of root items (specified in the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapToolbarSettingsAdaptivityBase.MinRootItemsCount">SettingsAdaptivity.MinRootItemsCount</helplink> property).</li>
			</ol>
          ]]>
        </Description>
      </DemoSection>

      <DemoSection Key="ClientSideEvents" Title="Client-Side Events">
        <Description>
          <![CDATA[
                <p>This demo illustrates the Toolbar control's client event capabilities and allows you to specify which client-side events you want to track.</p>
                <p>The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuItem.name">item.name</helplink> property of the event handler's parameter allows you to identify the item for which an event has been raised.</p>
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.ItemClick">ItemClick</helplink> - Fires when an end-user clicks a toolbar item.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.ItemMouseOver">ItemMouseOver</helplink> - Fires when the mouse cursor moves onto a toolbar item.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.ItemMouseOut">ItemMouseOut</helplink> - Fires when the mouse cursor moves outside a toolbar item.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.PopUp">PopUp</helplink> - Fires for a toolbar item when it displays a drop-down menu.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.CloseUp">CloseUp</helplink> - Fires for a toolbar item when its drop-down menu is closed.</li>
                </ul>
                <p>Interact with the interface of a Toolbar control below to see the information about all tracked events raised in response to your actions in the event log.</p>        
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ClientSideAPI" Title="Client-Side Functionality">
        <Description>
          <![CDATA[
                <p>The Toobar control offers an advanced client-side API allowing you to manipulate the control and its elements.</p>
                <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.EnableClientSideAPI">EnableClientSideAPI</helplink> property specifies whether or not the client-side API is available. Note that the client-side API is automatically enabled if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ClientInstanceName">ClientInstanceName</helplink> property is specified or any client-side event available through the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ClientSideEvents">ClientSideEvents</helplink> property is handled.</p>
                <p>This demo allows you to interactively explore capabilities of the Toolbar control's client-side API.</p>
                <%--BeginCollapse--%>
                <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientToolbar">BootstrapClientToolbar</helplink> methods:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.GetItem(index)">GetItem</helplink> - Returns a toolbar item specified by its index within the item collection.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.GetSelectedItem">GetSelectedItem</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.SetSelectedItem(item)">SetSelectedItem</helplink> - Gets/sets the selected toolbar item.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.GetVisible">GetVisible</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.SetVisible(visible)">SetVisible</helplink> - Gets/set the toolbar control's visibility.</li>
                </ul>
                
                <p>BootstrapClientMenuItem methods</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientMenuItem.GetItem(index)">GetItem</helplink> - Returns a subitem specified by its index within an item's subitem collection.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuItem.GetEnabled">GetEnabled</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuItem.SetEnabled(value)">SetEnabled</helplink> - Gets/sets the enabled state of the toolbar item.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientMenuItem.GetIconCssClass">GetIconCssClass</helplink> / <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientMenuItem.SetIconCssClass(cssClass)">SetIconCssClass</helplink> - Gets/sets the CSS class of the icon displayed by the item.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuItem.GetText">GetText</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuItem.SetText(value)">SetText</helplink> - Gets/sets the text displayed by the item.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuItem.GetVisible">GetVisible</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuItem.SetVisible(value)">SetVisible</helplink> - Gets/sets the item's visibility.</li>
                </ul>                 
                <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="TreeView" Title="TreeView" SeoTitle="Bootstrap TreeView Demo">
      <DemoSection Key="DefaultTreeView" Title="Default TreeView">
        <Description>
          <![CDATA[
                <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTreeView">Tree View</helplink> is a control used to display hierarchical data in tree-like form. Each Tree View node is represented by a <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTreeViewNode">BootstrapTreeViewNode</helplink> object and provides access to a collection of its sub-nodes through the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTreeViewNode.Nodes">Nodes</helplink> collection property.</p>
                <p>The client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeView.NodeClick">NodeClick</helplink> and server <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTreeView.NodeClick">NodeClick</helplink> events occur when an end-user clicks a Tree View node.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="NodesSelection" Title="Nodes Selection">
        <Description>
          <![CDATA[
                <p>The Tree View control supports selection of nodes with a mouse click. To allow node selection, set the control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.AllowSelectNode">AllowSelectNodes</helplink> property to <strong>true</strong>. Note that only one node can be selected at a time.</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTreeView.SelectedNode">TreeView.SelectedNode</helplink> - gets or sets the selected node within the Tree View control</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeView.SetSelectedNode(node)">ClientTreeView.SetSelectedNode</helplink> - selects the specified node</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeView.GetSelectedNode">ClientTreeView.GetSelectedNode</helplink> - returns the selected node</li>
                </ul>
                <p>Handle the client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeView.NodeClick">ItemClick</helplink> or server <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTreeView.NodeClick">ItemClick</helplink> event to detect a selection change. You can identify the clicked item by the value of its Name property.</p>
                <p>Moreover, the Tree View control can automatically select an item for a current page. You can control this behavior using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.SyncSelectionMode">SyncSelectionMode</helplink> property.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="LoadNodesOnCallbacks" Title="Load Nodes on Callbacks">
        <Description>
          <![CDATA[
                <p>The Tree View control can obtain its node from the server as needed using callbacks. When this mode is activated, the contents of collapsed nodes are not present on the client until these nodes are expanded. To specify whether to use the callback technology to transfer node data to from server, use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.EnableCallBacks">EnableCallBacks</helplink> property.</p>
                <p><small>Note that in this demo the callback time is intentionally extended so that the loading indicator is visible during callbacks.</small></p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="HideExpandButtons" Title="Hide Expand Buttons">
        <Description>
          <![CDATA[
                <p>You can control whether to display the Tree View's <strong>Hide (-)</strong> and <strong>Expand (+)</strong> buttons using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.ShowExpandButtons">ShowExpandButtons</helplink> property.</p>
                <p>Collapsing and expanding actions will remain available for end-users via a mouse double click. To prevent these actions, subscribe to the client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeView.ExpandedChanging">ExpandedChanging</helplink> event and set <strong>e.cancel</strong> to the <strong>true</strong> value in your event handler.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Badges" Title="Badges">
        <Description>
          <![CDATA[
                <p>The TreeView can display supplementary information for any node within a badge. A badge can display a text, an icon or both. Use the following API to configure badges on the server side:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTreeViewNode.Badge">BootstrapTreeViewNode.Badge</helplink> - Gets or sets the node badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTreeViewNode.Badge">BootstrapTreeViewVirtualNode.Badge</helplink> - Gets or sets the virtual node badge.</li>
                </ul>
                <p>The methods listed below allow you to manipulate badges on the client:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTreeViewNode.GetBadgeText">BootstrapClientTreeViewNode.GetBadgeText</helplink> - Gets the text of the node badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTreeViewNode.SetBadgeText(text)">BootstrapClientTreeViewNode.SetBadgeText</helplink> - Sets the text of the node badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTreeViewNode.GetBadgeIconCssClass">BootstrapClientTreeViewNode.GetBadgeIconCssClass</helplink> - Gets the icon CSS class of the node badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTreeViewNode.SetBadgeIconCssClass(cssClass)">BootstrapClientTreeViewNode.SetBadgeIconCssClass</helplink> - Sets the icon CSS class of the node badge.</li>
                </ul>
                <p>Note that the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTreeViewNode.Badge">BootstrapTreeViewNode.Badge</helplink> property does not affect templated nodes.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AutoPostBack" Title="Auto PostBack">
        <Description>
          <![CDATA[
                <p>The Auto Postback feature allows the TreeView control to automatically initiate a postback when an end-user clicks or expands/collapses a node. Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.AutoPostBack">AutoPostBack</helplink> property to <strong>true</strong> to enable this feature.</p>
                <p>Use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTreeView.NodeClick">NodeClick</helplink> event to process the node click on the server side. Also, you can process the expand/collapse actions on the server side via the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTreeView.ExpandedChanging">ExpandedChanging</helplink> and <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTreeView.ExpandedChanged">ExpandedChanged</helplink> events.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Data_Binding" Title="Data Binding">
        <Description>
          <![CDATA[
                <p>The Tree View control supports binding to a data source, which can be any object that implements the <strong>IHierarchicalEnumerable</strong> or <strong>IHierarchicalDataSource</strong> interface (e.g., <strong>SiteMapDataSource</strong>, <strong>XmlDataSource</strong>, etc.). Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHierarchicalDataWebControl.DataSourceID">DataSourceID</helplink> property to assign a data source to a Tree View.</p>    
                <p>A data-bound Tree View automatically creates a node for each data item. A created node obtains values for its properties from data item attributes with matching names. You can also explicitly specify mappings between node properties and names of data item attributes using the following properties.</p>
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTreeView.IconCssClassField">IconCssClassField</helplink> - Specifies the name of a data field providing CSS classes of icons displayed by Tree View nodes.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.NameField">NameField</helplink> - Specifies the name of a data field providing unique identifiers to nodes.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.NavigateUrlField">NavigateUrlField</helplink> - Specifies the name of a data field providing node navigation locations.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.TextField">TextField</helplink> - Specifies the name of a data field providing node display texts.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.ToolTipField">ToolTipField</helplink> - Specifies the name of a data field providing node tooltip texts.</li>
                </ul>
                <p>You can modify settings of each auto-created <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTreeViewNode">Node</helplink> object during data binding in the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTreeView.NodeDataBound">NodeDataBound</helplink> event.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="VirtualMode" Title="Virtual Mode">
        <Description>
          <![CDATA[
                <p>When the Tree View control is functioning in Virtual mode, child nodes are created and initialized only when their parent node is expanded. To activate the Virtual mode, handle the Tree View's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.VirtualModeCreateChildren">VirtualModeCreateChildren</helplink> event, which occurs when expanding a parent node for the first time. In the event handler, programmatically create a list of <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTreeViewVirtualNode">BootstrapTreeViewVirtualNode</helplink> objects representing child nodes for the currently expanded node. For each created node that has no children, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TreeViewVirtualNode.IsLeaf">IsLeaf</helplink> property to <strong>true</strong> so that the node does not display the expand button.</p>
                <p><small>Note that in this demo the callback time is intentionally extended so that the loading indicator is visible during callbacks.</small></p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Templates" Title="Templates">
        <Description>
          <![CDATA[
                <p>The Tree View control supports templates allowing you to customize control appearance and layout. You can define templates for a node's text or the entire node content. A template can be applied to all nodes (using control level templates) or a specific node (using node level templates). Use the following properties to specify templates.</p>
                <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTreeView">BootstrapTreeView</helplink> properties:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.NodeTemplate">NodeTemplate</helplink> - Specifies a common template used for displaying all nodes' content in the current tree view control.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.NodeTextTemplate">NodeTextTemplate</helplink> - Specifies a common template used for displaying all nodes' text content in the current tree view control.</li>
                </ul>
                
                <p>BootstrapTreeViewNode properties:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TreeViewNode.Template">Template</helplink> - Specifies a template used for displaying the current node's content.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TreeViewNode.TextTemplate">TextTemplate</helplink> - Specifies a template used for displaying the current node's text content.</li>
                </ul>
           ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ClientSideEvents" Title="Client-Side Events">
        <Description>
          <![CDATA[
                <p>This demo illustrates the capabilities of the Tree View control's <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTreeView._members">client events</helplink> and allows you to specify which client-side events you want to track. Interact with the Tree View interface to see the information about all tracked events raised in response to your actions in the event log.</p>
                <p>The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeViewNode.name">node.name</helplink> property of the event handler's parameter allows you to identify the node for which an event has been raised.</p>
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeView.NodeClick">NodeClick</helplink> - Fires when an end-user clicks a TreeView node.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeView.ExpandedChanging">ExpandedChanging</helplink> - Fires before the expansion state of a node is changed. Allows to cancel this operation or force processing the event on the server side.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeView.ExpandedChanged">ExpandedChanged</helplink> - Fires after the expansion state of a node is changed.</li>
                </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ClientSideAPI" Title="Client-Side Functionality">
        <Description>
          <![CDATA[
                <p>The Tree View control offers an advanced client-side API allowing you to manipulate the control and its elements.</p>
                <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.EnableClientSideAPI">EnableClientSideAPI</helplink> property specifies whether or not the client-side API is available. Note that the client-side API is automatically enabled if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.ClientInstanceName">ClientInstanceName</helplink> property is specified or any client-side event available through the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.ClientSideEvents">ClientSideEvents</helplink> property is handled.</p>
                <p>This demo allows you to interactively explore capabilities of the Tree View control's client-side API.</p>
                <%--BeginCollapse--%>
                <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTreeView">BootstrapClientTreeView</helplink> methods:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeView.CollapseAll">CollapseAll</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeView.ExpandAll">ExpandAll</helplink> - Collapses/expands all nodes.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTreeView.GetNode(index)">GetNode</helplink> - Returns a node specified by its index.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTreeView.GetNodeByText(text)">GetNodeByText</helplink> - Returns a node specified by its text.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTreeView.GetSelectedNode">GetSelectedNode</helplink> and <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTreeView.SetSelectedNode(node)">SetSelectedNode</helplink> - Gets/sets the selected node.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.GetVisible">GetVisible</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.SetVisible(visible)">SetVisible</helplink> - Gets/sets the control's visibility.</li>
                </ul>                
                <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTreeViewNode">BootstrapClientTreeViewNode</helplink> methods:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTreeViewNode.GetNode(index)">GetNode</helplink> - Returns a subnode specified by its index.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTreeViewNode.GetNodeByText(text)">GetNodeByText</helplink> - Returns a subnode specified by its text.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeViewNode.GetExpanded">GetExpanded</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeViewNode.SetExpanded(value)">SetExpanded</helplink> - Gets/sets the expanded state of the node.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTreeViewNode.GetIconCssClass">GetIconCssClass</helplink> / <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTreeViewNode.SetIconCssClass(cssClass)">SetIconCssClass</helplink> - Gets/sets the CSS class of the icon displayed by the node.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeViewNode.GetText">GetText</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeViewNode.SetText(value)">SetText</helplink> - Gets/sets the text displayed by the node.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeViewNode.GetVisible">GetVisible</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeViewNode.SetVisible(value)">SetVisible</helplink> - Gets/sets the node's visibility.</li>
                </ul>
                <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
  </DemoGroup>

  <DemoGroup Key="Layout" Title="Layout" SeoTitle="Bootstrap Layout Controls Demo" IconCssClass="icon icon-form" OrderIndex="7">
    <PreDescription>
      <![CDATA[
        <p>The DevExpress Bootstrap Controls suite ships with a set of layout controls allowing you to build complex adaptive user interfaces.</p>
      ]]>
    </PreDescription>
    <Description>
      <![CDATA[
        <p>The included controls provide the following functionality:</p>
        <ul>
          <li>The Callback Panel is an AJAX-enabled container whose contents can be updated on demand using callbacks.</li>
          <li>The Form Layout is a container control that takes advantage of the Bootstrap grid system to arrange its contents allowing you to create adaptive form layouts.</li>
          <li>The Page Control allows you to present content as a set of tabbed pages.</li>
          <li>The Popup Control is used to display overlapping temporary windows that appear separately from an application's main window, and are typically used to display quick reference information.</li>
          <li>The Modal Control is used to display modal dialog boxes.</li>
        </ul>
      ]]>
    </Description>
    <Demo Key="CallbackPanel" Title="Callback Panel" SeoTitle="Bootstrap Callback Panel Demo">
      <DemoSection Key="DefaultCallbackPanel" Title="Default Callback Panel">
        <Description>
          <![CDATA[
            <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCallbackPanel">Callback Panel</helplink> control is an AJAX-enabled container that refreshes its contents using callbacks to the server without reloading the entire page. Use the client <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientCallbackPanel.PerformCallback(parameter)">PerformCallback</helplink> method to initiate a callback. Handle the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCallbackPanel.Callback">Callback</helplink> event to process a callback on the server side.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientCallbackPanel.PerformCallback(parameter)">PerformCallback</helplink> method takes an optional parameter that specifies arbitrary string data to pass to the server. On the server-side, you can access this data through the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCallbackPanel.Callback">Callback</helplink> event's parameter using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CallbackEventArgsBase.Parameter">Parameter</helplink> property.</p>
            <p>The client <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientCallbackPanel.BeginCallback">BeginCallback</helplink> and <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientCallbackPanel.EndCallback">EndCallback</helplink> events allow you to perform any client-side actions just before the callback is initiated and after server-side processing has completed.</p>
            <p><small>Note that in this demo the callback time is intentionally extended so that the loading indicator is visible during callbacks.</small></p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="CallbackAnimation" Title="Callback Animation">
        <Description>
          <![CDATA[
            <p>When callback animation is enabled, the callback panel contents fade out when the callback is initiated and updated contents fade in when the response is obtained. Set the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCallbackPanel.EnableCallbackAnimation">EnableCallbackAnimation</helplink> property to <strong>true</strong> to enable animations.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ClientSideEvents" Title="Client-Side Events">
        <Description>
          <![CDATA[
            <p>This demo illustrates the capabilities of the Callback Panel's client events and allows you to specify which client-side events you want to track.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientCallbackPanel.BeginCallback">BeginCallback</helplink> - Fires before a callback is initiated.</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientCallbackPanel.EndCallback">EndCallback</helplink> - Fires after the server returned a response.</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientCallbackPanel.CallbackError">CallbackError</helplink> - Fires if the server returned an error.</li>
            </ul>
            <p>Click the Update button to initiate a callback to the server. Click the Force Error button for the server to throw an exception while processing a callback.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="FormLayout" Title="Form Layout" SeoTitle="Bootstrap Form Layout Demo">
      <DemoSection Key="DefaultFormLayout" Title="Default Form Layout">
        <Description>
          <![CDATA[
            <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFormLayout">Form Layout</helplink> control simplifies the manner in which you create edit forms. It allows you to quickly create form layouts of any complexity by combining the order and hierarchy of the control's layout elements.</p>
            <p>The Form Layout control renders its contents using the Bootstrap grid system markup. In compliance with the grid system functionality, each item within a Form Layout occupies between 1 and 12 virtual columns. The number of virtual columns an item occupies determines how it is sized relative to other items in the current row. This value can be defined separately for four different screen resolution groups - large, medium, small, and extra small. The following Layout Item properties allow you to define how many virtual columns an item occupies in different resolutions:</p>
            <%--BeginCollapse--%>
            <ul>
              <li><strong>ColSpanXl</strong> - Extra large screens (1200px or wider).</li>
              <li><strong>ColSpanLg</strong> - Large screens (992px or wider).</li>
              <li><strong>ColSpanMd</strong> - Medium screens (768px or wider).</li>
              <li><strong>ColSpanSm</strong> - Small screens (576px or wider).</li>
              <li><strong>ColSpanXs</strong> - Extra small screens (less than 576px).</li>
            </ul>
            <p>Note that all layout items are rendered as <strong>.col</strong> elements within a single <strong>.row</strong> container by default. A browser moves an item to the next row if there are not enough virtual columns (with the current screen resolution) within the current virtual row to fit the item. Set the item's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapLayoutItem.BeginRow">BeginRow</helplink> property to <strong>true</strong> to specify if an item should be rendered within a new row.</p>
            <p>Refer to the <a href="https://getbootstrap.com/docs/3.4/css/#grid">Bootstrap documentation</a> for more information on the Bootstrap Grid system, and the <helplink href="https://docs.devexpress.com/AspNetBootstrap/118834/site-layout/form-layout/form-layout-rendering">Form Layout Rendering</helplink> documentation topic to learn about the Form Layout rendering specifics and how to apply these specifics to construct efficient adaptive layouts.</p>
            <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="VerticalLayout" Title="Vertical Layout">
        <Description>
          <![CDATA[       
            <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFormLayout.LayoutType">LayoutType</helplink> property defines how layout item caption and layout item contents are stacked. In this demo, the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFormLayout.LayoutType">LayoutType</helplink> property is set to <strong>Vertical</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="BeginRow" Title="Item Wrapping">
        <Description>
          <![CDATA[
            <p>The Form Layout control uses <a href="https://getbootstrap.com/docs/4.0/layout/grid/">Bootstrap - Grid System</a> classes to render layout items. By default, all items are created as <strong>.col</strong> elements within a single <strong>.row</strong> container. A browser automatically moves an item to the next row if there are not enough virtual columns in a row to fit the item in the current screen resolution. This behavior is known as <a href="https://getbootstrap.com/docs/4.0/layout/grid/#column-wrapping">column wrapping</a> in Bootstrap. If you wish to force an item to be displayed on a new row, set the item's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapLayoutItem.BeginRow">BeginRow</helplink> property to true.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="CaptionAndHelpText" Title="Caption and HelpText">
        <Description>
          <![CDATA[
            <p>The Form Layout control allows you to supply each layout item with a caption and help text providing supplementary information about the displayed editor's purpose.</p>
            <p>A caption can be provided with an additional optional or required mark that indicates whether the field is treated as optional or required when validating the form data.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.LayoutItem.Caption">BootstrapLayoutItem.Caption</helplink> - specifies a layout item's caption.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.LayoutItem.HelpText">BootstrapLayoutItem.HelpText</helplink> - specifies a layout item's help text.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFormLayout.RequiredMark">RequiredMark</helplink> - specifies the required mark's text.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFormLayout.OptionalMark">OptionalMark</helplink> - specifies the optional mark's text.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Groups" Title="Groups">
        <Description>
          <![CDATA[
            <p>A layout group (<helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapLayoutGroup">BootstrapLayoutGroup</helplink>) is a container for layout items and other layout groups. A group stores its child items in the Items collection.</p>
            <p>A layout group exposes <strong>ColSpanXX</strong> properties, which allow you to align layout groups based on the display resolution in the same way, in which you align layout items (see the <a href="#DefaultFormLayout">Default FormLayout</a> demo). 
               Note that a layout group cannot be placed in one Bootstrap grid row with a layout item. If there are an item and a group in one layout item collection, the group is placed on a new row as if it had the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapLayoutGroup.BeginRow">BeginRow</helplink> property set to <strong>true</strong>.</p>
            <p>A layout group exposes the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapLayoutGroup.Decoration">GroupDecoration</helplink> property which can be set to either <strong>Card</strong> or <strong>None</strong>. If this property is set to <strong>Card</strong>, the group has a border and can display caption provided that the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.LayoutItemBase.ShowCaption">ShowCaption</helplink> property is set to <strong>true</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="TabbedGroups" Title="Tabbed Groups">
        <Description>
          <![CDATA[
            <p>A tabbed layout group (<helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTabbedLayoutGroup">BootstrapTabbedLayoutGroup</helplink>) is a tabbed container for layout items and other layout groups. A group stores its child items in the Items collection. 
               A tabbed group displays its child elements on a tab page with a caption. Note that child layout items are displayed on a tab page without a caption and child layout groups have no decoration.</p>
            <p>A layout group exposes <strong>ColSpanXX</strong> properties, which allow you to align layout groups based on the display resolution in the same way, in which you align layout items (see the <a href="#DefaultFormLayout">Default FormLayout</a> demo). 
              Note that a layout group cannot be placed in one Bootstrap grid row with a layout item. If there are an item and a group in one layout item collection, the group is placed on a new row as if it had the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapLayoutGroup.BeginRow">BeginRow</helplink> property set to <strong>true</strong>.</p>
            <p>The tabbed layout group exposes the following properties specific to tabbed UI:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TabbedLayoutGroup.ActiveTabIndex">ActiveTabIndex</helplink></li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TabbedLayoutGroup.TabAlign">TabAlign</helplink></li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTabbedLayoutGroup.SettingsTabPages">SettingsTabPages</helplink></li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Data_Binding" Title="Data Binding">
        <Description>
          <![CDATA[
            <p>You can use the Form Layout control to display and edit items from any data source. In this demo, an object containing edited data is assigned to the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControlBase.DataSource">DataSource</helplink> property in the code-behind. Form Layout items are contained in the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFormLayout.Items">Items</helplink> collection and are bound to data source fields using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.LayoutItem.FieldName">LayoutItem.FieldName</helplink> property. Each layout item contains a DevExpress data editor that allows editing values of the corresponding field type. If no items are specified explicitly, the Form Layout control automatically generates layout items with suitable editors for each data field.</p>
            <p>When the edit form is submitted to the server, new field values are obtained via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFormLayout.GetNestedControlValueByFieldName(System.String)">GetNestedControlValueByFieldName</helplink> method in the code-behind.</p>
                  
            <p>To place a custom control in a layout item, handle the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFormLayout.LayoutItemDataBinding">BootstrapFormLayout.LayoutItemDataBinding</helplink> event.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="PageControl" Title="Page Control" SeoTitle="Bootstrap Page Control Demo">
      <DemoSection Key="DefaultPageControl" Title="Default Page Control">
        <Description>
          <![CDATA[
                <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapPageControl">Page Control</helplink> displays content as a set of tabbed pages. Each page in the Page Control serves as a separate child control container allowing you to associate specific page content with each displayed tab.</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl.ActiveTabPage">TabControl.ActiveTabPage</helplink> - specifies the current visible tab page.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapPageControl.TabClick">TabControl.TabClick</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTabControlBase.TabClick">ClientTabControl.TabClick</helplink> - Occurs when an end-user clicks a tab.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapPageControl.TabClick">TabClick</helplink> - Occurs when an end-user clicks a tab.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapPageControl.ActiveTabChanged">ActiveTabChanged</helplink> - Occurs when an end-user changes an active tab by clicking another tab.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTabControlBase.ActiveTabChanging">ClientTabControl.ActiveTabChanging</helplink> - Occurs before an active tab is changed. Allows to cancel this operation or force processing the event on the server side.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TabBase.Name">BootstrapTabPage.Name</helplink> - Specifies a tab's name, which identifies the item in the TabPages collection.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TabBase.Text">BootstrapTabPage.Text</helplink> - Specifies a tab's display text.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTabPage.TabIconCssClass">BootstrapTabPage.TabIconCssClass</helplink> - Specifies the CSS class of an icon displayed by a tab.</li>
                </ul>
                <p>Use the <a href="../Navigation/Tabs.aspx">Tab Control</a> to only display tabs without associated content.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="TabAlignment" Title="Tab Alignment">
        <Description>
          <![CDATA[
                <p>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.TabAlign">TabAlign</helplink> property to specify the alignment of tabs within the control. The following modes are supported: <strong>Justify</strong>, <strong>Left</strong>, <strong>Right</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Badges" Title="Badges">
        <Description>
          <![CDATA[
                <p>The Page Control can display supplementary information for any tab within a badge. A badge can display a text, an icon or both. Use the following API to set the contents of item badges:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTabPage.Badge">BootstrapTab.Badge</helplink> - Gets or sets the tab badge on the server.</li>
                </ul>
                <p>The methods listed below allow you to manipulate badges on the client:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTab.GetBadgeText">BootstrapClientTab.GetBadgeText</helplink> - Gets the text of the tab badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTab.SetBadgeText(text)">BootstrapClientTab.SetBadgeText</helplink> - Sets the text of the tab badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTab.GetBadgeIconCssClass">BootstrapClientTab.GetBadgeIconCssClass</helplink> - Gets the icon CSS class of the tab badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTab.SetBadgeIconCssClass(cssClass)">BootstrapClientTab.SetBadgeIconCssClass</helplink> - Sets the icon CSS class of the tab badge.</li>
                </ul>
                <p>Note that the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTabPage.Badge">BootstrapTab.Badge</helplink> property does not affect templated tabs.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="LoadContentOnCallbacks" Title="Load Content on Callbacks">
        <Description>
          <![CDATA[
                <p>The Page Control exposes the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl.EnableCallBacks">EnableCallbacks</helplink> property allowing you to specify whether or not to use callbacks to obtain page contents from the server. If the property is set to <strong>true</strong>, only the content of the active page is sent to the client during the first request. The content of every other page is obtained from the server only once - when the page is first activated. The page content is loaded using a callback without refreshing the entire page.</p>
                <p>If the property is set to <strong>false</strong>, the contents of all pages are sent to the client with the first response, and switching the active page never initiates a callback.</p>
                <p><small>Note that in this demo the callback time is intentionally extended so that the loading indicator is visible during callbacks.</small></p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AutoPostBack" Title="Auto PostBack">
        <Description>
          <![CDATA[   
                <p>If the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.AutoPostBack">AutoPostBack</helplink> property is set to <strong>true</strong>, the Page Control works in a "Server Mode". In this mode, changing an active page causes a postback to refresh the entire web page. </p>
                
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapPageControl.ActiveTabChanged">ActiveTabChanged</helplink> - Fires when the active page has been changed.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapPageControl.ActiveTabChanging">ActiveTabChanging</helplink> - Fires when the active page is about to be changed.</li>
                </ul>                
                
                <aside>
                    <p>Note that the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl.EnableCallBacks">EnableCallbacks</helplink> property is not in effect when the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.AutoPostBack">AutoPostBack</helplink> property is set to <strong>true</strong>.</p>
                </aside>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Templates" Title="Templates">
        <Description>
          <![CDATA[
                <p>The Page Control supports templates allowing you to customize control appearance and layout. 
                A template can be applied to all tabs (using control level templates) or a specific tab (using item level templates). 
                Moreover, templates can be specified for tabs in both active and inactive states. Use the following properties to specify templates.</p>
                <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapPageControl">BootstrapPageControl</helplink> properties:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl.TabTemplate">TabTemplate</helplink> / <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl.ActiveTabTemplate">ActiveTabTemplate</helplink> - Specify common templates used for displaying the content of all tabs within the current page control.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl.TabTextTemplate">TabTextTemplate</helplink> / <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl.ActiveTabTextTemplate">ActiveTabTextTemplate</helplink> - Specify common templates used for displaying the text content of all tabs within the current page control.</li>
                </ul>
                
                <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTabPage">BootstrapTabPage</helplink> properties:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl.TabTemplate">TabTemplate</helplink> / <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl.ActiveTabTemplate">ActiveTabTemplate</helplink> - Specify templates used for displaying the content of the current tab.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl.TabTextTemplate">TabTextTemplate</helplink> / <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl.ActiveTabTextTemplate">ActiveTabTextTemplate</helplink> - Specify templates used for displaying the text content of the current tab.</li>
                </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ClientSideEvents" Title="Client-Side Events">
        <Description>
          <![CDATA[
                <p>This demo illustrates the capabilities of the Page Control's <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientPageControl._members">client events</helplink> and allows you to specify which client-side events you want to track. Interact with the tabbed interface to see the information about all tracked events raised in response to your actions in the event log.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ClientSideAPI" Title="Client-Side Functionality">
        <Description>
          <![CDATA[
                <p>The Page Control offers an advanced client-side API allowing you to manipulate the control and its elements.</p>
                <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.EnableClientSideAPI">EnableClientSideAPI</helplink> property specifies whether or not the client-side API is available. Note that the client-side API is automatically enabled if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.ClientInstanceName">ClientInstanceName</helplink> property is specified or any client-side event available through the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.ClientSideEvents">ClientSideEvents</helplink> property is handled.</p>
                <p>This demo allows you to interactively explore capabilities of the Page Control's client-side API.</p>
                <%--BeginCollapse--%>
                <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientPageControl">BootstrapClientPageControl</helplink> methods:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientPageControl.GetTab(index)">GetTab</helplink> - Returns a tab specified by its index within the Page Control's tab collection.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientPageControl.GetActiveTab">GetActiveTab</helplink> / <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientPageControl.SetActiveTab(tab)">SetActiveTab</helplink> - Gets/sets the active tab.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTabControlBase.GetActiveTabIndex">GetActiveTabIndex</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTabControlBase.SetActiveTabIndex(index)">SetActiveTabIndex</helplink> - Gets/sets the active tab index.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.GetVisible">GetVisible</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.SetVisible(visible)">SetVisible</helplink> - Gets/sets the control's visibility.</li>
                </ul>
                
                <p><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTab">BootstrapClientTab</helplink> methods: </p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTab.GetEnabled">GetEnabled</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTab.SetEnabled(value)">SetEnabled</helplink> - Gets/sets the enabled state of the tab.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTab.GetText">GetText</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTab.SetText(value)">SetText</helplink> - Gets/sets the text displayed by the tab.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTab.GetIconCssClass">GetIconCssClass</helplink> / <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTab.SetIconCssClass(cssClass)">SetIconCssClass</helplink> - Gets/sets the CSS class of the icon displayed by the tab.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTab.GetActiveIconCssClass">GetActiveIconCssClass</helplink> / <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTab.SetActiveIconCssClass(cssClass)">SetActiveIconCssClass</helplink> - Gets/sets the CSS class of the icon displayed by the tab when it is active.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTab.GetVisible">GetVisible</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTab.SetVisible(value)">SetVisible</helplink> - Gets/sets the tab's visibility.</li>
                </ul>           
                <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Popup" Title="Popup" SeoTitle="Bootstrap Popup Dialog Demo">
      <DemoSection Key="DefaultPopupControl" Title="Default Popup">
        <Description>
          <![CDATA[
                <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapPopupControl">Popup Control</helplink> is used to display overlaping temporary windows that appear separately from an application's main window, and are typically used to display quick reference information. By default, the Popup controls display a header with the <strong>Close</strong> button and the popup body with the specified content. To add content to a popup window, use the <strong>ContentCollection.ContentControl</strong> property in markup or <strong>BootstrapPopupControl.Controls.Add</strong> in code behind.</p>
                <p>The Popup Control's advanced features such as resizing, dragging, and absolute positioning require the content container to have a fixed size. This means the container cannot have a responsive layout (its size is not based on the screen resolution).</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.Show">BootstrapClientPopupControl.Show</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.ShowAtElement(htmlElement)">ShowAtElement</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.ShowAtPos(x-y)">ShowAtPos</helplink> - Show the popup window on the client side.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.ShowOnPageLoad">BootstrapPopupControl.ShowOnPageLoad</helplink> - Allows you to show or hide the popup window  from the server-side code.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.PopupAction">BootstrapPopupControl.PopupAction</helplink> / <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.CloseAction">BootstrapPopupControl.CloseAction</helplink> - Specifies which action forces a popup window to appear or hide.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapPopupControl.PopupElementCssSelector">BootstrapPopupControl.PopupElementCssSelector</helplink> / <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientPopupControl.SetPopupElementCssSelector(selector)">BootstrapClientPopupControl.SetPopupElementCssSelector</helplink> - Associates the Popup Control with another control or an HTML element via a CSS selector on the server/client.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.PopupHorizontalAlign">BootstrapPopupControl.PopupHorizontalAlign</helplink> / <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.PopupVerticalAlign">BootstrapPopupControl.PopupVerticalAlign</helplink> - Specifies the popup window alignment.</li>
                </ul>
                <p>Use the following client-side events to handle popup resizing:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.Resize">Resize</helplink> - Occurs after a window has been resized.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.BeforeResizing">BeforeResizing</helplink> - Occurs when window resizing initiates.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.AfterResizing">AfterResizing</helplink> - Occurs when window resizing completes.</li>
                </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="HeaderAndFooter" Title="Header and Footer">
        <Description>
          <![CDATA[
                <p>To specify whether or not to display the Popup Control's header and footer, use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.ShowHeader">ShowHeader</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.ShowFooter">ShowFooter</helplink> properties. To specify the header and footer text, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.HeaderText">HeaderText</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.FooterText">FooterText</helplink> respectively.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Dragging" Title="Dragging">
        <Description>
          <![CDATA[
                <p>The Popup Control can be dragged within the bounds of the client browser's window. To enable this functionality, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.AllowDragging">AllowDragging</helplink> property to <strong>true</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Resizing" Title="Resizing">
        <Description>
          <![CDATA[
                <p>The Popup Control supports resizing. To enable this feature, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.AllowResize">AllowResize</helplink> property to <strong>true</strong>. A popup window's size limits can be specified via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.MinHeight">MinHeight</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.MinWidth">MinWidth</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.MaxHeight">MaxHeight</helplink>, and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.MaxWidth">MaxWidth</helplink> properties.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="LoadContentOnCallbacks" Title="Load Content on Callbacks">
        <Description>
          <![CDATA[
                <p>The Bootstrap Popup Control has the capability to load the content of popup windows on demand. Several content loading modes are available from the following settings of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.LoadContentViaCallback">LoadContentViaCallback</helplink> property.</p>

                <ul>
                    <li><strong>None</strong> - The content is always (initially) rendered inside popup windows (the default behavior).</li>
                    <li><strong>OnPageLoad</strong> - The loading of the popup window content starts immediately after the entire page has loaded.</li>
                    <li><strong>OnFirstShow</strong> - The loading of the popup window content starts when a popup window is invoked for the first time. </li>
                </ul>
                <p>Using a postponed load of the popup window content, you can enhance the response time of your web page on its initial load.</p>
                <p>In this demo, a template is used to place an Update Content button within the popup window's footer. Clicking this button initiates a callback that updates the popup's content using the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.PerformCallback(parameter)">PerformCallback</helplink> method. Use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapPopupControl.Callback">Callback</helplink> event handler to handle the callback on the server side.</p>
                <p><small>For demonstration purposes, the callback processing time is intentionally extended in this demo.</small></p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ModalMode" Title="Modal Mode">
        <Description>
          <![CDATA[
                <p>In the modal mode, when the popup window is displayed, the Popup Control prohibits interactions with the parent page. To enable the modal mode, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.Modal">Modal</helplink> property to <strong>true</strong>. </p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AdaptiveMode" Title="Adaptive Mode">
        <Description>
          <![CDATA[
            <p>
              The Popup Control supports an adaptive mode, in which the popup window is shown as a modal dialog that automatically rearranges its content to fit the browser window. 
              This dialog is displayed with a modal overlay that covers the host page preventing an end-user from interacting with its content. 
              Scrolling the host page is also disabled.
            </p>
            <p>Note that in adaptive mode, the Popup Control doesn't support resizing, dragging or absolute positioning.</p>
            <p>
              Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PopupControlAdaptivitySettings.Mode">SettingsAdaptivity.Mode</helplink> property to enable the adaptive mode. 
              When this property is set to <strong>On</strong>, the popup window automatically switches to the adaptive mode if the browser window's width is less than the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PopupControlAdaptivitySettings.SwitchAtWindowInnerWidth">SettingsAdaptivity.SwitchAtWindowInnerWidth</helplink> property value. 
              When the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PopupControlAdaptivitySettings.Mode">SettingsAdaptivity.Mode</helplink> property is set to <strong>Always</strong>, the popup window is always adaptive.
            </p>
            <%--BeginCollapse--%>
            <p>You can specify an adaptive Popup Control's vertical and horizontal alignment relative to the page boundaries using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PopupControlAdaptivitySettings.VerticalAlign">SettingsAdaptivity.VerticalAlign</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PopupControlAdaptivitySettings.HorizontalAlign">SettingsAdaptivity.HorizontalAlign</helplink> properties.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PopupControlAdaptivitySettings.VerticalAlign">SettingsAdaptivity.VerticalAlign</helplink> property accepts the following values:</p>
            <ul>
              <li>WindowCenter - The window is centered vertically.</li>
              <li>WindowTop - The window is aligned to the top.</li>
              <li>WindowBottom - The window is aligned to the bottom.</li>
            </ul>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PopupControlAdaptivitySettings.HorizontalAlign">SettingsAdaptivity.HorizontalAlign</helplink> property accepts the following values:</p>
            <ul>
              <li>WindowCenter - The window is centered horizontally.</li>
              <li>WindowLeft - The window is aligned to the left.</li>
              <li>WindowRight - The window is aligned to the right.</li>
            </ul>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PopupControlAdaptivitySettings.FixedHeader">SettingsAdaptivity.FixedHeader</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PopupControlAdaptivitySettings.FixedFooter">SettingsAdaptivity.FixedFooter</helplink> properties specify whether the corresponding elements should stay fixed while an end-user scrolls an adaptive Popup Control's content.</p>
            <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AnimationTypes" Title="Animation Types">
        <Description>
          <![CDATA[
            <p>The Popup Control can be displayed and closed with one of two available animations: <strong>Fade</strong> and <strong>Slide</strong>. To specify the animation type for these actions, specify the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.PopupAnimationType">PopupAnimationType</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.CloseAnimationType">CloseAnimationType</helplink> properties.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Templates" Title="Templates">
        <Description>
          <![CDATA[
            <p>The Popup Control allows you to customize the contents of the popup window's elements with the corresponding templates:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.HeaderTemplate">HeaderTemplate</helplink> - Specifies a template used for displaying the contents of the popup control window's header.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.FooterTemplate">FooterTemplate</helplink> - Specifies a template used for displaying the contents of the popup control window's footer.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.HeaderContentTemplate">HeaderContentTemplate</helplink> - Specifies a template used for displaying the text content of the popup control window's header.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.FooterContentTemplate">FooterContentTemplate</helplink> - Specifies a template used for displaying the text content of the popup control window's footer.</li>
            </ul>      
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ClientSideEvents" Title="Client-Side Events">
        <Description>
          <![CDATA[
            <p>This demo illustrates the capabilities of the Popup Control's <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientPopupControl._members">client events</helplink> and allows you to specify which client-side events you want to track.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.PopUp">PopUp</helplink> - Fires when a popup window is invoked.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.CloseUp">CloseUp</helplink> - Fires when a popup window closes or hides. The closeReason property allows you to identify the reason the popup window closes (API, CloseButton, etc.).</li>
            </ul>
            <p>Interact with the Popup Control to see the information about all tracked events raised in response to your actions in the event log.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ClientSideAPI" Title="Client-Side Functionality">
        <Description>
          <![CDATA[
                <p>The Popup Control offers an advanced client-side API allowing you to manipulate the control and its elements. </p>
                <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.EnableClientSideAPI">EnableClientSideAPI</helplink> property specifies whether or not the client-side API is available. Note that the client-side API is automatically enabled if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.ClientInstanceName">ClientInstanceName</helplink> property is specified or any client-side event available through the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.ClientSideEvents">ClientSideEvents</helplink> property is handled.</p>
                <p>This demo allows you to interactively explore capabilities of the Popup Control's client-side API.</p>             
                <%--BeginCollapse--%>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.Show">Show</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.ShowAtElement(htmlElement)">ShowAtElement</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.ShowAtPos(x-y)">ShowAtPos</helplink> - Show the popup window.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.Hide">Hide</helplink> - Hides the popup window.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientPopupControl.SetPopupElementCssSelector(selector)">SetPopupElementCssSelector</helplink> - Sets a CSS selector specifying what HTML elements should invoke the popup window.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControl.GetCurrentPopupElement">GetCurrentPopupElement</helplink> - Returns an object that invoked the popup window.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.GetHeaderText">GetHeaderText</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.SetHeaderText(value)">SetHeaderText</helplink> - Gets/sets the text displayed within the popup window's header.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.GetContentHtml">GetContentHtml</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.SetContentHtml(html)">SetContentHtml</helplink> - Gets/sets the contents of the popup window.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.GetFooterText">GetFooterText</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.SetFooterText(value)">SetFooterText</helplink> - Gets/sets the text displayed within the popup window's footer.</li>               
                </ul>
                <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
  </DemoGroup>

  <DemoGroup Key="Editors" Title="Editors" SeoTitle="Bootstrap Editors Demo" IconCssClass="icon icon-editors" OrderIndex="8">
    <PreDescription>
      <![CDATA[
        <p>DevExpress Bootstrap Data Editors are a powerful collection of data edit and multi-purpose server controls rendered using Bootstrap CSS classes. These controls can function in bound and unbound modes, both as standalone data editors and within container controls such as the DevExpress Bootstrap Grid View.</p>
      ]]>
    </PreDescription>
    <Description>
      <![CDATA[
        <p>To simplify constructing responsive layouts of any complexity with our data editors, the DevExpress Bootstrap Controls suite provides the Form Layout control.</p>
        <p>Our data editors provide a powerful and seamless built-in mechanism for data validation both on the client and server. The validation mechanism supports multiple ways to define the validation logic and to indicate validation failures.</p>
      ]]>
    </Description>
    <Demo Key="BinaryImage" Title="Binary Image" SeoTitle="Bootstrap Binary Image Demo">
      <DemoSection Key="DefaultBinaryImage" Title="Default Binary Image">
        <Description>
          <![CDATA[
              <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapBinaryImage">Binary Image</helplink> control is used to display images obtained from a binary stream with the capability to upload images to the server. To specify a display image, assign a byte array containing image data to the control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxBinaryImage.ContentBytes">ContentBytes</helplink> property.</p>
              <p>To allow file uploading, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BinaryImageEditingSettings.Enabled">EditingSettings.Enabled</helplink> property to <strong>true</strong>. After an end-user uploads an image, a byte array containing the new image data is accessible through the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxBinaryImage.ContentBytes">ContentBytes</helplink> property.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DragAndDropSupport" Title="Drag and Drop Support">
        <Description>
          <![CDATA[
              <p>The drag-and-drop feature allows an end-user to upload an image file by dragging it onto the Binary Image control's drop zone. Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BinaryImageEditingSettings.AllowDropOnPreview">EditingSettings.AllowDropOnPreview</helplink> property to <strong>true</strong> to enable the drag and drop functionality.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ButtonPanelPosition" Title="Button Panel Position">
        <Description>
          <![CDATA[
              <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BinaryImageButtonPanelSettings.Position">EditingSettings.ButtonPanelSettings.Position</helplink> property allows you to specify the button panel's position relative to the image.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ButtonPanelVisibility" Title="Button Panel Visibility">
        <Description>
          <![CDATA[
              <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BinaryImageButtonPanelSettings.Visibility">EditingSettings.ButtonPanelSettings.Visibility</helplink> property allows you to specify when the button panel is displayed. The following property values are supported:</p>
              <ul>
                <li><strong>Always</strong> - The panel is always displayed.</li>
                <li><strong>Faded</strong> - The panel is always visible. The panel is faded when the mouse pointer is not hovering over the image.</li>
                <li><strong>None</strong> - The panel is never displayed.</li>
                <li><strong>OnMouseOver</strong> - The panel is displayed when the mouse pointer is hovering over the image. On touch devices, the "mouse over" behavior can be simulated by tapping on the image.</li>
              </ul>           
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Button" Title="Button" SeoTitle="Bootstrap Button Demo">
      <DemoSection Key="DefaultButton" Title="Default Button">
        <Description>
          <![CDATA[
              <p>This example demonstrates the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapButton">Bootstrap Button</helplink> control with default settings. The Bootstrap Button control extends the standard button functionality by implementing an enhanced API, which you can use to manipulate the button's properties and respond to button events both in client-side and server-side code. In this demo, the client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientButton.Click">Click</helplink> event is handled to display a text message.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButton.Text">Button.Text</helplink> - specifies the text within the button.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapButtonCssClasses.Icon">Button.CssClasses.Icon</helplink> - specifies the icon within the button.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientButton.DoClick">ClientButton.DoClick</helplink> - simulates the button click.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientButton.GetText">ClientButton.GetText</helplink> / <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientButton.SetText(value)">ClientButton.SetText</helplink> - get/sets the text displayed within the button.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButton.Click">Button.Click</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientButton.Click">ClientButton.Click</helplink> - occurs on the client/server side after the button is clicked.</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AutoPostBack" Title="AutoPostBack">
        <Description>
          <![CDATA[
              <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButton.AutoPostBack">AutoPostBack</helplink> property allows you to define whether or not a button automatically initiates a postback to the server when clicked. The AutoPostback mode is activated automatically if the button has the server-side event handlers.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButton.Click">Click</helplink> - occurs when a button is clicked.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButton.CheckedChanged">CheckedChanged</helplink> - occurs when a button's <a href="#RadioButtons">checked state</a> is changed.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButton.PostBackUrl">PostBackUrl</helplink> - specifies the URL of the page to post when the button is clicked.</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="RadioButtons" Title="Checking">
        <Description>
          <![CDATA[
              <p>This example demonstrates how to create a Radio Group UI using button controls. Only one button can be selected at a time.</p>
              <p>You can set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButton.GroupName">GroupName</helplink> to a unique value to force the button to change its checked state on every click.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButton.GroupName">GroupName</helplink> - joins multiple buttons into a radio group</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButton.Checked">Checked</helplink> - specifies whether the current button is selected within the radio group</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientButton.GetChecked">ClientButton.GetChecked</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientButton.SetChecked(value)">ClientButton.SetChecked</helplink> - gets/sets the button's checked state</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientButton.GetChecked">ClientButton.CheckedChanged</helplink> - occurs when the button's checked state is changed</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="RenderOption" Title="Render Option">
        <Description>
          <![CDATA[
              <p>This example demonstrates buttons of various styles supported by the Bootstrap Framework.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapButtonBootstrapSpecificSettingsBase.RenderOption">SettingsBootstrap.RenderOption</helplink> - specifies the button style</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Badge" Title="Badge">
        <Description>
          <![CDATA[
                <p>The Button can display supplementary information within a badge. A badge can display a text, an icon or both. Use the following API to set a badge:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapButton.Badge">BootstrapButton.Badge</helplink> - Gets or sets the button badge on the server.</li>
                </ul>                
                <p>The methods listed below allow you to manipulate the badge on the client:</p>              
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientButton.GetBadgeText">BootstrapClientButton.GetBadgeText</helplink> - Gets the text of the button badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientButton.SetBadgeText(text)">BootstrapClientButton.SetBadgeText</helplink> - Sets the text of the button badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientButton.GetBadgeIconCssClass">BootstrapClientButton.GetBadgeIconCssClass</helplink> - Gets the icon CSS class of the button badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientButton.SetBadgeIconCssClass(cssClass)">BootstrapClientButton.SetBadgeIconCssClass</helplink> - Sets the icon CSS class of the button badge.</li>
                </ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="ButtonEdit" Title="Button Edit" SeoTitle="Bootstrap Button Edit Demo">
      <DemoSection Key="DefaultButtonEdit" Title="Default Button Edit">
        <Description>
          <![CDATA[
              <p>This example demonstrates the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapButtonEdit">Bootstrap Button Edit</helplink> control with default settings. The Bootstrap Button Edit control displays a text editor with one (by default) or more buttons displayed in its client region.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ButtonsCollection" Title="Buttons Collection">
        <Description>
          <![CDATA[
              <p>In this example, the Bootstrap Button Edit control displays two custom buttons - one on the left and one on the right of the editor. In the markup sample, you can see how these buttons are defined as elements of the  <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapButtonEdit.Buttons">Buttons</helplink> collection property.</p>
              <ul>
                <li> <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapButtonEdit.Buttons">Buttons</helplink> - provides access to the collection of custom buttons</li>
                <li> <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapEditButton">BootstrapEditButton</helplink> - the class of each button displayed within the editor</li>
                <li> <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.EditButton.Position">EditButton.Position</helplink> - specifies the position of a button within the editor</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ClearButton" Title="Clear Button">
        <Description>
          <![CDATA[
              <p>In this example, the Button Edit control displays a clear button, which will delete the current content of the editor when clicked. The clear button can be displayed in one of the following modes.</p>
              <ul>
                <li><strong>Always</strong> - the clear button is always visible as in this example</li>
                <li><strong>Auto</strong> - the clear button is displayed on touch devices only</li>
                <li><strong>Never</strong> - the clear button is not displayed</li>
                <li><strong>OnHover</strong> - the clear button is displayed when an editor is hovered over or focused</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="NullText" Title="Null Text">
        <Description>
          <![CDATA[
              <p>This example illustrates how the  <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButtonEdit.NullText">NullText</helplink> property can be used to display prompt text (watermark) in the editor's edit box. Specified text is displayed when the value of the editor is null and the editor is not focused. The prompt text disappears when the editor receives focus. To show the null text even in the focused editor set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NullTextDisplayMode">NullTextDisplayMode</helplink> property to <strong>UnfocusedAndFocused</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Mask" Title="Mask">
        <Description>
          <![CDATA[
              <p>In this example, the Button Edit control takes advantage of the masked input feature to only accept values formatted as phone numbers. The mask is specified using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MaskSettings.Mask">MaskSettings.Mask</helplink> property.</p>
              <p>Refer to the <a href="https://docs.devexpress.com/AspNet/5744/components/data-editors/common-concepts/mask-editing/mask-types">Mask Types</a> topic, for a list of the available mask types.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MaskSettings.ErrorText">MaskSettings.ErrorText</helplink> - specifies the error text to be displayed, if user input is not valid against the specified mask</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MaskSettings.ShowHints">MaskSettings.ShowHints</helplink> - MaskSettings.ShowHints - enables a hint that displays when an end-user enters a value into a masked editor (range and enumeration mask types are supported)</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DisplayFormat" Title="Display Format">
        <Description>
          <![CDATA[
              <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.DisplayFormatString">DisplayFormatString</helplink> property specifies the pattern used to format the value of an editor for display purposes, when the editor is not focused. Display values can be formatted using the standard formatting mechanism described in MSDN. For more information about composing format patterns, see the following MSDN topics: <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings">Numeric Format Strings</a> and <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings">Date and Time Format Strings</a>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="CaptionAndHelpText" Title="Caption and HelpText">
        <Description>
          <![CDATA[
              <p>In this example, the Button Edit control displays a caption on the top and auxiliary help text at the bottom of the editor.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxEditBase.Caption">Caption</helplink> - specifies the caption text</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.HelpText">HelpText</helplink> - specifies the help text</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="RenderOption" Title="Render Option">
        <Description>
          <![CDATA[
              <p>This demo demonstrates how to specify contextual styles for edit buttons (<helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapButtonBootstrapSpecificSettingsBase.RenderOption">SettingsBootstrap.RenderOption</helplink>).</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Calendar" Title="Calendar" SeoTitle="Bootstrap Calendar Demo">
      <DemoSection Key="DefaultCalendar" Title="Default Calendar">
        <Description>
          <![CDATA[
              <p>This example demonstrates the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCalendar">Calendar</helplink> control with default settings. The Bootstrap Calendar control allows an end-user to select dates and navigate through months and years.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="MultiSelect" Title="Multi Select">
        <Description>
          <![CDATA[
              <p>In this example, the Calendar control allows you to select several dates. Click a date while pressing Ctrl to add an individual date to the selection. You can also use the Shift key to select a range of dates.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.EnableMultiSelect">EnableMultiSelect</helplink> - specifies whether the multi-select feature is enabled</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="MultiMonthView" Title="Multi-Month View">
        <Description>
          <![CDATA[
              <p>This example illustrates the multi-month view feature. The Calendar control below simultaneously displays multiple months, organizing them into several rows and columns.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.Rows">Rows</helplink> - specifies the number of rows</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.Columns">Columns</helplink> - specifies the number of columns</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DisabledDates" Title="Disabled Dates">
        <Description>
          <![CDATA[
              <p>In this example, some of the dates displayed by the Calendar control are disabled, so they appear grayed out and cannot be selected. The control provides two approaches to disabling dates.</p>
              <ul>
                <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.DisabledDates">DisabledDates</helplink> collection property allows you to disable specific dates.</li>
                <li>The client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCalendar.CustomDisabledDate">CustomDisabledDate</helplink> and server-side <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.CustomDisabledDate">CustomDisabledDate</helplink> events allow you to disable the selection of dates based on custom logic.</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="CheckBox" Title="Check Box" SeoTitle="Bootstrap Check Box Demo">
      <DemoSection Key="DefaultCheckBox" Title="Default Check Box">
        <Description>
          <![CDATA[
              <p>This example demonstrates the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCheckBox">Bootstrap Check Box</helplink> control with default settings. The Bootstrap Check Box is a check editor that indicates whether a specific condition is on or off. It is commonly used to introduce Yes/No or True/False selection to an end-user.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="GrayedState" Title="Grayed State">
        <Description>
          <![CDATA[
              <p>The Check Box below allows the third, "Intermediate", state.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckBox.AllowGrayed">AllowGrayed</helplink> - specifies whether the Check Box allows three check states</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckBox.AllowGrayedByClick">AllowGrayedByClick</helplink> - controls whether end-users are allowed to switch the editor to the indeterminate state or whether this can only be done programmatically</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Badge" Title="Badge" >
        <Description>
          <![CDATA[
              <p>Badges contain supplementary information and can display an icon and/or text. Use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCheckBox.Badge">BootstrapCheckBox.Badge</helplink> property and the corresponding object's settings to configure the badge:</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapBadgeProperties.Text">Badge.Text</helplink> - Specifies the text in the badge.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapBadgeProperties.CssClass">Badge.CssClass</helplink> - Specifies the name of a CSS class applied to the badge element.</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="CheckBoxList" Title="Check Box List" SeoTitle="Bootstrap Check Box List Demo">
      <DemoSection Key="DefaultCheckBoxList" Title="Default Check Box List">
        <Description>
          <![CDATA[
              <p>This example demonstrates the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapCheckBoxList">Bootstrap Check Box List</helplink> editor with default settings. The Bootstrap Check Box List editor is a check box group that allows an end-user to select multiple items. Its content can be generated dynamically by binding the editor to a data source. Each item within a Check Box List is represented by a <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapListEditItem">BootstrapListEditItem</helplink> object.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="RepeatColumns" Title="Repeat Columns">
        <Description>
          <![CDATA[
              <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckListBase.RepeatColumns">RepeatColumns</helplink> property specifies the number of columns displayed within the Check Box List editor.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Badges" Title="Badges">
        <Description>
          <![CDATA[
              <p>Badges contain supplementary information about items and can display an icon and/or text. Use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapListEditItem.Badge">BootstrapListEditItem.Badge</helplink> property and the corresponding object's settings to configure an item badge:</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapBadgeProperties.Text">Badge.Text</helplink> - Specifies the text in the badge.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapBadgeProperties.CssClass">Badge.CssClass</helplink> - Specifies the name of a CSS class applied to the badge element. </li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="ColorEdit" Title="Color Edit" SeoTitle="Bootstrap Color Edit Demo">
      <DemoSection Key="DefaultColorEdit" Title="Default Color Edit">
        <Description>
          <![CDATA[
              <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapColorEdit">Color Edit</helplink> provides a UI for selecting colors from a predefined drop-down palette. Users can also enter any of the following notations in the edit box to specify colors: </p>
            <ul>
                <li>Longhand or shorthand hexadecimal color notations - <i>#f0f</i>, <i>#D8D8D8</i>;</li>
                <li>RGB values without an alpha channel - <i>rgb(0,256,256)</i>;</li>
                <li>Standard HTML colors - <i>red</i>, <i>green</i>;</li>
				<li>Standard <a href="https://johndecember.com/html/spec/colorsvg.html">SVG colors</a>.</li>
              </ul> 
			<%--BeginCollapse--%>	
				<p>You can use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxColorEdit.Color">Color</helplink> property or the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxColorEdit.Value">Value</helplink> property in text format to specify the editor's color programmatically. To modify the predefined palette's items, use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxColorEdit.Items">Items</helplink> property.</p>
				<p>To  interact with the control on the client, use the following members:</p>
				<ul>
					<li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientColorEdit.ColorChanged">ColorChanged</helplink> - This event fires after a user changes the color in the color editor.</li>
					<li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientColorEdit.GetColor">GetColor</helplink>/<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientColorEdit.SetColor(value)">SetColor</helplink> - Returns/sets the editor's color.</li>
				</ul>
            <%--EndCollapse--%>   
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="CustomColor" Title="Custom Color">
        <Description>
          <![CDATA[
              <p>You can add a <strong>Custom Color</strong> palette to the drop-down color editor, and users can use the color picker to select custom colors. To show the Custom Color palette, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxColorEdit.EnableCustomColors">EnableCustomColors</helplink> property to <strong>true</strong>.</p>  
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="NullText" Title="Null Text">
        <Description>
          <![CDATA[
            <p>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxColorEdit.NullText">NullText</helplink> property to display prompt text (watermark) in the editor's edit box. The specified text is displayed when the editor's value is null and the editor is not focused. The prompt text disappears when the editor is focused.</p>
			<p>To specify whether the text should also be displayed in the unfocused state, use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.NullTextDisplayMode">NullTextDisplayMode</helplink> property.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="CaptionAndHelpText" Title="Caption and HelpText">
        <Description>
          <![CDATA[
              <p>This demo adds a caption (<i>Color</i>) and auxiliary help text (<i>Select a color</i>) to the Color Edit. You can use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxEditBase.Caption">Caption</helplink> and the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.HelpText">HelpText</helplink> properties to specify the caption and help text.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Palletes" Title="Custom Palletes">
        <Description>
          <![CDATA[
              <p>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxColorEdit.Items">Items</helplink> property to change the colors in the drop-down palette.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AutomaticColor" Title="Automatic Color">
        <Description>
          <![CDATA[
              <p>An <strong>Automatic Color Item</strong> can be shown at the top of a palette. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxColorEdit.AutomaticColor">AutomaticColor</helplink> property specifies its color, and the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxColorEdit.EnableAutomaticColorItem">EnableAutomaticColorItem</helplink> property controls the item's visibility.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="ComboBox" Title="Combo Box" SeoTitle="Bootstrap Combo Box Demo">
      <DemoSection Key="DefaultComboBox" Title="Default Combo Box">
        <Description>
          <![CDATA[
             <p>This example demonstrates the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapComboBox">Combo Box</helplink> control with default settings. The Combo Box control is a drop-down list editor allowing your end-users to select from a list of values. The items can be loaded from the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.DataSource">DataSource</helplink> or populated using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapComboBox.Items">Items</helplink> collection. The control provides enchanced server-side and client-side  API for different scenarios.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListEditItem.Value">BootstrapListEditItem.Value</helplink> - gets/sets value for a specific item.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListEditItem.Text">BootstrapListEditItem.Text</helplink> - specifies text for an item. The text can be different than value.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapListEditItem.IconCssClass">BootstrapListEditItem.IconCssClass</helplink> - specifies a custom icon for an item.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox.Value">BootstrapComboBox.Value</helplink>/<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientEditBase.GetValue">BootstrapClientComboBox.GetValue</helplink>/<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientEditBase.SetValue(value)">BootstrapClientComboBox.SetValue</helplink> - gets or sets the editor's value on the server/client.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox.SelectedIndexChanged">BootstrapComboBox.SelectedIndexChanged</helplink>/<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientComboBox.SelectedIndexChanged">BootstrapClientComboBox.SelectedIndexChanged</helplink> - raises on the server/client side when selected item is changed.</li>
             </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DropDownStyle" Title="DropDown Style">
        <Description>
          <![CDATA[
              <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox.DropDownStyle">DropDownStyle</helplink> property specifies the manner in which and end-user can change an editor value. When this property is set to <strong>DropDownList</strong>, it is only possible to change the editor's value by selecting an item from the drop-down list.</p>
              <p>In this demo, the DropDownStyle property is set to <strong>DropDown</strong>, so you can change the editor's value by either selecting an item from the drop-down list or entering new values into the edit box without invoking the drop-down list.</p>
        ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Data_Binding" Title="Data Binding">
        <Description>
          <![CDATA[
              <p>The Combo Box control's content can be dynamically generated by binding the editor to a data source. On retrieving items from the data source, item characteristics such as text and value are obtained from specific data fields. These data fields either can be defined manually using the TextField and ValueField properties or the Combo Box control can obtain them automatically provided that data fields in the data source are named the same as corresponding characteristics ("Text", "Value").</p>
        ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="IncrementalFiltering" Title="Incremental Filtering">
        <Description>
          <![CDATA[
              <p>The Combo Box control allows you to dynamically filter list items based on the text typed into the editor's input box on the client side ("find-as-you-type" filtering). The following modes are available.</p>
              <ul>
                <li><strong>Contains</strong> - The editor is filtered for list items that contain the search string. Search string matches are highlighted.</li>
                <li><strong>StartsWith</strong> - The editor is filtered for list items that begin with the search string. The editor value is autocompleted with the first corresponding value.</li>
                <li><strong>None</strong> - Filtering is not applied to list items.</li>
              </ul>
              <p>To try this feature in action, set the focus to the Combo Box control and start typing.</p>
        ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="CustomFiltering" Title="Custom Filtering">
        <Description>
          <![CDATA[
              <p>The Combo Box control allows you to provide custom filtering logic using the server-side and client-side API. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.CustomFiltering">CustomFiltering</helplink> server-side event provides the capability to set the filtering expression and customize highlighting applied to search results. The event argument object exposes the following properties:</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListEditCustomFilteringEventArgs.Filter">e.Filter</helplink> - Provides access to the search text entered by an end-user.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListEditCustomFilteringEventArgs.FilterExpression">e.FilterExpression</helplink> - Specifies the filter expression.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListEditCustomFilteringEventArgs.CustomHighlighting">e.CustomHighlighting</helplink> - Specifies rules, according to which the editor highlights the filtered items (by default, the first occurrence of the searched text is highlighter in the item's display text).</li>
              </ul>
              <p>On the client-side, custom filtering logic can be implemented using the following client events:</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientComboBox.ItemFiltering">ItemFiltering</helplink> - Fires for each item as an end-user types the search text if callback mode is disabled and provides a capability to change the visibility of an item in the search result.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientComboBox.CustomHighlighting">CustomHighlighting</helplink> - Fires once for every item and provides a capability to specify the custom highlighting logic.</li>
              </ul>
              <p>This demo demonstrates how to use the server-side CustomFiltering event to search for several words through multiple data fields. When you type a search phrase, a custom algorithm dynamically splits it into individual words, searches for each of these words in both data fields and, if found, highlights them.</p>
        ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="LoadItemsOnCallbacks" Title="Load Items on Callbacks">
        <Description>
          <![CDATA[
              <p>In this example, the Combo Box operates in callback mode. In this mode, list items that are not currently displayed within the editor's drop-down window are dynamically loaded when you scroll the list. The callback mode makes the first page load much faster, since only a few items need to be loaded initially.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.EnableCallbackMode">EnableCallbackMode</helplink> - specifies whether or not the Combo Box operates in callback mode</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.CallbackPageSize">CallBackPageSize</helplink> - defines the number of items to be obtained from the server each time it's required</li>
              </ul>
        ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="NullText" Title="Null Text">
        <Description>
          <![CDATA[
              <p>This example illustrates how the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.NullText">NullText</helplink> property can be used to display prompt text (watermark) in the editor's edit box. Specified text is displayed when the value of the editor is null and the editor is not focused. The prompt text disappears when the editor receives focus. To show the null text even in the focused editor set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NullTextDisplayMode">NullTextDisplayMode</helplink> property to <strong>UnfocusedAndFocused</strong>.</p>
        ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DisplayFormat" Title="Display Format">
        <Description>
          <![CDATA[
              <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.DisplayFormatString">DisplayFormatString</helplink> property specifies the pattern used to format the value of an editor for display purposes, when the editor is not focused. Display values can be formatted using the standard formatting mechanism described in MSDN. For more information about composing format patterns, see the following MSDN topics: <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings">Numeric Format Strings</a> and <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings">Date and Time Format Strings</a>.</p>
        ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="CaptionAndHelpText" Title="Caption and HelpText">
        <Description>
          <![CDATA[
              <p>In this example, the Combo Box control displays a caption on the top and auxiliary help text at the bottom of the editor.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxEditBase.Caption">Caption</helplink> - specifies the caption text</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.HelpText">HelpText</helplink> - specifies the help text</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Templates" Title="Templates">
        <Description>
          <![CDATA[
              <p>The Combo Box control allows you to customize layouts of its visual elements using the template technology. In this demo, the Button Template is used to customize the Combo Box control's drop-down button. For the custom button to expand the dropdown list on click, the corresponding action is declaratively assigned to the button using the <strong>data-toggle</strong> attribute.</p>
              <p>Note that the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapComboBoxProperties.TextFormatString">TextFormatString</helplink> property is specified to provide a custom format for the value displayed by the ComboBox's input. Placeholder indexes in the format string correspond to indexes of the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapComboBoxProperties.Fields">Fields</helplink> collection's items.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Adaptivity" Title="Adaptivity">
        <Description>
          <![CDATA[
              <p>The Combo Box's drop-down list can be wider than the browser window, for example on a device with a smaller screen. In this case, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DropDownEditBaseAdaptivitySettings.Mode">SettingsAdaptivity.Mode</helplink> property to "<i>OnWindowInnerWidth</i>" to display the drop-down list as a modal window.</p>
			  <p>The following API members specify the combo box's adaptive settings:</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DropDownEditBaseAdaptivitySettings.Mode">Mode</helplink> - Enables/disables adaptive mode.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DropDownEditBaseAdaptivitySettings.SwitchToModalAtWindowInnerWidth">SwitchToModalAtWindowInnerWidth</helplink> - Specifies the browser window's maximum width when an editor's drop-down window switches to modal mode.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DropDownEditBaseAdaptivitySettings.ModalDropDownCaption">ModalDropDownCaption</helplink> - Specifies the modal window's caption.</li>
				<li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapComboBox.DropDownApplyButton">DropDownApplyButton</helplink> - Defines the modal window's Apply button. This button is only visible when the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapComboBox.DropDownStyle">DropDownStyle</helplink> property is set to "<i>DropDown</i>".</li>
				<li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapComboBox.DropDownCloseButton">DropDownCloseButton</helplink> - Defines the modal window's Close button.</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="MultiColumn" Title="Multi Column">
        <Description>
          <![CDATA[
              <p>The Combo Box can display data across multiple columns. To enable multi-column mode, add data source fields to the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapComboBox.Fields">BootstrapComboBox.Fields</helplink> collection and set the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapComboBox.EnableMultiColumn">BootstrapComboBox.EnableMultiColumn</helplink> property to <strong>true</strong>. Each added field is rendered as a Combo Box column. To customize a column's caption, width, and tooltip, use the field's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapListBoxField.SettingsMultiColumn">SettingsMultiColumn</helplink> property.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="DateEdit" Title="Date Edit" SeoTitle="Bootstrap Date Edit Demo">
      <DemoSection Key="DefaultDateEdit" Title="Default Date Edit">
        <Description>
          <![CDATA[
              <p>This example demonstrates the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapDateEdit">Bootstrap Date Edit</helplink> control with default settings. The Bootstrap Date Edit control is a date editor control that combines the functionality of a single-line text editor, button editor, and drop-down calendar.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="TimeSection" Title="Time Section">
        <Description>
          <![CDATA[
              <p>The Date Edit control allows you to edit date-time values using a time section of drop-down window or directly within an edit box. The time section settings can be accessed through the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapDateEdit.TimeSectionProperties">TimeSectionProperties</helplink> property:</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DateEditTimeSectionProperties.Visible">TimeSectionProperties.Visible</helplink> - Controls the time section's visibility.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapDateEditTimeSectionProperties.TimeEditProperties">TimeSectionProperties.TimeEditProperties</helplink> - Provides access to the time edit settings.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DateEditTimeSectionProperties.ShowOkButton">TimeSectionProperties.ShowOkButton</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DateEditTimeSectionProperties.ShowCancelButton">TimeSectionProperties.ShowCancelButton</helplink> - specify the time section's <strong>Ok</strong> and <strong>Cancel</strong> buttons visibility.</li>
              </ul>
              <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit.EditFormat">EditFormat</helplink> property allows you to specify whether the edit box should display a date, time, or both.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="MultiMonthView" Title="Multi-Month View">
        <Description>
          <![CDATA[
              <p>This example illustrates the multi-month view feature. The drop-down calendar of the Date Edit control below simultaneously displays multiple months, organizing them into several rows and columns.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CalendarProperties.Rows">CalendarProperties.Rows</helplink> - specifies the number of rows</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CalendarProperties.Columns">CalendarProperties.Columns</helplink> - specifies the number of columns</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DisabledDates" Title="Disabled Dates">
        <Description>
          <![CDATA[
              <p>In this example, some of the dates displayed by the Date Edit control's drop-down calendar are disabled, so they appear grayed out and cannot be selected. The control provides two approaches to disabling dates.</p>
              <ul>
                <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit.DisabledDates">DisabledDates</helplink> collection property allows you to disable specific dates.</li>
                <li>The client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDateEdit.CalendarCustomDisabledDate">CalendarCustomDisabledDate</helplink> and server-side <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit.CalendarCustomDisabledDate">CalendarCustomDisabledDate</helplink> events allow you to disable the selection of dates based on custom logic.</li>
              </ul>
              <p>If a disabled date is typed into the input element, it is considered invalid and is handled by the editor in a way specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit.DateOnError">DateOnError</helplink> property.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="NullText" Title="Null Text">
        <Description>
          <![CDATA[
              <p>This example illustrates how the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit.NullText">NullText</helplink> property can be used to display prompt text (watermark) in the editor's edit box. Specified text is displayed when the value of the editor is null and the editor is not focused. The prompt text disappears when the editor receives focus. To show the null text even in the focused editor set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NullTextDisplayMode">NullTextDisplayMode</helplink> property to <strong>UnfocusedAndFocused</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Mask" Title="Mask">
        <Description>
          <![CDATA[
              <p>In this example, the Date Edit control takes advantage of the masked input feature to only accept values in a specific date format. To enable masked input within a date editor, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit.UseMaskBehavior">UseMaskBehavior</helplink> property should be set to <strong>true</strong>.</p>
              <p>The mask is specified using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit.EditFormatString">EditFormatString</helplink> property when the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit.EditFormat">EditFormat</helplink> property is set to <strong>Custom</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DisplayFormat" Title="Display Format">
        <Description>
          <![CDATA[
              <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.DisplayFormatString">DisplayFormatString</helplink> property specifies the pattern used to format the value of an editor for display purposes when the editor is not focused. Display values can be formatted using the standard formatting mechanism described in MSDN. For more information about composing format patterns, see the following MSDN topics: <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings">Numeric Format Strings</a> and <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings">Date and Time Format Strings</a>.</p>
        ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="CaptionAndHelpText" Title="Caption and HelpText">
        <Description>
          <![CDATA[
              <p>In this example, the Date Edit control displays a caption on the top and auxiliary help text at the bottom of the editor.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxEditBase.Caption">Caption</helplink> - specifies the caption text</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.HelpText">HelpText</helplink> - specifies the help text</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="PickerType" Title="Picker Type">
        <Description>
          <![CDATA[
              <p>The DevExpress Bootstrap Date Edit control (<helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapDateEdit">BootstrapDateEdit</helplink>) allows you to specify which date component users can select in the control: day, month, year, or decade.</p>
              <p>The following APIs specify the date picker settings:</p>
              <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit.PickerType">PickerType</helplink> - Specifies a date component a user can select (a day, month or year).</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CalendarFastNavProperties.InitialView">InitialView</helplink> -  Specifies the initial calendar view.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CalendarFastNavProperties.MaxView">MaxView</helplink> - Sets the earliest available calendar view. For example, if the <b>MaxView</b> property is set to "Months", the picker displays the months of a particular year and January is the earliest available calendar view item.</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Adaptivity" Title="Adaptivity">
        <Description>
          <![CDATA[
            <p>The Date Edit control's drop-down calendar can be wider than the browser window, for example on a device with a smaller screen. In this case, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DropDownEditBaseAdaptivitySettings.Mode">SettingsAdaptivity.Mode</helplink> property to "<i>OnWindowInnerWidth</i>" to display the drop-down calendar as a modal window.</p>
			<p>The following API members specify the date edit's adaptive settings:</p>
            <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DropDownEditBaseAdaptivitySettings.Mode">Mode</helplink> - Enables/disables adaptive mode.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DropDownEditBaseAdaptivitySettings.SwitchToModalAtWindowInnerWidth">SwitchToModalAtWindowInnerWidth</helplink> - Specifies the browser window's maximum width when an editor's drop-down calendar switches to modal mode.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DropDownEditBaseAdaptivitySettings.ModalDropDownCaption">ModalDropDownCaption</helplink> - Specifies the modal window's caption.</li>
				<li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapDateEdit.DropDownApplyButton">DropDownApplyButton</helplink> - Defines the modal window's Apply button. This button is only visible when the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DateEditTimeSectionProperties.Visible">DateEditTimeSectionProperties.Visible</helplink> property is set to <b>true</b>.</li>
				<li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapDateEdit.DropDownCloseButton">DropDownCloseButton</helplink> - Defines the modal window's Close button.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ScrollPicker" Title="Scroll Picker">
        <Description>
          <![CDATA[
			<p>You can set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit.PickerDisplayMode">PickerDisplayMode</helplink> property to "<i>ScrollPicker</i>" or "<i>Auto</i>" to enable <b>Scroll Picker</b> mode. In this mode, the Date Edit displays rotating wheels for each date component (day, month, year, time).</p>
			<p>"<i>Auto</i>", as demonstrated in this demo, affects the Date Edit in <a href="#Adaptivity">adaptive mode</a> only. It specifies that the drop-down window's appearance (regular calendar or scroll picker) depends on the browser window's width.</p>

          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="ListBox" Title="List Box" SeoTitle="Bootstrap List Box Demo">
      <DemoSection Key="DefaultListBox" Title="Default List Box">
        <Description>
          <![CDATA[
              <p>This example demonstrates the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapListBox">Bootstrap List Box</helplink> control with default settings. The Bootstrap List Box control displays a list of items that can be selected by end-users. In this demo, it is allowed to select only one item at a time and initial selection is set with the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListEdit.SelectedIndex">BootstrapListBox.SelectedIndex</helplink> property. The control can be bound to a <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.DataSource">DataSource</helplink> or populated using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapListBox.Items">Items</helplink> collection.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListEditItem.Value">BootstrapListEditItem.Value</helplink> - gets/sets a value for a specific item.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListEditItem.Text">BootstrapListEditItem.Text</helplink> - specifies text for an item. The text can be different than a value.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapListEditItem.IconCssClass">BootstrapListEditItem.IconCssClass</helplink> - specifies a custom icon for an item.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListEditItem.Selected">BootstrapListEditItem.Selected</helplink> - specifies whether an item is selected.</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="SelectionViaCheckBoxes" Title="Selection via Check Boxes">
        <Description>
          <![CDATA[
          <p>When the List Box control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox.SelectionMode">SelectionMode</helplink> property is set to <strong>CheckColumn</strong>, the List Box displays a column of check boxes indicating the selection status of list items. In this mode, multiple items can be selected within the editor using the mouse click.</p>
          <ul>
            <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox.SelectedItems">BootstrapListBox.SelectedItems</helplink> / <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox.SelectedIndices">BootstrapListBox.SelectedIndices</helplink> - gets List Box' selected items or indices on the server side.</li>
            <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientListBox.GetSelectedItems">BootstrapClientListBox.GetSelectedItems</helplink> / <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientListBox.SelectItems(items)">BootstrapClientListBox.SelectItems</helplink> - manipulates selected items on the client side.</li>
            <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientListBox.GetSelectedIndices">BootstrapClientListBox.GetSelectedIndices</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientListBox.SelectIndices(indices)">BootstrapClientListBox.SelectIndices</helplink> - gets/sets selected indices on the client side.</li>
          </ul>
          <p>When the <strong>CheckColumn</strong> selection mode is enabled, end-users can select all items using the "Select All" check box at the top of the list box. To enable this feature, set the ListBox control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox.EnableSelectAll">EnableSelectAll</helplink> property value to <strong>true</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Badges" Title="Badges">
        <Description>
          <![CDATA[
                <p>The ListBox can display supplementary information for any item within a badge. A badge can display a text, an icon or both. Use the following API to configure badges on the server side:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapListEditItem.Badge">BootstrapListEditItem.Badge</helplink> - Gets or sets the item badge on the server.</li>
                </ul>                
                <p>The methods listed below allow you to manipulate badges on the client:</p>
                <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientListBox.GetItemBadgeText(index)">BootstrapClientListBox.GetItemBadgeText</helplink> - Gets the text of an item's badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientListBox.SetItemBadgeText(index-text)">BootstrapClientListBox.SetItemBadgeText</helplink> - Sets the text an item's badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientListBox.GetItemBadgeIconCssClass(index)">BootstrapClientListBox.GetItemBadgeIconCssClass</helplink> - Gets the icon CSS class of an item's badge.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientListBox.SetItemBadgeIconCssClass(index-cssClass)">BootstrapClientListBox.SetItemBadgeIconCssClass</helplink> - Sets the icon CSS class of an item's badge.</li>
                </ul>                
                <p>Note that the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapListEditItem.Badge">BootstrapListEditItem.Badge</helplink> property does not affect templated items.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Data_Binding" Title="Data Binding">
        <Description>
          <![CDATA[
              <p>The List Box control's content can be dynamically generated by binding the editor to a data source. On retrieving items from the data source, item characteristics such as the text and value are obtained from specific data fields. These data fields can be either defined manually using the TextField and ValueField properties or the List Box control can obtain them automatically provided that the data fields in the data source are named the same as corresponding characteristics ("Text", "Value").</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Filtering" Title="Filtering">
        <Description>
          <![CDATA[
              <p>The List Box control allows filtering items by entering text in the editor displayed above the list. 
                 The list is automatically updated during typing and items that do not match entered text are filtered out. 
                 The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox.FilteringSettings">FilteringSettings</helplink> property provides access to settings related to the filtering functionality. The following settings are available:</p>
              <ul>
                <li><strong>ShowSearchUI</strong> - Enables the filter editor.</li>
                <li><strong>CustomEditorID</strong> - Specifies the ID of a DevExpress editor that is used to set the filtering criterion.</li>
                <li><strong>EditorNullText</strong> - Gets or sets the string displayed in the filter editor when the editor's value is null.</li>
                <li><strong>EditorNullTextDisplayMode</strong> - Gets or sets a value indicating when null text should be displayed in the list box's filter editor.</li>
                <li><strong>MinLength</strong> - Gets or sets the minimum number of characters an end-user should enter into the editor before filtering is performed.</li>
                <li><strong>Delay</strong> - Gets or sets the time interval between the time when a user starts typing within the list box's filter editor and filtering is applied.</li>
                <li><strong>EnableAnimation</strong> - Gets or sets the value that specifies whether a specific animation effect is used when the filter editor is invoked/hidden if the "Select All" mode is enabled.</li>
                <li><strong>UseCompactView</strong> - Gets or sets a value specifying whether the list box's search UI is displayed in Compact mode.</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="LoadItemsOnCallbacks" Title="Load Items on Callbacks">
        <Description>
          <![CDATA[
              <p>In this example, the List Box operates in callback mode. In this mode, list items that are not currently displayed within the editor are dynamically loaded when you scrolls the list. The callback mode makes the first page load much faster, since only a few items need to be loaded initially.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox.EnableCallbackMode">EnableCallbackMode</helplink> - specifies whether or not the List Box operates in callback mode</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox.CallbackPageSize">CallBackPageSize</helplink> - defines the number of items to be obtained from the server each time it's required</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="MultiColumn" Title="Multi Column">
        <Description>
          <![CDATA[
              <p>The List Box can display data across multiple columns. To enable multi-column mode, add data source fields to the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapListBox.Fields">BootstrapListBox.Fields</helplink> collection and set the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapListBox.EnableMultiColumn">BootstrapListBox.EnableMultiColumn</helplink> property to <strong>true</strong>. Each added field is rendered as a List Box column. To customize a column's caption, width, and tooltip, use the field's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapListBoxField.SettingsMultiColumn">SettingsMultiColumn</helplink> property.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Memo" Title="Memo" SeoTitle="Bootstrap Memo Demo">
      <DemoSection Key="DefaultMemo" Title="Default Memo">
        <Description>
          <![CDATA[
              <p>This example demonstrates the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapMemo">Bootstrap Memo</helplink> control with default settings. The Bootstrap Memo control is a text editor allowing multi-line input.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="NullText" Title="Null Text">
        <Description>
          <![CDATA[
              <p>This demo illustrates how the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMemo.NullText">NullText</helplink> property can be used to display prompt text (watermark) in the editor's edit box. Specified text is displayed when the value of the editor is null and the editor is not focused. The prompt text disappears when the editor receives focus. To show the null text even in the focused editor set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NullTextDisplayMode">NullTextDisplayMode</helplink> property to <strong>UnfocusedAndFocused</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="CaptionAndHelpText" Title="Caption and HelpText">
        <Description>
          <![CDATA[
              <p>In this example, the Memo control displays a caption on the top and auxiliary help text at the bottom of the editor.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxEditBase.Caption">Caption</helplink> - specifies the caption text</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.HelpText">HelpText</helplink> - specifies the help text</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="ProgressBar" Title="Progress Bar" SeoTitle="Bootstrap Progress Bar Demo">
      <DemoSection Key="DefaultProgressBar" Title="Default Progress Bar">
        <Description>
          <![CDATA[
              <p>This example demonstrates the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapProgressBar">Bootstrap Progress Bar</helplink> control with default settings. By default, the Progress Bar control displays the status of a process in percent.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Striped" Title="Striped">
        <Description>
          <![CDATA[
              <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapProgressBarBootstrapSpecificSettings.Striped">SettingsBootstrap.Striped</helplink> property determines whether or not the Progress Bar should display a striped pattern in its filled area.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Animated" Title="Animated">
        <Description>
          <![CDATA[
              <p>The pattern displayed by a striped Progress Bar can be animated. To enable animation, set the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapProgressBarBootstrapSpecificSettings.Animated">SettingsBootstrap.Animated</helplink> property to <strong>true</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="HidePositionText" Title="Hide Position Text">
        <Description>
          <![CDATA[
              <p>To hide text indicating the current position of the progress bar, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxProgressBar.ShowPosition">ShowPosition</helplink> property to <strong>false</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="RadioButton" Title="Radio Button" SeoTitle="Bootstrap Radio Button Demo">
      <DemoSection Key="DefaultRadioButton" Title="Default Radio Button">
        <Description>
          <![CDATA[
              <p>This example demonstrates the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRadioButton">Bootstrap Radio Button</helplink> control with default settings. The Bootstrap Radio Button editor allows an end-user to perform a single-option selection.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Badge" Title="Badge">
        <Description>
          <![CDATA[
              <p>Badges contain supplementary information and can display an icon and/or text. Use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRadioButton.Badge">BootstrapRadioButton.Badge</helplink> property and the corresponding object's settings to configure the badge:</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapBadgeProperties.Text">Badge.Text</helplink> - Specifies the text in the badge.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapBadgeProperties.CssClass">Badge.CssClass</helplink> - Specifies the name of a CSS class applied to the badge element.</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="RadioButtonList" Title="Radio Button List" SeoTitle="Bootstrap Radio Button List Demo">
      <DemoSection Key="DefaultRadioButtonList" Title="Default Radio Button List">
        <Description>
          <![CDATA[
              <p>This example demonstrates the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRadioButtonList">Bootstrap Radio Button List</helplink> control with default settings. The Bootstrap Radio Button List editor is a radio button group that provides end-users with the capability to select a single item at a time.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="RepeatColumns" Title="Repeat Columns">
        <Description>
          <![CDATA[
              <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckListBase.RepeatColumns">RepeatColumns</helplink> property specifies the number of columns displayed within the Radio Button List editor.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Badges" Title="Badges">
        <Description>
          <![CDATA[
              <p>Badges contain supplementary information about items and can display an icon and/or text. Use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapListEditItem.Badge">BootstrapListEditItem.Badge</helplink> property and the corresponding object's settings to configure an item badge:</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapBadgeProperties.Text">Badge.Text</helplink> - Specifies the text in the badge.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapBadgeProperties.CssClass">Badge.CssClass</helplink> - Specifies the name of a CSS class applied to the badge element.</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="SpinEdit" Title="Spin Editor" SeoTitle="Bootstrap Spin Edit Demo">
      <DemoSection Key="DefaultSpinEdit" Title="Default Spin Edit">
        <Description>
          <![CDATA[
              <p>This example demonstrates the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSpinEdit">Bootstrap Spin Edit</helplink> control with default settings. The Bootstrap Spin Edit control provides easy numeric value editing by incrementing and decrementing edit values using spin buttons, a mouse wheel, or keyboard.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="MinValueAndMaxValue" Title="MinValue and MaxValue">
        <Description>
          <![CDATA[
              <p>In this example, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpinEdit.MinValue">MinValue</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpinEdit.MaxValue">MaxValue</helplink> properties are used to specify the minimum and maximum values allowed to be entered using the Spin Editor.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="LargeIncrement" Title="Large Increment">
        <Description>
          <![CDATA[
              <p>The Spin Edit control allows you to edit numeric values with ease by clicking small or large increment buttons.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SpinButtons.ShowIncrementButtons">SpinButtons.ShowIncrementButtons</helplink> - controls the visibility of small increment buttons</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SpinButtons.ShowLargeIncrementButtons">SpinButtons.ShowLargeIncrementButtons</helplink> - controls the visibility of large increment buttons</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpinEdit.Increment">Increment</helplink> - specifies the increment with which the editor's value is changed when a small increment button is clicked</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpinEdit.LargeIncrement">LargeIncrement</helplink> - specifies the increment with which the editor's value is changed when a large increment button is clicked</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.EditButton.Position">SpinButtons.Position</helplink> - determines the position of increment buttons</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="FloatNumber" Title="Float Number">
        <Description>
          <![CDATA[
              <p>In this example, the Spin Edit control allows editing float numbers.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpinEdit.NumberType">NumberType</helplink> - specifies whether a spin editor edits float or integer values</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpinEdit.DecimalPlaces">DecimalPlaces</helplink> - specifies the number of decimal places in float mode</li>
              </ul>
              <p>In float mode, culture-specific separators are supported, allowing decimal separators to be uniquely displayed in various cultures.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="NullText" Title="Null Text">
        <Description>
          <![CDATA[
              <p>This demo illustrates how the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpinEdit.NullText">NullText</helplink> property can be used to display prompt text (watermark) in the editor's edit box. Specified text is displayed when the value of the editor is null and the editor is not focused. The prompt text disappears when the editor receives focus. To show the null text even in the focused editor set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NullTextDisplayMode">NullTextDisplayMode</helplink> property to <strong>UnfocusedAndFocused</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DisplayFormat" Title="Display Format">
        <Description>
          <![CDATA[
              <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.DisplayFormatString">DisplayFormatString</helplink> property specifies the pattern used to format the value of an editor for display purposes when the editor is not focused. Display values can be formatted using the standard formatting mechanism described in MSDN. For more information about composing format patterns, see the following MSDN topics: <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings">Numeric Format Strings</a> and <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings">Date and Time Format Strings</a>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="CaptionAndHelpText" Title="Caption and HelpText">
        <Description>
          <![CDATA[
              <p>In this example, the Spin Edit control displays a caption on the top and auxiliary help text at the bottom of the editor.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxEditBase.Caption">Caption</helplink> - specifies the caption text</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.HelpText">HelpText</helplink> - specifies the help text</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="TagBox" Title="Tag Box" SeoTitle="Bootstrap Tag Box Demo">
      <DemoSection Key="DefaultTagBox" Title="Default Tag Box">
        <Description>
          <![CDATA[
              <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTagBox">Tag Box</helplink> control provides an interface for selecting multiple unique values (tags) from a predefined list with the autocomplete functionality. End-users can select a value from a drop-down list or by typing in the tag box. The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTagBox.Tags">Tags</helplink> property provides access to a collection of strings corresponding to selected values. Note that tags must be unique. A tag can be removed from the selection using either its remove button or the <kbd>backspace</kbd> key.</p>
              <%--BeginCollapse--%>
              <ul>
                <li>Client <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTagBox.TagsChanged">BootstrapClientTagBox.TagsChanged</helplink> and server <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTagBox.TagsChanged">BootstrapTagBox.TagsChanged</helplink> events - Fire when the collection of selected values has been changed.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTokenBox.Text">Text</helplink> - Specifies a string containing the editor tag texts divided with a separator.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTokenBox.TextSeparator">TextSeparator</helplink> - Specifies the separator to use in the Text property's value.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTokenBox.Value">Value</helplink> - Specifies a string containing values corresponding to the editor tags divided with a separator.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTokenBox.ValueSeparator">ValueSeparator</helplink> - Specifies the separator to use in the Value property's value.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListEditItem.Text">BootstrapListEditItem.Text</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListEditItem.Value">BootstrapListEditItem.Value</helplink>, <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapListEditItem.IconCssClass">BootstrapListEditItem.IconCssClass</helplink> - specify a predefined item's text, value and icon correspondingly.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTagBox.CssClasses">CssClasses</helplink> - Provides access to CSS classes applied to the Tag Box control's visual elements.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTagBoxBootstrapSpecificSettings.TagRenderOption">SettingsBootstrap.TagRenderOption</helplink> - Specifies the Bootstrap label appearance style applied to a tag element.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTagBox.GetTagCollection">BootstrapClientTagBox.GetTagCollection</helplink> / <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTagBox.SetTagCollection(collection)">BootstrapClientTagBox.SetTagCollection</helplink> - Get or set the collection of selected tags on the client side.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTagBox.AddTag(text)">BootstrapClientTagBox.AddTag</helplink> / <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTagBox.RemoveTag(index)">BootstrapClientTagBox.RemoveTag</helplink> - Add or remove a tag to/from selection on the client side.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTagBox.AddItem(texts)">BootstrapClientTagBox.AddItem</helplink> / <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientComboBox.RemoveItem(index)">BootstrapClientTagBox.RemoveItem</helplink> - Add or remove and item to/from the control's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTagBox.Items">Items</helplink> collection on the client side.</li>
              </ul>     
              <%--EndCollapse--%>         
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="AllowCustomTags" Title="Custom Tags">
        <Description>
          <![CDATA[
              <p>An end-user can specify a custom tag, which is not specified in the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTagBox.Items">Items</helplink> collection, by typing it into the Tag Box. This behavior can be changed via the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTagBoxProperties.AllowCustomTags">AllowCustomTags</helplink> property: when its value is set to <strong>false</strong>, it is only possible to change the editor's value by selecting a tag from the drop-down list.</p>
              <p>The server-side <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTagBox.CustomTagsAdded">CustomTagsAdded</helplink> event provides a notification that an end-user specified a custom tag. You can access a collection of specified custom tags through the event's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTagBoxCustomTagsAddedEventArgs.CustomTags">CustomTags</helplink> argument, so you can programmatically add such tags to the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTagBox.Items">Items</helplink> collection in the event handler.</p>
              <p>Use the client <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientTagBox.IsCustomTag(text-caseSensitive)">IsCustomTag</helplink> method to find out whether the specified tag is a custom tag.</p>
        ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Data_Binding" Title="Data Binding">
        <Description>
          <![CDATA[
              <p>Binding the editor to a data source enables the Tag Box control to dynamically generate its content. Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.DataSourceID">DataSourceID</helplink> property to assign a data source to a Tag Box control.</p>
              <p>A data-bound Tag Box control automatically creates a list item for each data item. On retrieving items from the data source, list item characteristics such as text, value, and icon are obtained from specific data fields with matching names. You can also explicitly specify mappings between toolbar item properties and data item attribute names using the following properties:</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.ValueField">ValueField</helplink> - Specifies the name of a data field providing values to the editor's items.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.TextField">TextField</helplink> - Specifies the name of a data field providing tag texts.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTagBox.IconCssClassField">IconCssClassField</helplink> - Specifies the name of a data field providing CSS classes of icons displayed within tag elements.</li>
              </ul>
              <p></p>
        ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="IncrementalFiltering" Title="Incremental Filtering">
        <Description>
          <![CDATA[
              <p>The Tag Box control allows you to dynamically filter list items based on the text typed into the editor's input box on the client side ("find-as-you-type" filtering). The following modes are available:</p>
              <ul>
                <li><strong>Contains</strong> - The editor is filtered for list items that contain the search string. Search string matches are highlighted.</li>
                <li><strong>StartsWith</strong> - The editor is filtered for list items that begin with the search string. The editor value is auto-completed with the first corresponding value.</li>
                <li><strong>None</strong> - Filtering is not applied to list items.</li>
              </ul>
              <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.IncrementalFilteringDelay">IncrementalFilteringDelay</helplink> property allows you to specify the time interval between the moment an end-user starts typing within the editor box, and filtering is applied.</p>
              <p>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.FilterMinLength">FilterMinLength</helplink> to specify the minimum length of the filter string input required to initiate a filtering operation.</p>
              <p>To try incremental filtering in action, set the focus to the Tag Box control and start typing.</p>
        ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="LoadItemsOnCallbacks" Title="Load Items on Callbacks">
        <Description>
          <![CDATA[
              <p>In this example, the Tag Box operates in callback mode. In this mode, list items that are not currently displayed within the editor's drop-down window are dynamically loaded when you scroll the list. The callback mode makes the first page load much faster, since only a few items need to be loaded initially.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.EnableCallbackMode">EnableCallbackMode</helplink> - specifies whether or not the Tag Box operates in callback mode.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.CallbackPageSize">CallBackPageSize</helplink> - defines the number of items to be obtained from the server each time it is required.</li>
              </ul>
              <p>Note that in this demo the callback time is extended intentionally so that the loading indicator is visible during callbacks.</p>
        ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="NullText" Title="Null Text">
        <Description>
          <![CDATA[
              <p>This example illustrates how the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.NullText">NullText</helplink> property can be used to display the prompt text (watermark) in the editor's edit box. Specified text is displayed when the value of the editor is null, and the editor is not focused. The prompt text disappears when the editor receives focus.</p>
              <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.NullTextDisplayMode">NullTextDisplayMode</helplink> property allows you to specify whether the prompt text should always be displayed, or only when the editor is unfocused.</p>
        ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="CaptionAndHelpText" Title="Caption and HelpText">
        <Description>
          <![CDATA[
              <p>In this example, the Tag Box control displays a caption at the top and auxiliary help text at the bottom of the editor.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxEditBase.Caption">Caption</helplink> - Specifies the caption text.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.HelpText">HelpText</helplink> - Specifies the help text.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTagBox.CaptionSettings">CaptionSettings</helplink> - Provides access to settings related to the editor caption.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTagBox.HelpTextSettings">HelpTextSettings</helplink> - Provides access to settings related to the editor help text.</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Validation" Title="Validation">
        <Description>
          <![CDATA[
              <p>The Tag Box editor provides a universal mechanism for performing data validation on both the client and server. You can access the validation settings through the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTagBox.ValidationSettings">ValidationSettings</helplink> property.</p>
              <%--BeginCollapse--%>
              <p>Use the following API to define the validation logic:</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ValidationSettings.RequiredField">ValidationSettings.RequiredField</helplink> - specifies that the Tag Box editor is a required input field.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ValidationSettings.RegularExpression">ValidationSettings.RegularExpression</helplink> - specifies a regular expression to check user input in the Tag Box editor.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxEdit.Validation">BootstrapTagBox.Validation</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientEdit.Validation">BootstrapClientTagBox.Validation</helplink> - allow you to provide custom validation logic to an editor. Within event handlers, you can test the TagBox editor's value and, if it does not meet your requirements, specify the editor as invalid. We recommend performing both client-side and server-side validations for security reasons.</li>
              </ul>
              <p>You can force editor validation using the following approaches:</p>
              <ul>
                <li>Validation on leave - editor value changes causes validation by default. You can disable this behavior by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ValidationSettings.ValidateOnLeave">ValidationSettings.ValidateOnLeave</helplink> property to <strong>false</strong>.</li>
                <li>Validation API methods call - <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxEdit.Validate">BootstrapTagBox.Validate</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxedit.validateeditorsincontainer.overloads">BootstrapTagBox.ValidateEditorsInContainer</helplink> on the server side and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientEdit.Validate">BootstrapClientTagBox.Validate</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientEdit.ValidateEditorsInContainer.static(container)">BootstrapClientTagBox.ValidateEditorsInContainer</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientEdit.ValidateEditorsInContainerById.static(containerId)">BootstrapClientTagBox.ValidateEditorsInContainerById</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientEdit.ValidateGroup.static(validationGroup)">BootstrapClientTagBox.ValidateGroup</helplink> on the client side.</li>
                <li>Action on other editors - certain editors like <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapButton">BootstrapButton</helplink> can force validation by default. You can disable this behavior by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButton.CausesValidation">BootstrapButton.CausesValidation</helplink> property to <strong>false</strong>.</li>
              </ul>
              <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="TextBox" Title="Text Box" SeoTitle="Bootstrap Text Box Demo">
      <DemoSection Key="DefaultTextBox" Title="Default Text Box">
        <Description>
          <![CDATA[
              <p>This example demonstrates the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTextBox">Bootstrap Text Box</helplink> control with default settings. The Bootstrap Text Box control is a single-line text editor.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="NullText" Title="Null Text">
        <Description>
          <![CDATA[
              <p>This demo illustrates how the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextBox.NullText">NullText</helplink> property can be used to display prompt text (watermark) in the editor's edit box. Specified text is displayed when the value of the editor is null and the editor is not focused. The prompt text disappears when the editor receives focus. To show the null text even in the focused editor set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NullTextDisplayMode">NullTextDisplayMode</helplink> property to <strong>UnfocusedAndFocused</strong>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Mask" Title="Mask">
        <Description>
          <![CDATA[
              <p>In this example, the Text Box control takes advantage of the masked input feature to only accept values formatted as phone numbers. The mask is specified using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MaskSettings.Mask">MaskSettings.Mask</helplink> property.</p>
              <p>Refer to the <a href="https://docs.devexpress.com/AspNet/5744/components/data-editors/common-concepts/mask-editing/mask-types">Mask Types</a> topic, for a list of the available mask types.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MaskSettings.ErrorText">MaskSettings.ErrorText</helplink> - specifies the error text to be displayed, if user input is not valid against the specified mask</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MaskSettings.ShowHints">MaskSettings.ShowHints</helplink> - MaskSettings.ShowHints - enables a hint that displays when an end-user enters a value into a masked editor (range and enumeration mask types are supported)</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DisplayFormat" Title="Display Format">
        <Description>
          <![CDATA[
              <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.DisplayFormatString">DisplayFormatString</helplink> property specifies the pattern used to format the value of an editor for display purposes when the editor is not focused. Display values can be formatted using the standard formatting mechanism described in MSDN. For more information about composing format patterns, see the following MSDN topics: <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings">Numeric Format Strings</a> and <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings">Date and Time Format Strings</a>.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="CaptionAndHelpText" Title="Caption and HelpText">
        <Description>
          <![CDATA[
              <p>In this example, the Text Box control displays a caption on the top and auxiliary help text at the bottom of the editor.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxEditBase.Caption">Caption</helplink> - specifies the caption text</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.HelpText">HelpText</helplink> - specifies the help text</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="TimeEdit" Title="Time Edit" SeoTitle="Bootstrap Time Edit Demo">
      <DemoSection Key="DefaultTimeEdit" Title="Default Time Edit">
        <Description>
          <![CDATA[
              <p>The Bootstrap Time Edit control provides the capability to display and edit date-time values. 
              End-users can modify the editor value by clicking spin buttons to increment or decrement different date and time values (months, days, hours, minutes or seconds), 
              or by typing directly into the edit box. You can specify the control's value using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTimeEdit.DateTime">DateTime</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTimeEdit.Value">Value</helplink> properties on the server side 
              and the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTimeEdit.SetDate(date)">BootstrapClientTimeEdit.SetDate</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientEditBase.SetValue(value)">BootstrapClientTimeEdit.SetValue</helplink> methods on the client side.</p>
              <ul>
                <li>Client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTimeEdit.DateChanged">BootstrapClientTimeEdit.DateChanged</helplink> and server <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTimeEdit.DateChanged">BootstrapTimeEdit.DateChanged</helplink> events - Fire when the editor's date-time value has been changed.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTimeEdit.SpinButtons">SpinButtons</helplink> - Controls the visibility and other settings of editor spin buttons.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTimeEdit.ClearButton">ClearButton</helplink> - Controls the visibility and other settings of editor's clear button.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTimeEdit.Buttons">Buttons</helplink> - Provides access to a collection of editor custom buttons.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTimeEdit.CssClasses">CssClasses</helplink> - Provides access to CSS classes applied to the Time Edit control's visual elements.</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="EditFormat" Title="Edit Format">
        <Description>
          <![CDATA[
              <p>The Time edit control supports masked value editing. You can specify the predefined masks using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTimeEdit.EditFormat">EditFormat</helplink> property, or a custom mask by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTimeEdit.EditFormat">EditFormat</helplink> property to <strong>Custom</strong> and assigning the mask string to the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTimeEdit.EditFormatString">EditFormatString</helplink> property.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DisplayFormat" Title="Display Format">
        <Description>
          <![CDATA[
              <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.DisplayFormatString">DisplayFormatString</helplink> property specifies the pattern used to format the value of an editor for display purposes when the editor is not focused. Display values can be formatted using the standard formatting mechanism described in MSDN. For more information about composing format patterns, see the <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings">Date and Time Format Strings</a> MSDN topic.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="NullText" Title="Null Text">
        <Description>
          <![CDATA[
              <p>This example illustrates how the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTimeEdit.NullText">NullText</helplink> property can be used to display the prompt text (watermark) in the editor's edit box. Specified text is displayed when the value of the editor is <strong>null</strong>, and the editor is not focused. The prompt text disappears when the editor receives focus.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="CaptionAndHelpText" Title="Caption and HelpText">
        <Description>
          <![CDATA[
              <p>In this example, the Time Edit control displays a caption at the top and auxiliary help text at the bottom of the editor.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxEditBase.Caption">Caption</helplink> - Specifies the caption text.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.HelpText">HelpText</helplink> - Specifies the help text.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTimeEdit.CaptionSettings">CaptionSettings</helplink> - Provides access to settings related to the editor caption.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapTimeEdit.HelpTextSettings">HelpTextSettings</helplink> - Provides access to settings related to the editor help text.</li>
              </ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="UploadControl" Title="Upload Control" SeoTitle="Bootstrap Upload Control Demo">
      <DemoSection Key="DefaultUploadControl" Title="Default Upload Control">
        <Description>
          <![CDATA[
              <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapUploadControl">Bootstrap Upload Control</helplink> allows your end-users to upload files to the server using the browser. 
              End-users can select the files they wish to upload to the server by entering the file's path into a text box, by invoking the standard Open File dialog, or by dragging the file to the control. 
              The Upload Control offers a number of advanced features such as uploading files via AJAX callbacks, built-in validation of the uploaded file against specified criteria (for instance, the file's size, extension and MIME types), and an enhanced client-side API.</p>
              <%--BeginCollapse--%>
              <ul>
                <li>Client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientUploadControl.FileUploadComplete">BootstrapClientUploadControl.FileUploadComplete</helplink>/<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientUploadControl.FilesUploadComplete">FilesUploadComplete</helplink> and server <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl.FileUploadComplete">BootstrapUploadControl.FileUploadComplete</helplink>/<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl.FilesUploadComplete">FilesUploadComplete</helplink> events - Fire after the selected files have been uploaded to a server. Use these events to implement any custom logic, including custom validation, saving the uploaded file to the specific directory on the server-side and so on. For example, you can pass some information from the server-side using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileUploadCompleteEventArgs.CallbackData">e.CallbackData</helplink> property, then get it via the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientUploadControlFileUploadCompleteEventArgs.callbackData">e.callbackData</helplink> property on the client side and process it based on your application's requirements.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapUploadControl.ValidationSettings">BootstrapUploadControl.ValidationSettings</helplink> - Provides access to the control's settings related to the built-in validation.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl.UploadMode">BootstrapUploadControl.UploadMode</helplink> - Specifies the upload mode (Advances or Standard).</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapUploadControl.AdvancedModeSettings">BootstrapUploadControl.AdvancedModeSettings</helplink> - Provides access to the control's settings related to the Advanced Upload mode.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl.ShowUploadButton">BootstrapUploadControl.ShowUploadButton</helplink> - Specifies whether the Upload Button is displayed.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl.ShowTextBox">BootstrapUploadControl.ShowTextBox</helplink> - Specifies whether the text box is displayed.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl.ShowClearFileSelectionButton">BootstrapUploadControl.ShowClearFileSelectionButton</helplink> - Specifies whether the Clear File Selection button is displayed.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl.ShowProgressPanel">BootstrapUploadControl.ShowProgressPanel</helplink> - Specifies whether the upload progress panel is displayed.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapUploadControl.CssClasses">BootstrapUploadControl.CssClasses</helplink> - Provides access to CSS classes applied to the Upload Control's visual elements.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl.UploadedFiles">BootstrapUploadControl.UploadedFiles</helplink> - Provides access to an array whose entries correspond to the Upload Control's file input elements and contain information on the uploaded files, if any.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientUploadControl.GetSelectedFiles">BootstrapClientUploadControl.GetSelectedFiles</helplink> - Returns files selected for uploading within the specified file input.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientUploadControl.Upload">BootstrapClientUploadControl.Upload</helplink> - Initiates uploading of the specified file(s) to the web server's memory.</li>
              </ul>     
              <%--EndCollapse--%>        
            ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="MultiFileSelection" Title="Multi-File Selection">
        <Description>
          <![CDATA[
              <p>In this example, the Upload Control operates in the multi-file selection mode allowing you to select multiple files in a single file-open dialog. By default, this mode is disabled. To enable it, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadAdvancedModeSettings.EnableMultiSelect">AdvancedModeSettings.EnableMultiSelect</helplink> property to <strong>true</strong>.</p>
              <%--BeginCollapse--%>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadAdvancedModeSettings.EnableFileList">BootstrapUploadControl.AdvancedModeSettings.EnableFileList</helplink> - Specifies whether a file list is available in the Upload Control.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadAdvancedModeSettings.FileListPosition">BootstrapUploadControl.AdvancedModeSettings.FileListPosition</helplink> - Specifies the position of a file list in the Upload Control.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadControlValidationSettings.MultiSelectionErrorText">BootstrapUploadControl.ValidationSettings.MultiSelectionErrorText</helplink> - Specifies the error text to be displayed if the editor's validation fails, provided the multi-file selection mode is used.</li>
              </ul>
              <%--EndCollapse--%> 
            ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DragAndDrop" Title="Drag and Drop Support">
        <Description>
          <![CDATA[
              <p>This example allows you to drag one or more files to the upload control to add these files to the control file list. By default, the drag and drop functionality is disabled. To enable it, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl.UploadMode">UploadMode</helplink> property to <strong>Advanced</strong> and switch the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadAdvancedModeSettings.EnableDragAndDrop">AdvancedModeSettings.EnableDragAndDrop</helplink> property to <strong>true</strong>.</p>
              <%--BeginCollapse--%>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadAdvancedModeSettings.DropZoneText">BootstrapUploadControl.AdvancedModeSettings.DropZoneText</helplink> - Specifies a text displayed in a drop zone within the upload control.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadAdvancedModeSettings.ExternalDropZoneID">BootstrapUploadControl.AdvancedModeSettings.ExternalDropZoneID</helplink> - Specifies the ID (or a list of IDs) of a web control(s) or HTML element(s) where files can be dragged and dropped for upload.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientUploadControl.DropZoneEnter">BootstrapClientUploadControl.DropZoneEnter</helplink> - Fires on the client-side when the mouse enters a drop zone element while dragging a file.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientUploadControl.DropZoneLeave">BootstrapClientUploadControl.DropZoneLeave</helplink> - Fires on the client-side when the mouse leaves a drop zone element while dragging a file.</li>
              </ul>
              <%--EndCollapse--%> 
            ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Validation" Title="Validation" SeoTitle="Bootstrap Editors Validation Demo">
      <DemoSection Key="Validation" Title="Validation">
        <Description>
          <![CDATA[
            <p>The DevExpress Bootstrap editors provide a universal mechanism for performing data validation on both the client and server. You can access the validation settings of a data editor through the editor's <strong>ValidationSettings</strong> property.</p>
            <p>You can provide the required validation logic by declaring that the editor is a required input field, or by specifying a regular expression to check user input.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="CustomValidation" Title="Custom Validation">
        <Description>
          <![CDATA[
            <p>The DevExpress Bootstrap editors allow you to provide custom validation logic to an editor. To achieve this goal, handle the editor's <strong>Validation</strong> event on the server side, client side, or both.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
  </DemoGroup>

  <DemoGroup Key="FileManager" Title="File Manager" SeoTitle="Bootstrap File Manager" IconCssClass="icon icon-filemanager" OrderIndex="9">
    <PreDescription>
      <![CDATA[
        <p>The DevExpress Bootstrap File Manager control provides an intuitive user interface designed to manage files and folders similarly to Microsoft File Explorer. It's features include:
        <ul>
          <li>the capability to rename, copy, move and delete folders and files;</li>
          <li>support for different sources of file system data (physical, data source, cloud storage);</li>
          <li>the capability to download and upload files;</li>
          <li>built-in access control with support for security roles.</li>
        </ul>
      ]]>
    </PreDescription>
    <Description>
      <![CDATA[
        <p>Various aspects of the File Manager control's functionality are customizable using the following properties:</p>
        <ul>
          <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.Settings">Settings</helplink> - Provides access to the File Manager's main settings.</li>
          <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.SettingsEditing">SettingsEditing</helplink> - Provides access to the File Manager's editing settings.</li>
          <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.SettingsUpload">SettingsUpload</helplink> - Provides access to the upload panel's settings.</li>
          <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.SettingsPermissions">SettingsPermissions</helplink> - Provides access to settings that relate to the File Manager's permissions.</li>
          <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFileManager.SettingsToolbar">SettingsToolbar</helplink> - Provides access to the visibility of toolbar items.</li>
        </ul>
        <p>The File Manager's extensive server-side and client-side APIs cover most popular customization scenarios and give you full control over the control's behavior and presentation.</p>
      ]]>
    </Description>
    <Demo Key="FileSystemProviders" Title="File System Providers" SeoTitle="Bootstrap File Manager File System Providers Demo">
      <DemoSection Key="PhysicalProvider" Title="Physical">
        <Description>
          <![CDATA[
            <p>The Bootstrap File Manager uses the physical file system provider when the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.ProviderType">ProviderType</helplink> property is set to <strong>Physical</strong> or to <strong>NotSet</strong> (when no data source is specified). The physical file system provider is represented by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PhysicalFileSystemProvider">PhysicalFileSystemProvider</helplink> class. This class defines methods for obtaining file and folder hierarchy, as well as methods for editing file manager items. This class can be used as an ancestor for custom file system providers as shown in the <a href="../FileManager/Customization.aspx#CustomProvider">Custom File System Provider</a> demo.</p>
            <p>To visualize and manage the required physical file system, specify the root folder displayed within the Bootstrap File Manager control using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettings.RootFolder">Settings.RootFolder</helplink> or <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PhysicalFileSystemProvider.RootFolderDisplayName">PhysicalFileSystemProvider.RootFolderDisplayName</helplink> property.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DataSourceProvider" Title="Data Source">
        <Description>
          <![CDATA[
            <p>The data source file system provider allows you to use the File Manager to visualize file system data from a database. The Bootstrap File Manager uses the data source file system provider when the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.ProviderType">ProviderType</helplink> property is set to <strong>DataSource</strong> or to <strong>NotSet</strong> when any data source is specified via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.DataSourceID">DataSourceID</helplink>/<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.DataSource">DataSource</helplink> property. The data source file system provider is represented by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DataSourceFileSystemProvider">DataSourceFileSystemProvider</helplink> class. This class defines methods for obtaining file and folder hierarchy, as well as methods for editing file manager items.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.SettingsDataSource">SettingsDataSource</helplink> property provides access to the following file system provider settings:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsDataSource.KeyFieldName">KeyFieldName</helplink> - Gets or sets the name of the data source key field.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsDataSource.ParentKeyFieldName">ParentKeyFieldName</helplink> - Gets or sets the name of the data source field which provides the item parent key values.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsDataSource.NameFieldName">NameFieldName</helplink> - Gets or sets the name of the data source field which provides unique item identifier names.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsDataSource.IsFolderFieldName">IsFolderFieldName</helplink> - Gets or sets the name of the data source field which provides values indicating whether an item is a file or folder.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsDataSource.FileBinaryContentFieldName">FileBinaryContentFieldName</helplink> - Gets or sets the name of the data source field which provides file content.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsDataSource.LastWriteTimeFieldName">LastWriteTimeFieldName</helplink> - Gets or sets the name of the data source field which provides the time of the last file modification.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="ViewModes" Title="View Modes" SeoTitle="Bootstrap File Manager File List View Modes Demo">
      <DemoSection Key="Thumbnails" Title="Thumbnails">
        <Description>
          <![CDATA[
            <p>By default, the Bootstrap File Manager control is displayed in Thumbnails mode. In this mode, the File Manage displays files using thumbnail images.</p>
            <p>Thumbnail images are generated automatically for image files (.bmp, .jpg, .png, etc.). The generated images are stored in the location specified using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettings.ThumbnailFolder">Settings.ThumbnailFolder</helplink> property. By default, the File Manager keeps thumbnails in the public <strong>"~\Thumb\"</strong> folder, where every subfolder corresponds to a File Manager folder containing any images. A subfolder name is created using the MD5 (Message Digest 5) algorithm based on a source folder's relative path.</p>
            <p>Therefore, if you implement a multi-user application or dynamically change the root folder, it is recommended that you also dynamically specify a thumbnail folder based on the currently logged-in user.</p>
            <%--BeginCollapse--%>
            <p>Predefined thumbnails are provided for the following file extensions:</p>
            <ul>
              <li>txt</li>
              <li>rtf, doc, docx, odt</li>
              <li>xls, xlsx, ods</li>
              <li>ppt, pptx, odp</li>
              <li>pdf</li>
            </ul>
            <p>Other files are displayed using the default  thumbnail image. If the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsFileList.ShowFolders">SettingsFileList.ShowFolders</helplink> option is enabled, the file list includes folder items that also have a dedicated thumbnail image. A predefined thumbnail can be substituted using the CssClasses property.</p>
            <p>Thumbnail-specific settings are available through the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFileManager.CssClasses">SettingsFileList.ThumbnailsViewSettings</helplink> property:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileListThumbnailsViewSettings.ThumbnailWidth">ThumbnailWidth</helplink> - Gets or sets the width of thumbnails and folder images displayed in the file area.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileListThumbnailsViewSettings.ThumbnailHeight">ThumbnailHeight</helplink> - Gets or sets the height of thumbnails and folder images displayed in the file area.</li>
            </ul>
            <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Details" Title="Details">
        <Description>
          <![CDATA[
            <p>In Details view mode, information about files and folders is displayed in a grid view. To enable this mode, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsFileList.View">SettingsFileList.View</helplink> property to <strong>Detail</strong>. You can add columns to the grid using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileListDetailsViewSettings.Columns">SettingsFileList.DetailsViewSettings.Columns</helplink> collection property. If this collection is empty, the grid contains the following default columns:</p>
            <ul>
              <li><strong>FileName</strong> - Displays a file name (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerItem.Name">FileManagerItem.Name</helplink> property value).</li>
              <li><strong>LatWriteTime</strong> - Displays the time of the last file modification (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerItem.LastWriteTime">FileManagerItem.LastWriteTime</helplink> property value).</li>
              <li><strong>Size</strong> - Displays the file size (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerItem.Length">FileManagerItem.Length</helplink> property value).</li>
              <li><strong>Thumbnail</strong> - Displays the thumbnail image.</li>
            </ul>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsFileList.DetailsViewSettings">SettingsFileList.DetailsViewSettings</helplink> property provides access to the following settings related to the Details view functionality:</p>
            <%--BeginCollapse--%>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileListDetailsViewSettings.AllowColumnSort">AllowColumnSort</helplink> - Gets or sets whether end-users can sort data.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileListDetailsViewSettings.AllowColumnDragDrop">AllowColumnDragDrop</helplink> - Gets or sets whether end-users can reorder columns by dragging their headers.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileListDetailsViewSettings.AllowColumnResize">AllowColumnResize</helplink> - Gets or sets a value that specifies whether the columns can be resized by end-users on the client side.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileListDetailsViewSettings.ShowHeaderFilterButton">ShowHeaderFilterButton</helplink> - Gets or sets whether column headers display filter buttons.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileListDetailsViewSettings.ShowSelectAllCheckbox">ShowSelectAllCheckbox</helplink> - Specifies whether the <strong>Select All</strong> check box is displayed in the file list.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileListDetailsViewSettings.SettingsCommandColumn">SettingsCommandColumn</helplink> - Provides access to the settings of the command column.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileListDetailsViewSettings.SettingsAdaptivity">SettingsAdaptivity</helplink> - Provides access to the adaptivity settings.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileListDetailsViewSettings.ThumbnailHeight">ThumbnailHeight</helplink> - Gets or sets the height of thumbnails and folder images displayed in the file area.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileListDetailsViewSettings.ThumbnailWidth">ThumbnailWidth</helplink> - Gets or sets the width of thumbnails and folder images displayed in the file area.</li>
            </ul>
            <%--EndCollapse--%>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="AccessControl" Title="Access Control" SeoTitle="Bootstrap File Manager Access Control Demo">
      <DemoSection Key="AccessPermissions" Title="Access Permissions">
        <Description>
          <![CDATA[
            <p>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsPermissions.AccessRules">SettingsPermissions.AccessRules</helplink> collection property to define access permissions for folders and files. Access rules are applied in the order they are defined in the collection. A rule with a higher index in the collection has a higher priority and can override the effect of a preceding rule.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsPermissions.AccessRules">AccessRules</helplink> collection allows items of the following types:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFolderAccessRule">FileManagerFolderAccessRule</helplink> - An access rule for a folder, its subfolders, and files.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileAccessRule">FileManagerFileAccessRule</helplink> - An access rule for a file or a set of files.</li>
            </ul>
            <p>Use a folder access rule object's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFolderAccessRule.Path">FileManagerFolderAccessRule.Path</helplink> property to specify a path to a folder to which the rule is applied.</p>
            <p>A file access rule object's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileAccessRule.PathPattern">FileManagerFileAccessRule.PathPattern</helplink> property specifies a pattern that can match multiple file paths. This pattern can contain a wildcard character (<strong>*</strong>) that denotes any sequence of characters.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFolderAccessRule.Browse">FileManagerFolderAccessRule.Browse</helplink> - Permission to view a folder.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileAccessRule.FullAccess">FileManagerFileAccessRule.FullAccess</helplink> - Permission to view and edit a file. If set to <code>Right.Allow</code>, this permission overrides the effect of <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerAccessRuleBase.Edit">FileManagerAccessRuleBase.Edit</helplink>.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileAccessRule.Download">FileManagerFileAccessRule.Download</helplink> - Permission to download a file.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerAccessRuleBase.Edit">FileManagerAccessRuleBase.Edit</helplink> - Permission to edit a file/folder and its content (for folders).</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFolderAccessRule.EditContents">FileManagerFolderAccessRule.EditContents</helplink> - Permission to edit folder content.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFolderAccessRule.Upload">FileManagerFolderAccessRule.Upload</helplink> - Permission to upload files to a folder.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Roles" Title="Roles">
        <Description>
          <![CDATA[
            <p>You can associate an access rule with a security role using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerAccessRuleBase.Role">FileManagerAccessRuleBase.Role</helplink> property. Any created role can be enforced on the control via its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsPermissions.Role">FileManagerSettingsPermissions.Role</helplink> property. After that, the file manager will display the folder and files and provide access permissions to them, based on the assigned role.</p>
            <p>In this demo, you can select one of the security roles from the control toolbar's <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFileManagerToolbarCustomDropDownButton">BootstrapFileManagerToolbarCustomDropDownButton</helplink> item's drop-down menu (custom toolbar items are described in greater detail in the Custom Toolbar demo). The file and folder permissions granted to each role are listed below:</p>
            <ul>
              <li><strong>Default User</strong> - A user is allowed to browse folder content. All file/folder modifications or file uploads are prohibited. The System folder is hidden in a folder tree.</li>
              <li><strong>Document Manager</strong> - A user is allowed to browse folder content and perform file/folder operations (including file uploads) within the Documents folder only. All file/folder modifications or file uploads within other folders are prohibited. The System folder is hidden in a folder tree.</li>
              <li><strong>Media Moderator</strong> - A user is allowed to browse folder content and perform file/folder operations (including file uploads) within the Music and Video folders only. All file/folder modifications or file uploads within other folders are prohibited. The System folder is hidden in a folder tree.</li>
              <li><strong>Administrator</strong> - A user is allowed to browse folder content and perform file(except XML documents)/folder operations (including file uploads). The System folder is shown in a folder tree. This folder is also fully accessible for all file/folder modifications or file uploads.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Customization" Title="Customization" SeoTitle="Bootstrap File Manager Customization Demo">
      <DemoSection Key="CustomProvider" Title="Custom File System Provider">
        <Description>
          <![CDATA[
            <p>The Bootstrap File Manager allows you to implement custom file system provider. A custom provider should expand the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileSystemProviderBase">FileSystemProviderBase</helplink> class or one of its ancestors (demonstrated in the File System Providers demo). You can override the following virtual methods to provide the custom logic:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileSystemProviderBase.GetFiles(DevExpress.Web.FileManagerFolder)">FileSystemProviderBase.GetFiles</helplink> - Override this method to implement getting a collection of files that are located in the current folder.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileSystemProviderBase.GetFolders(DevExpress.Web.FileManagerFolder)">FileSystemProviderBase.GetFolders</helplink> - Override this method to implement getting a collection of folders that are located in the current folder.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileSystemProviderBase.ReadFile(DevExpress.Web.FileManagerFile)">FileSystemProviderBase.ReadFile</helplink> - Override this method to implement file reading.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/devexpress.web.filesystemproviderbase.exists.overloads">FileSystemProviderBase.Exists</helplink> - Override this method to implement the folder existence verification.</li>
            </ul>
            <p>A custom provider can be assigned to Bootstrap File Manager control using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.CustomFileSystemProvider">CustomFileSystemProvider</helplink> or <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.CustomFileSystemProviderTypeName">CustomFileSystemProviderTypeName</helplink> property. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.ProviderType">ProviderType</helplink> property needs to be set to <strong>Custom</strong> or <strong>NotSet</strong> when a custom provider is used.</p> 
            <p>The custom file system provider in this demo (the <strong>SortingFileSystemProvider</strong> class) extends the sorting capabilities of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PhysicalFileSystemProvider">PhysicalFileSystemProvider</helplink> class. By default, the File Manager sorts files and folders by their names in ascending order. The custom provider allows sorting by other properties of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFile">FileManagerFile</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFolder">FileManagerFolder</helplink> classes in  ascending or descending order.</p>
          ]]>
        </Description>
        <SourceFile>~/App_Code/FileManager/SortingFileSystemProvider.cs</SourceFile>
      </DemoSection>
      <DemoSection Key="CustomToolbar" Title="Custom Toolbar">
        <Description>
          <![CDATA[
            <p>You can add custom items to the Bootstrap File Manager's toolbar and context menu. These custom items are objects of the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFileManagerToolbarCustomButton">BootstrapFileManagerToolbarCustomButton</helplink> and <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFileManagerToolbarCustomDropDownButton">BootstrapFileManagerToolbarCustomDropDownButton</helplink> types respectively.</p>
            <p>The File Manager control provides the following API related to custom buttons:</p>
            <%--BeginCollapse--%>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerToolbarCustomButton.CommandName">BootstrapFileManagerToolbarCustomButton.CommandName</helplink> - Specifies the command name associated with the toolbar custom button.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerToolbarCustomButton.Checked">BootstrapFileManagerToolbarCustomButton.Checked</helplink> - Gets or sets whether the custom toolbar button is checked.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerToolbarCustomButton.GroupName">BootstrapFileManagerToolbarCustomButton.GroupName</helplink> - Gets or sets the name of a logical check group to which the toolbar button belongs.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerToolbarCustomButton.ClientEnabled">BootstrapFileManagerToolbarCustomButton.ClientEnabled</helplink> - Gets or sets a value that indicates whether the toolbar button is enabled on the client.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerToolbarCustomButton.ClientVisible">BootstrapFileManagerToolbarCustomButton.ClientVisible</helplink> - Gets or sets a value that specifies the initial visibility state of a toolbar custom button on the client side.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerToolbarCustomButton.Enabled">BootstrapFileManagerToolbarCustomButton.Enabled</helplink> - Gets or sets a value that indicates whether the toolbar custom button is enabled, allowing it to respond to end-user interactions.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerToolbarCustomButton.Visible">BootstrapFileManagerToolbarCustomButton.Visible</helplink> - Gets or sets a value specifying the visibility of the toolbar custom button.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerToolbarCustomDropDownButton.Items">BootstrapFileManagerToolbarCustomDropDownButton.Items</helplink> - Gets a collection that contains the sub-menu items of the current toolbar item.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerToolbarCustomDropDownButton.DropDownMode">BootstrapFileManagerToolbarCustomDropDownButton.DropDownMode</helplink> - Gets or sets a value that specifies whether a toolbar item's drop-down menu should only be invoked by using a specific drop-down button.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.CustomCommand">BootstrapClientFileManager.CustomCommand</helplink> - Fires when a custom item is clicked, allowing you to perform custom actions.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.GetContextMenuItemByCommandName(commandName)">GetToolbarItemByCommandName.GetContextMenuItemByCommandName</helplink> - Returns a toolbar/context menu item specified by its command name. </li>
            </ul>
            <%--EndCollapse--%>
            <p>In this demo, the File Manager toolbar is extended with three custom items:</p>
            <ul>
              <li>Two of these items allow you to switch between the <strong>Thumbnails</strong> and <strong>Details</strong> view modes.</li>
              <li>The third one invokes a popup displaying a file's or folder's properties. The same item is also added to the context menu.</li>
            </ul>
          ]]>
        </Description>
        <SourceFile>~/App_Code/FileManager/MetadataFileSystemProvider.cs</SourceFile>
      </DemoSection>
      <DemoSection Key="CustomThumbnails" Title="Custom Thumbnails">
        <Description>
          <![CDATA[
            <p>You can provide custom file thumbnails by handling the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.CustomThumbnail">CustomThumbnail</helplink> server event. In the the event handler, you can access information about the currently processed item using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerThumbnailCreateEventArgs.Item">BootstrapFileManagerThumbnailCreateEventArgs.Item</helplink> property. Based on this information, you can then assign a custom thumbnail using the the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFileManagerThumbnailCreateEventArgs.ThumbnailIconCssClass">BootstrapFileManagerThumbnailCreateEventArgs.ThumbnailIconCssClass</helplink> or <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerThumbnailCreateEventArgs.ThumbnailImage">ThumbnailImage</helplink> property.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="CustomColumns" Title="Custom Columns">
        <Description>
          <![CDATA[
            <p>When used in Details view mode, the Bootstrap File Manager control can display custom columns. You can define custom column using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileListDetailsViewSettings.Columns">SettingsFileList.DetailsViewSettings.Columns</helplink> collection property. Each custom column in this collection is a <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFileManagerDetailsCustomColumn">BootstrapFileManagerDetailsCustomColumn</helplink> object.</p>
            <p>File Manager control provides the following API related to custom columns:</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerDetailsCustomColumn.Name">BootstrapFileManagerDetailsCustomColumn.Name</helplink> - Gets or sets the name for the current custom column.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerDetailsCustomColumn.ItemMetadataKey">BootstrapFileManagerDetailsCustomColumn.ItemMetadataKey</helplink> - Specifies the metadata key for the custom column of the file manager's details view mode.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerDetailsCustomColumn.ShowHeaderFilterButton">BootstrapFileManagerDetailsCustomColumn.ShowHeaderFilterButton</helplink> - Specifies whether a header filter button is displayed for the custom column.</li>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapFileManager.DetailsViewCustomColumnHeaderFilterFillItems">DetailsViewCustomColumnHeaderFilterFillItems</helplink> - Enables you to provide custom filter items displayed within a filter dropdown for a custom column.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.DetailsViewCustomColumnDisplayText">DetailsViewCustomColumnDisplayText</helplink> - Allows you to provide a custom column's cell display text.</li>
            </ul>
            <p>This demo demonstrates how to implement custom header filter for such column. A custom file provider is implemented to save additional required metadata to the File Manager's items based on the available file information. The custom column is then bound to the Type metadata field using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerDetailsCustomColumn.ItemMetadataKey">ItemMetadataKey</helplink> property.</p>
            <p>The custom header filter items are specified in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.DetailsViewCustomColumnHeaderFilterFillItems">DetailsViewCustomColumnHeaderFilterFillItems</helplink> server-side event handler. Filtering is performed using filter expressions based on the <helplink href="https://docs.devexpress.com/CoreLibraries/4928/devexpress-data-library/criteria-language-syntax">Criteria Language Syntax</helplink>.</p>
          ]]>
        </Description>
        <SourceFile>~/App_Code/FileManager/MetadataFileSystemProvider.cs</SourceFile>
      </DemoSection>
    </Demo>
    <Demo Key="Adaptivity" Title="Adaptivity" SeoTitle="Bootstrap File Manager Adaptivity Demo">
      <DemoSection Key="ResponsiveLayout" Title="Responsive Layout">
        <Description>
          <![CDATA[
          <p>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsAdaptivity.Enabled">SettingsAdaptivity.Enable</helplink> property to enable the responsive mode. In this mode, the File Manager's visual interface has the following features:</p>
          <ul>
            <li>The directory tree is hidden when the browser window's inner width is less than or equal to the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsAdaptivity.CollapseFolderContainerAtWindowInnerWidth">SettingsAdaptivity.CollapseFolderContainerAtWindowInnerWidth</helplink> property's value.  An end-user can access the folder tree using the hamburger button. This behavior can be disabled using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsAdaptivity.EnableCollapseFolderContainer">SettingsAdaptivity.EnableCollapseFolderContainer</helplink> property.</li>
            <li>The toolbar buttons are successively hidden as the control shrinks to fit the browser window's width. The buttons are hidden in the order specified with their <strong>AdaptivePriority</strong> property. A user can access the hidden items by clicking the ellipse button on the toolbar's right.</li>
            <li>In the same manner, if the <strong>Details</strong> view mode is enabled, the grid automatically hides columns one by one to fit the browser window's width. You can define the order in which columns are hidden by specifying the details column <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerDetailsColumn.AdaptivePriority">AdaptivePriority</helplink> property for each data column and the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerDetailsCommandColumnSettings.AdaptivePriority">DetailsViewSettings.SettingsCommandColumn.AdaptivePriority</helplink> property for a command column.</li>
          </ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
  </DemoGroup>
  
  <DemoGroup Key="RangeSelector" Title="Range Selector" SeoTitle="Bootstrap Range Selector Control Demo" IconCssClass="icon icon-rangeselector" OrderIndex="10">
    <PreDescription>
      <![CDATA[
        <p>DevExpress Bootstrap Range Selector is a server-side wrapper for JavaScript-based DevExtreme Range Selector widget that allow you to use the familiar ASP.NET approach to integrate DevExtreme Range Selector into your web application. The Bootstrap Range Selector is a control that allows a user to select a range of values on a scale and handle changes of the currently selected range. You can configure the following settings:</p>
          <ul>
            <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelector.Chart">Chart</helplink> - Sets the options required to display a chart as the range selector's background.</li>
            <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelector.SettingsScale">SettingsScale</helplink> - Specifies options of the range selector's scale.</li>
            <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelector.SettingsSliderMarker">SettingsSliderMarker</helplink> - Defines the options of the range selector slider markers.</li>
            <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelector.SettingsBackground">SettingsBackground</helplink> - Allows you to customize the range selector's background: image, fill color, etc.</li>
            <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelector.SettingsBehavior">SettingsBehavior</helplink> - Specifies the options for interaction with the end user.</li>
          </ul>
      ]]>
    </PreDescription>
    <Description>
      <![CDATA[
        <p>The Bootstrap Range Selector control helps you transform data to its most appropriate, concise and readable visual representation. This control allows you to conveniently edit the input data for filtering in a data views or charts. Regardless of the data source or manner in which application information is stored on disk, the Bootstrap Range Selector control guarantees flexibility and speed in its consumption of input data as well as its ability to output/render information on the screen or on the printed page.</p>
      ]]>
    </Description>
    <Demo Key="DataBinding" Title="Data Binding" SeoTitle="Bootstrap Range Selector Data Binding Demo">
      <DemoSection Key="DataSourceControl" Title="Data Source Controls">
        <Description>
          <![CDATA[
            <p>The Range Selector control can obtain data from one of ASP.NET data source controls (such as <strong>EntityDataSource</strong>) on the server side. It is the easiest way to provide large amounts of data from the database to the control, and it is the right choice if you do not need to get data from third-party sources.</p>
            <p>For data binding, assign the data source control ID to the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapWebClientUIWidget.DataSourceID">DataSourceID</helplink> property. You can also specify the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapWebClientUIWidget.DataSource">DataSource</helplink> property from code behind and call the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControlBase.DataBound">DataBind</helplink> method.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="JSON" Title="JSON Files">
        <Description>
          <![CDATA[
            <p>If your server stores data in JSON, performing AJAX requests is inevitable. But instead of configuring these requests manually, assign the URL of your data storage (in this demo, a JSON file) to the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapWebClientUIWidget.DataSourceUrl">DataSourceUrl</helplink> property, and the Range Selector will do the rest. This URL may specify an absolute or relative path to the resource.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="JSONP" Title="JSONP">
        <Description>
          <![CDATA[
            <p>You can use a JSONP callback parameter supported by <helplink href="https://api.jquery.com/jQuery.ajax/">jQuery.ajax()</helplink> to access a web service that implements a JSONP (JSON with padding) endpoint.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Scale" Title="Scale Types" SeoTitle="Bootstrap Range Selector Scale Demo">
      <DemoSection Key="Numeric" Title="Numeric Scale">
        <Description>
          <![CDATA[
            <p>The Continuous scale type is used by default when the scale displays numeric or date-time values.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DateTime" Title="Date-Time Scale">
        <Description>
          <![CDATA[
            <p>This demo illustrates the use of a date-time scale. In this example, the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelectorScale.MinRange">SettingsScale.MinRange</helplink> and <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelectorScale.MaxRange">SettingsScale.MaxRange</helplink> properties are set to prevent an end-user from selecting a vacation period shorter than a week and longer than 31 days. To select a specific month, click between the corresponding scale markers.</p>
            <ul>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelectorScale.TickInterval">SettingsScale.TickInterval</helplink> - Specifies an interval between ticks.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelectorScale.MinorTickInterval">SettingsScale.MinorTickInterval</helplink> - Specifies an interval between minor ticks.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelectorScale.MinorTickVisible">SettingsScale.MinorTickVisible</helplink> - Indicates whether or not minor ticks are visible.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelectorScale.RangeIntervalUnit">SettingsScale.RangeIntervalUnit</helplink> - Specifies the minimum time unit that can be included into the selected range.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelectorScale.TickIntervalUnit">SettingsScale.TickIntervalUnit</helplink> - Specifies the time unit used to measure the time interval indicated by one tick.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelectorScale.MinorTickIntervalUnit">SettingsScale.MinorTickIntervalUnit</helplink> - Specifies the time unit used to measure the time interval indicated by one minor tick.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Logarithmic" Title="Logarithmic Scale">
        <Description>
          <![CDATA[
            <p>In this demo, a logarithmic scale is used to display a range of rapidly growing values. Each scale tick represents a number (logarithm base) raised to a power. You can specify the logarithm base using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelectorScale.LogarithmBase">SettingsScale.LogarithmBase</helplink> option.</p>
            <ul>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelectorScale.MinorTickCount">SettingsScale.MinorTickCount</helplink> - Specifies the number of minor ticks between neighboring major ticks.</li>
                <li>S<helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelectorScaleLabel.Format">ettingsScale.Label.Format</helplink> - Specifies the scale label text format.</li>
                <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelectorSliderMarker.Format">SettingsSliderMarker.Format</helplink> - Specifies the slider marker text format.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Discrete" Title="Discrete Scale">
        <Description>
          <![CDATA[
            <p>The Discrete scale type is used to select a range within a set of categories defined by string values.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Semidiscrete" Title="Semidiscrete Scale">
        <Description>
          <![CDATA[
            <p>The Semidiscrete scale type provides the discrete representation of continuous data. This scale type requires the SettingsScale.MinRange property to be set.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="Customization" Title="Customization" SeoTitle="Bootstrap Range Selector Customization Demo">
      <DemoSection Key="Image" Title="Background Image">
        <Description>
          <![CDATA[
            <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelector.SettingsBackground">SettingsBackground</helplink> property provides access to options related to the range selector's background.</p>
            <ul>
              <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelectorBackgroundSettings.ImageUrl">SettingsBackground.ImageUrl</helplink> - Specifies the URL of an image to display on the background.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Formatting" Title="Text Formatting">
        <Description>
          <![CDATA[
            <p>This demo illustrates how you can apply custom text formatting to various elements of the Range Selector control.</p>
            <p>In this demo, the format of the text displayed by the slider marker is customized using a client callback function assigned to the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelectorSliderMarker.OnClientCustomizeText">SettingsSliderMarker.OnClientCustomizeText</helplink> property.</p>
            <p>In the same way, custom formatting is applied to scale labels. Additionally, the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapUIWidgetFormat.Precision">SettingsScale.Label.Format.Precision</helplink> property is used to specify the precision of the displayed values.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="CustomizedChart" Title="Background Chart">
        <Description>
          <![CDATA[
            <p>The Range Selector control can display a data-bound chart on top of the background. You can configure the displayed chart using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelector.Chart">Chart</helplink> property. To show the chart without a background, set the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelectorBackgroundSettings.Visible">SettingsBackground.Visible</helplink> property to <strong>false</strong>.<p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ChartSeriesTemplate" Title="Chart Series Template">
        <Description>
          <![CDATA[
            <p>This demo illustrates the capability of the Range Selector to display the Chart with series customized using a series template. The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapChartSeriesTemplateSettings.OnClientCustomizeSeries">Chart.SettingsSeriesTemplate.OnClientCustomizeSeries</helplink> property specifies a callback function that returns a series object with individual series settings.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
    <Demo Key="ClientSideEvents" Title="Client-Side Events" SeoTitle="Bootstrap Range Selector Client-Side Events Demo">
      <DemoSection Key="ControlStateRange" Title="Control State">
        <Description>
          <![CDATA[
            <p>This demo illustrates the usage of client-side events provided by the Range Selector control.</p>
            <p>Handle the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapUIWidgetClientSideEventsBase.Disposing">Disposing</helplink> event to perform a custom action when the widget is being removed.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapUIWidgetBase.Drawn">Drawn</helplink> event fires when the control has finished drawing itself.</p>
            <p>When an error or warning appears, the widget notifies you by passing a message to the browser console. This message contains the ID of the incident, a brief description, and a link to the <a href="https://js.devexpress.com/Documentation/ApiReference/Data_Visualization_Widgets/Errors_and_Warnings/">Errors and Warnings</a> document where further information about this incident can be found. However, you can handle errors and warnings the way you require. To do this, implement a client-side function performing the required actions and assign it to the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapUIWidgetClientSideEventsBase.IncidentOccurred">IncidentOccurred</helplink> event. Within this function, you have access to the information about an occurred incident. This information can be accessed from the <strong>Target</strong> field of the object passed to the callback function as a parameter. This information includes the following.<p>
            <%--BeginCollapse--%>
            <ul>
              <li><strong>id</strong> - Contains the ID of an incident. The full list of IDs can be found in the <a href="https://js.devexpress.com/Documentation/ApiReference/Data_Visualization_Widgets/Errors_and_Warnings/">Errors and Warnings</a> document.</li>
              <li><strong>type</strong> - Contains the type of an incident. This field equals <em>'error'</em> for errors or <em>'warning'</em> for warnings.</li>
              <li><strong>args</strong> - Contains the argument of an incident's message. The content of this field varies greatly, depending on the incident. For example, it may contain the name of a data source field that has not been specified correctly, or the name of an option that has not been set properly.</li>
              <li><strong>text</strong> - Contains text passed to the browser console. This text includes the content of the <strong>args</strong> field if there is any.</li>
              <li><strong>widget</strong> - Contains the name of a widget that produced the error or warning.</li>
              <li><strong>version</strong> - Contains the currently used version of the ChartJS library.</li>
            </ul>
            <%--EndCollapse--%>
            ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="Exporting" Title="Exporting">
        <Description>
          <![CDATA[
            <p>To perform a custom action before Range Selector data is exported, assign a client-side function to the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapUIWidgetClientSideEventsBase.Exporting">Exporting</helplink> event. For example, you can cancel exporting using the <strong>Cancel</strong> field of the event parameter object.</p>
            <p>Assign a client-side function to the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapUIWidgetClientSideEventsBase.Exported">Exported</helplink> event if you need to perform a custom action after Range Selector data is exported. For example, this function can notify the user that the exporting has completed.</p>
            <p>To perform a custom action before a file with exported data is saved on the user's local storage, assign a client-side function to the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapUIWidgetClientSideEventsBase.FileSaving">FileSaving</helplink> event. Using the <strong>Cancel</strong> field of the event parameter object, you can cancel file saving.</p>
            ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ValueChanged" Title="Value Changed">
        <Description>
          <![CDATA[
              <p>The Range Selector control allows you to handle changes of the currently selected value range using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientRangeSelector.ValueChanged">ValueChanged</helplink> client event.</p>
              <p>Use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapRangeSelectorBehaviorSettings.CallValueChanged">SettingsBehavior.CallValueChanged</helplink> property to specify whether the <helplink href="https://docs.devexpress.com/AspNetBootstrap/js-BootstrapClientRangeSelector.ValueChanged">ValueChanged</helplink> event should fire when a user moves a slider or after he/she has stopped moving it.</p>
            ]]>
        </Description>
      </DemoSection>
    </Demo>
  </DemoGroup>

  <DemoGroup Key="Sparkline" Title="Sparkline" SeoTitle="Bootstrap Sparkline Control Demo" IconCssClass="icon icon-sparkline" OrderIndex="11">
    <PreDescription>
      <![CDATA[
        <p>DevExpress Bootstrap Sparkline is a server-side wrapper for JavaScript-based DevExtreme Sparkline widget that allow you to use the familiar ASP.NET approach to integrate DevExtreme Sparkline into your web application.</p>
        <p>The Bootstrap Sparkline control is a compact chart that contains only one series. A series is a group of related data points. The most important characteristic of a series is its type, which determines a specific visual presentation of data.</p>
        <p>Owing to their size, sparklines occupy very little space and can be easily collected in a table or embedded straight in text.</p>
        
      ]]>
    </PreDescription>
    <Description>
      <![CDATA[      
        <p>Since sparklines are simple in nature, sparkline series offer few configuration options. 
        The majority of series types, except bar and win-loss, have the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSparkline.LineColor">LineColor</helplink> and <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSparkline.LineWidth">LineWidth</helplink> options to customize series' appearance. 
        In turn, bar series have the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSparkline.BarPositiveColor">BarPositiveColor</helplink> and <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSparkline.BarNegativeColor">BarNegativeColor</helplink> options, and win-loss series have <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSparkline.WinColor">WinColor</helplink> and <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSparkline.LossColor">LossColor</helplink> options for the same purpose.</p>
        <p>Refer to the <a href="DataBinding.aspx">DataBinding</a> demo section to learn how to provide the BootstrapSparkline control with data.</p>
      ]]>
    </Description>
    <Demo Key="DataBinding" Title="Data Binding" SeoTitle="Bootstrap Sparkline Data Binding Demo">
      <DemoSection Key="DataSourceUrlJson" Title="JSON">
        <Description>
          <![CDATA[
            Data can be provided to the Bootstrap Sparkline control in several different ways. One of them is to specify the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapWebClientUIWidget.DataSourceUrl">DataSourceUrl</helplink> property. 
            The value of the property can be a path to a JSON file containing the data.
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DataSourceUrlJsonP" Title="JSONP">
        <Description>
          <![CDATA[
            <p>You can use a JSONP callback parameter supported by <helplink href="https://api.jquery.com/jQuery.ajax/">jQuery.ajax()</helplink> to access a web service that implements a JSONP (JSON with padding) endpoint.</p>
          ]]>
        </Description>
        <SourceFile>~/Sparkline/DataBindingJSONP.aspx.cs</SourceFile>
      </DemoSection>
      <DemoSection Key="Control" Title="Data Source Controls">
        <Description>
          <![CDATA[
            The third way to provide the Sparkline control with data is to use one of ASP.NET data source controls  (such as EntityDataSource) on the server side. 
            To associate a sparkline with a data source control, use the  <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapWebClientUIWidget.DataSourceID">DataSourceId</helplink> property.
            This is the easiest way to provide large amounts of data from the database to the control, and the right choice if you do not need to get data from third-party sources.
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="DataObject" Title="Data Objects">
        <Description>
          <![CDATA[
            The last option is to bind to a server-side data collection such as <strong>List</strong>, <strong>Array</strong> or <strong>DataTable</strong>. 
            In this case, use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapWebClientUIWidget.DataSource">DataSource</helplink> property to specify a data source. 
            This is the right choice if you are obtaining or generating data in code.
          ]]>
        </Description>
        <SourceFile>~/Sparkline/DataBinding.aspx.cs</SourceFile>
      </DemoSection>
    </Demo>
    <Demo Key="Types" Title="Types" SeoTitle="Bootstrap Sparkline Types Demo">
      <Description>
        <![CDATA[
          <p>The Bootstrap Sparkline control can display one of the following chart types:</p>
       ]]>
      </Description>
      <DemoSection Key="line" Title="Line">
      </DemoSection>
      <DemoSection Key="spline" Title="Spline">
      </DemoSection>
      <DemoSection Key="stepline" Title="Stepline">
      </DemoSection>
      <DemoSection Key="area" Title="Area">
      </DemoSection>
      <DemoSection Key="splinearea" Title="Splinearea">
      </DemoSection>
      <DemoSection Key="steparea" Title="Steparea">
      </DemoSection>
      <DemoSection Key="bar" Title="Bar">
      </DemoSection>
      <DemoSection Key="winloss" Title="Win-Loss">
      </DemoSection>
    </Demo>
    <Demo Key="Customization" Title="Customization" SeoTitle="Bootstrap Sparkline Customization Demo">
      <Description>
        <![CDATA[
          <p>This demo section provides information on the Sparkline control's customization capabilities.</p>
          <p>You can customize colors of various sparkline elements using the following properties:</p>
          <ul>
            <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSparkline.LineColor">LineColor</helplink> - Sets a color for a line on a sparkline.</li>
            <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSparkline.PointColor">PointColor</helplink> - Sets a color for points on a sparkline.</li>
            <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSparkline.WinColor">WinColor</helplink> - Sets a color for the bars indicating the values that are greater than the win-loss threshold.</li>
            <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSparkline.LossColor">LossColor</helplink> - Sets a color for the bars indicating the values that are less than the win-loss threshold.</li>
            <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSparkline.BarNegativeColor">BarNegativeColor</helplink> - Sets a color for the bars indicating negative values.</li>
            <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSparkline.BarPositiveColor">BarPositiveColor</helplink> - Sets a color for the bars indicating positive values.</li>
            <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSparkline.LineColor">LineColor</helplink> - Sets a color for a line on a sparkline.</li>
            <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSparkline.MinColor">MinColor</helplink> - Sets a color for the boundary of the minimum point on a sparkline.</li>
            <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSparkline.MaxColor">MaxColor</helplink> - Sets a color for the boundary of the maximum point on a sparkline.</li>
            <li><helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSparkline.ShowMinMax">ShowMinMax</helplink> - Specifies whether or not to indicate both the minimum and maximum values on a sparkline.</li>
          </ul>       

          <p>To customize the Sparkline control's tooltip, assign a callback function implementing the customization logic to the client <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapUIWidgetTooltipSettings.OnClientCustomizeTooltip">SettingsTooltip.OnClientCustomizeTooltip</helplink> property.</p>
          <p>The <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSparkline.PointSize">PointSize</helplink> and <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSparkline.PointSymbol">PointSymbol</helplink> properties allow you to customize the size and shape of sparkline point markers.</p>     
        ]]>
      </Description>
      <DemoSection Key="LineColor" Title="Line Color">

      </DemoSection>
      <DemoSection Key="PointColor" Title="Point Color">
      </DemoSection>
      <DemoSection Key="WinLossColor" Title="Win and Loss Color">
        <Description>
          <![CDATA[
            <p>In <strong>WinLoss</strong> mode, you can use different colors to display bars whose values are bigger or smaller than the value specified by the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSparkline.WinLossThreshold">WinLossThreshold</helplink> property.</p>
            ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="PointSizeAndSymbol" Title="Point Size And Symbol">
      </DemoSection>
      <DemoSection Key="BarColor" Title="Bar Color">
        <Description>
          <![CDATA[
            <p>The Sparkline control allows you to assign different colors to bars with negative and positive values using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSparkline.BarNegativeColor">BarNegativeColor</helplink> and <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapSparkline.BarPositiveColor">BarPositiveColor</helplink> properties.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="TooltipFont" Title="Tooltip Font">
        <Description>
          <![CDATA[
            <p>You can customize tooltip font settings using the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.SparklineToolTipSettings.Font">SettingsToolTip.Font</helplink> property. Hover the Sparkline to see a customized tooltip.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="TooltipCustomization" Title="Tooltip Customization">
        <Description>
          <![CDATA[
            <p>To customize the appearance of the Sparkline control's tooltips, use the <helplink href="https://docs.devexpress.com/AspNetBootstrap/DevExpress.Web.Bootstrap.BootstrapUIWidgetTooltipSettings.OnClientCustomizeTooltip">OnClientCustomizeTooltip</helplink> property. This property should be assigned a function returning an object containing customized settings, plain text, or fully custom HTML content. Hover the Sparkline to see a customized tooltip.</p>
          ]]>
        </Description>
      </DemoSection>
    </Demo>

    <Demo Key="ClientSideAPI" Title="Client-Side API" SeoTitle="Bootstrap Sparkline Client Side Events Demo">
      <DemoSection Key="ClientSideEvents" Title="Client-Side Events">
        <Description>
          <![CDATA[
            <p>The Bootstrap Sparkline control provides several client-side events fired at different moments of the control's life cycle. Use the checkboxes below to specify which events should be added to the log.</p>
          ]]>
        </Description>
      </DemoSection>
      <DemoSection Key="ClientSideMethods" Title="Exporting API">
        <Description>
          <![CDATA[
            <p>You can export and print the Sparkline control using the client-side <strong>ExportTo</strong> and <strong>Print</strong> methods. The following export formats are supported:</p>
            <ul>
              <li><strong>PNG</strong></li>
              <li><strong>PDF</strong></li>
              <li><strong>JPEG</strong></li>
              <li><strong>SVG</strong></li>
              <li><strong>GIF</strong></li>
            </ul>
            <p>The following client-side events are fired during the export process:</p>
            <ul>
              <li><strong>Exporting</strong> - Fires before sparkline data is exported.</li>
              <li><strong>Exported</strong> - Fires after sparkline data has been exported.</li>
              <li><strong>FileSaving</strong> - Fires before a file with exported data is saved on the user's local storage.</li>
            </ul>
          ]]>
        </Description>
      </DemoSection>
    </Demo>
  </DemoGroup>

  <Search>
    <Synonyms>
      <Group>datasource, databinding, binding, database, databind</Group>
      <Group>grid, gridview, gridviewcontrol, aspxgridview</Group>
      <Group>eXpress, Persistent, xpo</Group>
    </Synonyms>
    <Exclusions>
      <Words>devexpress, dx, asp, devex, asp.net, demo, demos, web</Words>
      <Prefixes>aspx, asp, xtra, client, dx, web</Prefixes>
      <Postfixes>s, ing, control, e, ies</Postfixes>
    </Exclusions>
  </Search>
</Demos>
